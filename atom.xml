<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>heshang</title>
  <icon>https://www.gravatar.com/avatar/ff0fad28696a2c137c9f67b2f18f359f</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://heshang.ink/"/>
  <updated>2019-07-22T08:55:16.139Z</updated>
  <id>https://heshang.ink/</id>
  
  <author>
    <name>和尚</name>
    <email>914727235@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu安装和配置MySQL</title>
    <link href="https://heshang.ink/2019/07/22/Ubuntu%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEMySQL/"/>
    <id>https://heshang.ink/2019/07/22/Ubuntu安装和配置MySQL/</id>
    <published>2019-07-22T08:46:09.000Z</published>
    <updated>2019-07-22T08:55:16.139Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu下如何安装MySQL，启动、停止、重启MySQL服务，修改MySQL编码uft8，如何完全卸载MySQL</p><a id="more"></a><h2 id="一、MySQL版本"><a href="#一、MySQL版本" class="headerlink" title="一、MySQL版本"></a>一、MySQL版本</h2><p>5.x:<br>    5.0-5.1:早期产品的延续，升级维护<br>    5.4 - 5.x :  MySQL整合了三方公司的新存储引擎</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">安装mysql服务</span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line">安装客户端</span><br><span class="line">sudo apt install mysql-client</span><br><span class="line">安装依赖</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br><span class="line">检查状态</span><br><span class="line">sudo netstat -tap | grep mysql</span><br><span class="line">检查版本</span><br><span class="line">mysqladmin --version</span><br></pre></td></tr></table></figure><h2 id="三、手动操作MySQL服务"><a href="#三、手动操作MySQL服务" class="headerlink" title="三、手动操作MySQL服务"></a>三、手动操作MySQL服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">验证：mysqladmin --version</span><br><span class="line">启动mysql：</span><br><span class="line">方式一：sudo /etc/init.d/mysql start </span><br><span class="line">方式二：sudo start mysql</span><br><span class="line">方式三：</span><br><span class="line"></span><br><span class="line">停止mysql：</span><br><span class="line">方式一：sudo /etc/init.d/mysql stop </span><br><span class="line">方式二：sudo stop mysql</span><br><span class="line">方式san：sudo service mysql stop</span><br><span class="line"></span><br><span class="line">重启mysql：</span><br><span class="line">方式一：sudo/etc/init.d/mysql restart</span><br><span class="line">方式二：sudo restart mysql</span><br><span class="line">方式三：sudo service mysql restart</span><br></pre></td></tr></table></figure><h2 id="四、配置编码utf8"><a href="#四、配置编码utf8" class="headerlink" title="四、配置编码utf8"></a>四、配置编码utf8</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql5.7 配置文件在 /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line">sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">[mysqld]下加入 character_set_server=utf8</span><br><span class="line">重启mysql sudo restart mysql</span><br><span class="line"></span><br><span class="line">也可以直接找到那个文件，直接打开文件</span><br></pre></td></tr></table></figure><h2 id="五、进入MySQL"><a href="#五、进入MySQL" class="headerlink" title="五、进入MySQL"></a>五、进入MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="六、查看编码"><a href="#六、查看编码" class="headerlink" title="六、查看编码"></a>六、查看编码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%char%&apos; ;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/19/5d317c86a46e396736.png" alt=""></p><h2 id="七、完全卸载MySQL"><a href="#七、完全卸载MySQL" class="headerlink" title="七、完全卸载MySQL"></a>七、完全卸载MySQL</h2><blockquote><p>借鉴于 <a href="https://blog.csdn.net/w3045872817/article/details/77334886" target="_blank" rel="noopener">https://blog.csdn.net/w3045872817/article/details/77334886</a></p></blockquote><ul><li>首先用dpkg –list|grep mysql查看自己的mysql有哪些依赖</li></ul><p><img src="https://i.loli.net/2019/07/22/5d3579bd2479021017.png" alt=""></p><ul><li><p>先卸载sudo apt-get remove mysql-common</p></li><li><p>然后：sudo apt-get autoremove –purge mysql-server-5.0 </p></li><li><p>再用dpkg –list|grep mysql查看，还剩什么就卸载什么</p></li><li><p>最后清楚残留数据：dpkg -l |grep ^rc|awk ‘{print $2}’ |sudo xargs dpkg -P</p></li><li><p>然后重启Ubuntu就行了</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu下如何安装MySQL，启动、停止、重启MySQL服务，修改MySQL编码uft8，如何完全卸载MySQL&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://heshang.ink/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="https://heshang.ink/tags/Ubuntu/"/>
    
      <category term="MySQL安装" scheme="https://heshang.ink/tags/MySQL%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>MySQL（五） 多版本并发控制MVCC</title>
    <link href="https://heshang.ink/2019/07/18/MySQL%EF%BC%88%E4%BA%94%EF%BC%89-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6MVCC/"/>
    <id>https://heshang.ink/2019/07/18/MySQL（五）-多版本并发控制MVCC/</id>
    <published>2019-07-18T01:50:21.000Z</published>
    <updated>2019-07-18T06:09:29.654Z</updated>
    
    <content type="html"><![CDATA[<p>什么是MVCC？InnoDB引擎用的MVCC。MVCC逻辑流程</p><a id="more"></a><h2 id="什么是MVCC"><a href="#什么是MVCC" class="headerlink" title="什么是MVCC"></a>什么是MVCC</h2><blockquote><p>MVCC，Multi-Version Concurrency Control，多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问；在编程语言中实现事务内存。</p><p>多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p></blockquote><p>如果有人从数据库中读数据的同时，有另外的人写入数据，有可能读数据的人会看到『半写』或者不一致的数据。有很多种方法来解决这个问题，叫做并发控制方法。最简单的方法，通过加锁，让所有的读者等待写者工作完成，但是这样效率会很差。MVCC 使用了一种不同的手段，每个连接到数据库的读者，<strong>在某个瞬间看到的是数据库的一个快照</strong>，写者写操作造成的变化在写操作完成之前（或者数据库事务提交之前）对于其他的读者来说是不可见的。</p><p>当一个 MVCC 数据库需要更一个一条数据记录的时候，它不会直接用新数据覆盖旧数据，而是将旧数据标记为过时（obsolete）并在别处增加新版本的数据。这样就会有存储多个版本的数据，但是只有一个是最新的。这种方式允许读者读取在他读之前已经存在的数据，即使这些在读的过程中半路被别人修改、删除了，也对先前正在读的用户没有影响。<strong>这种多版本的方式避免了填充删除操作在内存和磁盘存储结构造成的空洞的开销，但是需要系统周期性整理（sweep through）以真实删除老的、过时的数据。</strong>对于面向文档的数据库（Document-oriented database，也即半结构化数据库）来说，这种方式允许系统将整个文档写到磁盘的一块连续区域上，当需要更新的时候，直接重写一个版本，而不是对文档的某些比特位、分片切除，或者维护一个链式的、非连续的数据库结构。</p><p>MVCC 提供了时点（point in time）一致性视图。MVCC 并发控制下的读事务一般使用<strong>时间戳或者事务 ID</strong>去标记当前读的数据库的状态（版本），读取这个版本的数据。读、写事务相互隔离，不需要加锁。<strong>读写并存的时候，写操作会根据目前数据库的状态，创建一个新版本，并发的读则依旧访问旧版本的数据。</strong></p><p>一句话总结就是：</p><blockquote><p>MVCC(<code>Multiversion concurrency control</code>) 就是 同一份数据临时保留多版本的一种方式，进而实现并发控制</p></blockquote><p>哪么此处需要注意的点就是：</p><ul><li>在读写并发的过程中如何实现多版本？</li><li>在读写并发之后，如何实现旧版本的删除（毕竟很多时候只需要一份最新版的数据就够了）？</li></ul><p>下面介绍一下MySQL中对于 MVCC 的逻辑实现</p><h2 id="MVCC逻辑流程-插入"><a href="#MVCC逻辑流程-插入" class="headerlink" title="MVCC逻辑流程-插入"></a>MVCC逻辑流程-插入</h2><p>在MySQL中建表时，每个表都会有三列隐藏记录，其中和MVCC有关系的有两列</p><ul><li>数据行的版本号 （DB_TRX_ID）</li><li>删除版本号 (DB_ROLL_PT)</li></ul><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th><th style="text-align:center">DB_TRX_ID</th><th style="text-align:center">DB_ROLL_PT</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>在插入数据的时候，假设系统的全局事务ID从1开始，以下SQL语句执行分析参考注释信息：</p><p>在插入数据的时候，假设系统的全局事务ID从1开始，以下SQL语句执行分析参考注释信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;<span class="comment">-- 获取到全局事务ID</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`test_zq`</span> (<span class="string">`id`</span>, <span class="string">`test_id`</span>) <span class="keyword">values</span>(<span class="string">'5'</span>,<span class="string">'68'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`test_zq`</span> (<span class="string">`id`</span>, <span class="string">`test_id`</span>) <span class="keyword">values</span>(<span class="string">'6'</span>,<span class="string">'78'</span>);</span><br><span class="line"><span class="keyword">commit</span>;<span class="comment">-- 提交事务</span></span><br></pre></td></tr></table></figure><p>当执行完以上SQL语句之后，表格中的内容会变成：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th><th style="text-align:center">DB_TRX_ID</th><th style="text-align:center">DB_ROLL_PT</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">68</td><td style="text-align:center">1</td><td style="text-align:center">NULL</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">78</td><td style="text-align:center">1</td><td style="text-align:center">NULL</td></tr></tbody></table><p>可以看到，插入的过程中会把全局事务ID记录到列 DB_TRX_ID 中去</p><h2 id="MVCC逻辑流程-删除"><a href="#MVCC逻辑流程-删除" class="headerlink" title="MVCC逻辑流程-删除"></a>MVCC逻辑流程-删除</h2><p>对上述表格做删除逻辑，执行以下SQL语句（假设获取到的事务逻辑ID为 3）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>；<span class="comment">--获得全局事务ID = 3</span></span><br><span class="line"><span class="keyword">delete</span> test_zq <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>执行完上述SQL之后数据并没有被真正删除，而是对删除版本号做改变，如下所示：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th><th style="text-align:center">DB_TRX_ID</th><th style="text-align:center">DB_ROLL_PT</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">68</td><td style="text-align:center">1</td><td style="text-align:center">NULL</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">78</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr></tbody></table><h2 id="MVCC逻辑流程-修改"><a href="#MVCC逻辑流程-修改" class="headerlink" title="MVCC逻辑流程-修改"></a>MVCC逻辑流程-修改</h2><p>修改逻辑和删除逻辑有点相似，修改数据的时候 会先复制一条当前记录行数据，同时标记这条数据的数据行版本号为当前事务版本号，最后把原来的数据行的删除版本号标记为当前事务版本号。</p><p>执行以下SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;<span class="comment">-- 获取全局系统事务ID 假设为 10</span></span><br><span class="line"><span class="keyword">update</span> test_zq <span class="keyword">set</span> test_id = <span class="number">22</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>执行后表格实际数据应该是：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th><th style="text-align:center">DB_TRX_ID</th><th style="text-align:center">DB_ROLL_PT</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">68</td><td style="text-align:center">1</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">78</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">22</td><td style="text-align:center">10</td><td style="text-align:center">NULL</td></tr></tbody></table><h2 id="MVCC逻辑流程-查询"><a href="#MVCC逻辑流程-查询" class="headerlink" title="MVCC逻辑流程-查询"></a>MVCC逻辑流程-查询</h2><p>此时，数据查询规则如下：</p><ul><li><p>查找<strong>数据行版本号早于当前事务版本号</strong>的数据行记录</p><p>也就是说，数据行的版本号要小于或等于当前是事务的系统版本号，这样也就确保了读取到的数据是当前事务开始前已经存在的数据，或者是自身事务改变过的数据</p></li><li><p>查找<strong>删除版本号</strong>要么为NULL，要么<strong>大于当前事务版本号</strong>的记录</p><p>这样确保查询出来的数据行记录在事务开启之前没有被删除</p></li></ul><p>根据上述规则，我们继续以上张表格为例，对此做查询操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;<span class="comment">-- 假设拿到的系统事务ID为 12</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_zq;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>执行结果应该是：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th><th style="text-align:center">DB_TRX_ID</th><th style="text-align:center">DB_ROLL_PT</th></tr></thead><tbody><tr><td style="text-align:center">6</td><td style="text-align:center">22</td><td style="text-align:center">10</td><td style="text-align:center">NULL</td></tr></tbody></table><h2 id="MySQL-中-MVCC-版本控制案例"><a href="#MySQL-中-MVCC-版本控制案例" class="headerlink" title="MySQL 中 MVCC 版本控制案例"></a>MySQL 中 MVCC 版本控制案例</h2><p>回到文章刚开始的哪个例子，我们使用 MVCC 机制分析一遍</p><p>为了方便描述，对SQL语句做如下标记：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;<span class="comment">--假设当前获取到的事务 ID 为 2 ----1</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_zq;    <span class="comment">----2</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;<span class="comment">--假设当前获取到的事务 ID 为 3 ----3</span></span><br><span class="line"><span class="keyword">UPDATE</span> test_zq <span class="keyword">SET</span> test_id = <span class="number">20</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;<span class="comment">----4</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>对表中数据做初始化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`test_zq`</span> (<span class="string">`id`</span>, <span class="string">`test_id`</span>) <span class="keyword">values</span>(<span class="string">'1'</span>,<span class="string">'18'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`test_zq`</span> (<span class="string">`id`</span>, <span class="string">`test_id`</span>) <span class="keyword">values</span>(<span class="string">'4'</span>,<span class="string">'8'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>表中的原始数据为：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th><th style="text-align:center">DB_TRX_ID</th><th style="text-align:center">DB_ROLL_PT</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">18</td><td style="text-align:center">1</td><td style="text-align:center">NULL</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">1</td><td style="text-align:center">NULL</td></tr></tbody></table><h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><p><strong>执行顺序为</strong> <code>1 2 3 4 2</code></p><p><code>1 2</code> 步骤执行结果为：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">8</td></tr></tbody></table><p><code>3 4</code> 步骤执行结果为：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th><th style="text-align:center">DB_TRX_ID</th><th style="text-align:center">DB_ROLL_PT</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">18</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">1</td><td style="text-align:center">NULL</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">20</td><td style="text-align:center">3</td><td style="text-align:center">NULL</td></tr></tbody></table><p><code>2</code>执行后的结果为：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">8</td></tr></tbody></table><p>上述结果符合预期，接下来看案例2</p><h4 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h4><p>执行顺序为**<code>3 4 1 2</code></p><p><code>3 4</code> 步骤执行后结果为：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th><th style="text-align:center">DB_TRX_ID</th><th style="text-align:center">DB_ROLL_PT</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">18</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">1</td><td style="text-align:center">NULL</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">20</td><td style="text-align:center">3</td><td style="text-align:center">NULL</td></tr></tbody></table><p><code>1 2</code> 步骤执行后结果为：</p><p>假设此时的事务ID为 <code>txid = 4</code></p><p>则查询结果是 ：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">test_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">8</td></tr></tbody></table><p>显然，结果应该是不对的，但是我们在文章开头也是按照这样的顺序执行的，但是MySQL的返回结果没有任何问题，可是这里根据MVCC机制来分析却出现了这样的状况，所以问题出在哪里？</p><p>我们大概可以猜测到：</p><blockquote><p>此处问题不是出在 MVCC 机制，MySQL解决不可重复读和脏读并不是单纯利用 MVCC 机制来实现的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是MVCC？InnoDB引擎用的MVCC。MVCC逻辑流程&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="并发" scheme="https://heshang.ink/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="多版本并发控制MVCC" scheme="https://heshang.ink/tags/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6MVCC/"/>
    
      <category term="InnoDB" scheme="https://heshang.ink/tags/InnoDB/"/>
    
  </entry>
  
  <entry>
    <title>MySQL（四） 如何解决并发问题-隔离级别</title>
    <link href="https://heshang.ink/2019/07/18/MySQL%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98-%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>https://heshang.ink/2019/07/18/MySQL（四）-如何解决并发问题-隔离级别/</id>
    <published>2019-07-18T01:50:01.000Z</published>
    <updated>2019-07-18T06:06:33.172Z</updated>
    
    <content type="html"><![CDATA[<p>解决并发下的另外一个方法，隔离级别！！</p><a id="more"></a><h1 id="一、隔离级别"><a href="#一、隔离级别" class="headerlink" title="一、隔离级别"></a>一、隔离级别</h1><p>首先创建一个account的表，插入数据，引擎为Innodb</p><p><img src="https://i.loli.net/2019/07/16/5d2d54ef55e7a38651.png" alt=""></p><h2 id="1-未提交读（Read-uncommitted）"><a href="#1-未提交读（Read-uncommitted）" class="headerlink" title="1. 未提交读（Read uncommitted）"></a>1. 未提交读（Read uncommitted）</h2><p>允许脏读，事务中的修改，即时没有提交，对其它事务也是可见的</p><p>A查询执行操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;<span class="comment">--设置隔离级别为read uncommitted</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;<span class="comment">--设置手动提交</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">account</span>;</span><br></pre></td></tr></table></figure><p>结果是这样的</p><p><img src="https://i.loli.net/2019/07/16/5d2d5584f1e9567811.png" alt=""></p><p>B查询执行操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> <span class="keyword">account</span> = <span class="keyword">account</span> + <span class="number">200</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>B再运行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">account</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2d55e72fea354600.png" alt=""></p><p>然而B执行的更新操作，并没有手动提交，数据库里数据还是1 - 1000，而不是1200，需要真的更新到数据库，需要commit</p><h2 id="2-提交读（Read-committed）"><a href="#2-提交读（Read-committed）" class="headerlink" title="2. 提交读（Read committed）"></a>2. 提交读（Read committed）</h2><p>只能读取到已经提交的数据，但是出现不可重复读情况</p><p>A执行操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> committed;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> <span class="keyword">account</span>=<span class="keyword">account</span> - <span class="number">200</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">account</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2d577829a7330182.png" alt=""></p><p>B执行操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">account</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2d57b56760163645.png" alt=""></p><p>不是800，？？？？why？？？？</p><p>A执行操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>再执行B：</p><p><img src="https://i.loli.net/2019/07/16/5d2d57fa938e595101.png" alt=""></p><p>变为800！！！！</p><h2 id="3-可重复读（Repeatable-read）（MySQL默认级别）"><a href="#3-可重复读（Repeatable-read）（MySQL默认级别）" class="headerlink" title="3. 可重复读（Repeatable read）（MySQL默认级别）"></a>3. 可重复读（Repeatable read）（MySQL默认级别）</h2><p>保证在同一事务中多次读取同样数据的结果是一样的，消除了不可重复读，但是还存在幻影读</p><p>A操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">account</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2d5a5e0b83312153.png" alt=""></p><p>B操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">id</span>,<span class="keyword">account</span>) <span class="keyword">value</span>(<span class="number">3</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">account</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2d5ac6c056042982.png" alt=""></p><p>插入成功</p><p>A操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">account</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2d5a5e0b83312153.png" alt=""></p><p>A两次查询，结果都是一样的，解决了不可重复读的问题！！！！</p><p>A操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span> (<span class="keyword">id</span>,<span class="keyword">account</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2d5c36a64e380964.png" alt=""></p><p>竟然报错了！！！！！！！说这条数据存在，</p><p>这里就出现了幻影读问题！！！</p><h2 id="4-可串行化（Serializable）"><a href="#4-可串行化（Serializable）" class="headerlink" title="4. 可串行化（Serializable）"></a>4. 可串行化（Serializable）</h2><p>强制事务串行执行。</p><p>需要加锁实现，而其它隔离级别通常不需要。</p><p><img src="https://i.loli.net/2019/07/16/5d2d5e851337e47084.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决并发下的另外一个方法，隔离级别！！&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="并发" scheme="https://heshang.ink/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="未提交读" scheme="https://heshang.ink/tags/%E6%9C%AA%E6%8F%90%E4%BA%A4%E8%AF%BB/"/>
    
      <category term="提交读" scheme="https://heshang.ink/tags/%E6%8F%90%E4%BA%A4%E8%AF%BB/"/>
    
      <category term="可重复读" scheme="https://heshang.ink/tags/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/"/>
    
      <category term="可串行化" scheme="https://heshang.ink/tags/%E5%8F%AF%E4%B8%B2%E8%A1%8C%E5%8C%96/"/>
    
      <category term="隔离级别" scheme="https://heshang.ink/tags/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>MySQL（三） 如何解决并发问题-封锁</title>
    <link href="https://heshang.ink/2019/07/18/MySQL%EF%BC%88%E4%B8%89%EF%BC%89-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98-%E5%B0%81%E9%94%81/"/>
    <id>https://heshang.ink/2019/07/18/MySQL（三）-如何解决并发问题-封锁/</id>
    <published>2019-07-18T01:49:44.000Z</published>
    <updated>2019-07-18T06:06:05.779Z</updated>
    
    <content type="html"><![CDATA[<p>承接上文，如果在高并发下，会产生上述情况，那数据库又做了什么，解决并发问题？？封锁？？</p><a id="more"></a><h1 id="一、封锁"><a href="#一、封锁" class="headerlink" title="一、封锁"></a>一、封锁</h1><h2 id="1-封锁粒度"><a href="#1-封锁粒度" class="headerlink" title="1. 封锁粒度"></a>1. 封锁粒度</h2><ul><li>封锁对象的大小称为封锁粒度</li><li>MySQL提供了两种封锁粒度：行级锁、表级锁</li><li>尽量锁自己需要修改的地方，不要锁住其他额外的资源，锁定的数据量越少，发送锁争用的可能就越小，系统的并发程度就越高。</li><li>加锁需要资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。</li><li>锁定的粒度越小，需要锁定的对象就越多，可选择性就越大，并发度就越大，开销就越大</li><li>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。</li></ul><h2 id="2-封锁类型"><a href="#2-封锁类型" class="headerlink" title="2. 封锁类型"></a>2. 封锁类型</h2><h3 id="1-读写锁"><a href="#1-读写锁" class="headerlink" title="1.读写锁"></a>1.读写锁</h3><ul><li>排它锁（Exclusive），简写X锁，又称写锁。</li><li>共享锁（Shared），简写S锁，又称读锁。</li></ul><p>有以下两个规定：</p><ul><li>一个事务对数据对象A加了X锁，可以对A进行读取和更新。加锁期间其他事务不能对A加任何锁</li><li>一个事务对数据对象A加了S锁，可以对A进行读取。加锁期间其他事务可以对A加S锁，不能加X锁</li></ul><p>锁的兼容关系如下：</p><p><img src="https://i.loli.net/2019/07/16/5d2d17c56bc8c52823.png" alt=""></p><h3 id="2-意向锁"><a href="#2-意向锁" class="headerlink" title="2.意向锁"></a>2.意向锁</h3><p>白话版：意向锁就是告诉别人，我要给这个数据对象A加锁，只是表示想要，并不是真的加锁</p><p>使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。</p><p>在存在行级锁和表级锁的情况下，事务T想要对表A加X锁，就需要先检测是否有其它事务对表A或者表A中的任意一行加了锁，那么就需要对表A的每一行都检测一次，这是非常耗时的，</p><p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：</p><ul><li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；</li><li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li></ul><p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。</p><p>锁的兼容关系：</p><p><img src="https://i.loli.net/2019/07/16/5d2d21121d84646310.png" alt=""></p><p>解释如下：</p><ul><li>任意 IS/IX 锁之间都是兼容的，因为它们只是表示想要对表加锁，而不是真正加锁；</li><li>S 锁只与 S 锁和 IS 锁兼容，也就是说事务 T 想要对数据行加 S 锁，其它事务可以已经获得对表或者表中的行的 S 锁。</li></ul><h2 id="3-封锁协议"><a href="#3-封锁协议" class="headerlink" title="3.封锁协议"></a>3.封锁协议</h2><h3 id="1-三级封锁协议"><a href="#1-三级封锁协议" class="headerlink" title="1. 三级封锁协议"></a>1. 三级封锁协议</h3><h4 id="一级封锁协议"><a href="#一级封锁协议" class="headerlink" title="一级封锁协议"></a>一级封锁协议</h4><p>事务T要修改数据A时必须加X锁，直到T结束才能释放锁</p><p>可以解决<code>丢失修改</code>问题，因为不能同时两个事务对A加X锁，就不会数据被覆盖</p><p><img src="https://i.loli.net/2019/07/16/5d2d23026420131210.png" alt=""></p><h4 id="二级封锁协议"><a href="#二级封锁协议" class="headerlink" title="二级封锁协议"></a>二级封锁协议</h4><p>在一级的基础上，要求读取数据A时必须加S锁，读取完马上释放S锁。</p><p>解决<code>读脏数据</code>问题，因为一个事务对数据A进行修改，根据一级封锁协议，会加X锁，那么就不能再加S锁，就不会读入数据</p><p><img src="https://i.loli.net/2019/07/16/5d2d2417a158832587.png" alt=""></p><h4 id="三级封锁协议"><a href="#三级封锁协议" class="headerlink" title="三级封锁协议"></a>三级封锁协议</h4><p>在二级的基础上，要求读取数据A时必须加S锁，直到事务结束了才能释放S锁。</p><p>解决<code>不可重复读</code>问题，因为读A时，其他事务不能对A加X锁，从而避免了在读的期间数据发送改变</p><p><img src="https://i.loli.net/2019/07/16/5d2d30ddda28f27171.png" alt=""></p><h3 id="2-两段封锁协议"><a href="#2-两段封锁协议" class="headerlink" title="2. 两段封锁协议"></a>2. 两段封锁协议</h3><p>加锁和解锁分为两个阶段进行</p><h2 id="4-MySQL隐式与显示锁定"><a href="#4-MySQL隐式与显示锁定" class="headerlink" title="4. MySQL隐式与显示锁定"></a>4. MySQL隐式与显示锁定</h2><p>MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</p><p>InnoDB 也可以使用特定的语句进行显示锁定：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">LOCK</span> <span class="keyword">In</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>;</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;承接上文，如果在高并发下，会产生上述情况，那数据库又做了什么，解决并发问题？？封锁？？&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="并发" scheme="https://heshang.ink/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="封锁" scheme="https://heshang.ink/tags/%E5%B0%81%E9%94%81/"/>
    
      <category term="读写锁" scheme="https://heshang.ink/tags/%E8%AF%BB%E5%86%99%E9%94%81/"/>
    
      <category term="意向锁" scheme="https://heshang.ink/tags/%E6%84%8F%E5%90%91%E9%94%81/"/>
    
      <category term="三级封锁协议" scheme="https://heshang.ink/tags/%E4%B8%89%E7%BA%A7%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="两段封锁协议" scheme="https://heshang.ink/tags/%E4%B8%A4%E6%AE%B5%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>MySQL（二） 并发一致性问题</title>
    <link href="https://heshang.ink/2019/07/18/MySQL%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://heshang.ink/2019/07/18/MySQL（二）-并发一致性问题/</id>
    <published>2019-07-18T01:49:11.000Z</published>
    <updated>2019-07-18T01:55:37.038Z</updated>
    
    <content type="html"><![CDATA[<p>承接上文，如果在高并发下，会产生什么情况，ACID四大事务又会怎么？？？</p><a id="more"></a><h1 id="并发一致性问题"><a href="#并发一致性问题" class="headerlink" title="并发一致性问题"></a>并发一致性问题</h1><p>并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p><h2 id="1-丢失修改"><a href="#1-丢失修改" class="headerlink" title="1. 丢失修改"></a>1. 丢失修改</h2><p>T1先修改，T2随后修改，T2的修改覆盖了T1修改</p><p><img src="https://i.loli.net/2019/07/15/5d2c036fd8f9832172.png" alt=""></p><h2 id="2-读脏数据"><a href="#2-读脏数据" class="headerlink" title="2. 读脏数据"></a>2. 读脏数据</h2><p>T1修改数据，T2随后读取这个数据，如果T1撤销了这次修改，那么T2读取的数据就是脏数据。</p><p><img src="https://i.loli.net/2019/07/16/5d2d129dd4deb28010.png" alt=""></p><h2 id="3-不可重复读"><a href="#3-不可重复读" class="headerlink" title="3. 不可重复读"></a>3. 不可重复读</h2><p>T2读取数据，T1对该数据做了修改，如果T2再次读取这个数据，本次读取的结果和第一次不一样。</p><p><img src="https://i.loli.net/2019/07/16/5d2d132979fff89301.png" alt=""></p><h2 id="4-幻影读"><a href="#4-幻影读" class="headerlink" title="4. 幻影读"></a>4. 幻影读</h2><p>T1查某个范围的数据，T2在这个范围进行了插入数据，T1再查这个范围的数据，读取结果两次不一样</p><p><img src="https://i.loli.net/2019/07/16/5d2d139c9c59b19255.png" alt=""></p><p>产生并发一致性问题主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过锁来实现，封锁操作用户自己控制，很复杂。数据库管理系统提供了事务的隔离级别。</p><p>参考资料：</p><ol><li><a href="https://cyc2018.github.io/CS-Notes/#/notes/数据库系统原理" target="_blank" rel="noopener">https://cyc2018.github.io/CS-Notes/#/notes/数据库系统原理</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;承接上文，如果在高并发下，会产生什么情况，ACID四大事务又会怎么？？？&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="并发" scheme="https://heshang.ink/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="丢失修改" scheme="https://heshang.ink/tags/%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9/"/>
    
      <category term="不可重复读" scheme="https://heshang.ink/tags/%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/"/>
    
      <category term="幻影读" scheme="https://heshang.ink/tags/%E5%B9%BB%E5%BD%B1%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>MySQL（一） 事务</title>
    <link href="https://heshang.ink/2019/07/18/MySQL%EF%BC%88%E4%B8%80%EF%BC%89-%E4%BA%8B%E5%8A%A1/"/>
    <id>https://heshang.ink/2019/07/18/MySQL（一）-事务/</id>
    <published>2019-07-18T01:48:26.000Z</published>
    <updated>2019-07-18T01:53:21.099Z</updated>
    
    <content type="html"><![CDATA[<p>什么是事务？事务的ACID是什么？？MySQL默认自动提交事务。</p><a id="more"></a><h2 id="一、概念："><a href="#一、概念：" class="headerlink" title="一、概念："></a>一、概念：</h2><p>事务指的是满足ACID特性的一组操作，可以通过Commit提交一个事务，也可以使用Rollback进行回滚。</p><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190715112728.png" alt=""></p><h2 id="二、ACID"><a href="#二、ACID" class="headerlink" title="二、ACID"></a>二、ACID</h2><h3 id="1-原子性（Atomicity）"><a href="#1-原子性（Atomicity）" class="headerlink" title="1. 原子性（Atomicity）"></a>1. 原子性（Atomicity）</h3><p>事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚</p><p>回滚可以用回滚日志实现，回滚日志记录事务执行的修改操作，在回滚时反向执行这些修改操作即可</p><h3 id="2-一致性（Consistency）"><a href="#2-一致性（Consistency）" class="headerlink" title="2. 一致性（Consistency）"></a>2. 一致性（Consistency）</h3><p>数据库在事务执行前后都保存一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的</p><h3 id="3-隔离性（Isolation）"><a href="#3-隔离性（Isolation）" class="headerlink" title="3. 隔离性（Isolation）"></a>3. 隔离性（Isolation）</h3><p>一个事务所做的修改在最终提交之前，对其他事务是不可见的。</p><h3 id="4-持久性（Durability）"><a href="#4-持久性（Durability）" class="headerlink" title="4. 持久性（Durability）"></a>4. 持久性（Durability）</h3><p>一旦事务提交，做的修改将会永远保存到数据库中，即使系统发送崩溃，事务执行的结果也不能丢失。</p><p>使用重做日志来保证持久性</p><p>4个特性不是平级关系：</p><ul><li>只有满足一致性，事务的执行结果才是正确的</li><li>无并发下，事务串行执行，隔离性一定能够满足，此时只要能满足原子性，就一定能满足一致性</li><li>并发下，多个事务并行执行，满足原子性，隔离性，才能满足一致性</li><li>数据库满足持久化是为了应对数据库崩溃的情况</li></ul><p><img src="https://i.loli.net/2019/07/15/5d2c01602151666476.png" alt=""></p><h3 id="AUTOCOMMIT（自动提交）"><a href="#AUTOCOMMIT（自动提交）" class="headerlink" title="AUTOCOMMIT（自动提交）"></a>AUTOCOMMIT（自动提交）</h3><p>MYSQL默认自动提交方式，修改手动提交<code>START TRANSACTION</code>语句</p><p>参考资料：</p><ol><li><a href="https://www.runoob.com/mysql/mysql-transaction.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-transaction.html</a></li><li><a href="https://cyc2018.github.io/CS-Notes/#/notes/数据库系统原理" target="_blank" rel="noopener">https://cyc2018.github.io/CS-Notes/#/notes/数据库系统原理</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是事务？事务的ACID是什么？？MySQL默认自动提交事务。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://heshang.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="数据库事务" scheme="https://heshang.ink/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="原子性" scheme="https://heshang.ink/tags/%E5%8E%9F%E5%AD%90%E6%80%A7/"/>
    
      <category term="一致性" scheme="https://heshang.ink/tags/%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    
      <category term="隔离性" scheme="https://heshang.ink/tags/%E9%9A%94%E7%A6%BB%E6%80%A7/"/>
    
      <category term="持久性" scheme="https://heshang.ink/tags/%E6%8C%81%E4%B9%85%E6%80%A7/"/>
    
      <category term="ACID" scheme="https://heshang.ink/tags/ACID/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型JMM</title>
    <link href="https://heshang.ink/2019/06/27/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8BJMM/"/>
    <id>https://heshang.ink/2019/06/27/Java内存模型JMM/</id>
    <published>2019-06-27T13:26:44.000Z</published>
    <updated>2019-06-27T13:29:38.323Z</updated>
    
    <content type="html"><![CDATA[<p>Java内存模型  !=  JVM内存模型！！！！！！</p><a id="more"></a><h2 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h2><p>​        由于计算机的存储设备与处理器的运算能力之间有几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中没这样处理器就无需等待缓慢的内存读写了。<br>　　基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是引入了一个新的问题：缓存一致性（Cache Coherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而他们又共享同一主存，如下图所示：多个处理器运算任务都涉及同一块主存，需要一种协议可以保障数据的一致性，这类协议有MSI、MESI、MOSI及Dragon Protocol等。Java虚拟机内存模型中定义的内存访问操作与硬件的缓存访问操作是具有可比性的，后续将介绍Java内存模型。</p><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190626135017.png" alt=""></p><h2 id="二、Java内存模型（JMM）是什么"><a href="#二、Java内存模型（JMM）是什么" class="headerlink" title="二、Java内存模型（JMM）是什么"></a>二、Java内存模型（JMM）是什么</h2><p>Java内存模型简称JMM（Java Memory Model），是Java虚拟机所定义的一种抽象规范，用来屏蔽不同硬件和操作系统的内存访问差异，让java程序在各种平台下都能达到一致的内存访问效果。</p><p>Java内存模型本身是一种<code>抽象的概念，并不真实存在</code>，它描述的是一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）（不包括局部变量与方法参数）的访问方式。</p><p><img src="https://i.loli.net/2019/06/26/5d131d9989ead86701.png" alt=""></p><h3 id="2-1-主内存和工作内存"><a href="#2-1-主内存和工作内存" class="headerlink" title="2.1 主内存和工作内存"></a>2.1 主内存和工作内存</h3><p>注意：这里的主内存、工作内存与Java内存区域的Java堆、栈、方法区不是同一层次内存划分，这两者基本上没有关系，不要混淆。</p><ul><li>主内存（Main Memory）：共享、类信息、常量、静态变量。</li><li>本地内存（Working Memory）-工作内存：存主内存中数据的副本</li></ul><h3 id="2-2-内存间交互操作（八大指令）"><a href="#2-2-内存间交互操作（八大指令）" class="headerlink" title="2.2 内存间交互操作（八大指令）"></a>2.2 内存间交互操作（八大指令）</h3><table><thead><tr><th>指令</th><th>作用对象</th><th>作用</th></tr></thead><tbody><tr><td>lock(锁定)</td><td>主内存的变量</td><td>把一个变量标识为一个线程独占状态</td></tr><tr><td>unlock(解锁)</td><td>主内存的变量</td><td>把锁定的变量释放出来，释放出来的变量才能被其他线程使用</td></tr><tr><td>read(读取)</td><td>主内存的变量</td><td>把一个变量的值从主内存传输到线程的工作内存，后续被load使用</td></tr><tr><td>load(载入)</td><td>工作内存的变量</td><td>把read操作得到的值放入到工作内存的变量副本中<br>eg：read是货车，工作内存是仓库，load把货车里东西放进仓库</td></tr><tr><td>use(使用)</td><td>工作内存的变量</td><td>把变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时，将会执行这个操作</td></tr><tr><td>assign(赋值)</td><td>工作内存的变量</td><td>把use中执行引擎操作的结果赋值给工作内存的变量<br>eg：use好比站点进行快递员分配，站点说我把快递分给你了快递员A。快递员A接收到快递 assign开始派送。</td></tr><tr><td>store(存储)</td><td>工作内存的变量</td><td>把工作内存的变量传送到主内存中，以便后面的write操作</td></tr><tr><td>write(写入)</td><td>主内存的变量</td><td>把store操作中的变量值传送到主内存的变量中<br>eg：store和 write就好理解了，快递员A将快递送到你家门口（store），然后你得签收（write）</td></tr></tbody></table><p>这些行为具有原子性，在使用上相互依赖</p><ul><li>read-load从主内存复制变量到当前工作内存，</li><li>use-assign执行代码改变共享变量值</li><li>store-write用工作内存数据刷新主存相关内容，指令顺序不能变</li><li>上面操作指令顺序不能变，但是之间可以插入其他的指令，eg：read a，read b，load b， load a</li></ul><h3 id="2-3-指令规则"><a href="#2-3-指令规则" class="headerlink" title="2.3 指令规则"></a>2.3 指令规则</h3><ol><li>不允许read和load、store和write操作之一单独出现</li><li>不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。</li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作。</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，lock和unlock必须成对出现</li><li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</li><li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）。</li></ol><h3 id="2-4-long和double型变量的特殊规则"><a href="#2-4-long和double型变量的特殊规则" class="headerlink" title="2.4 long和double型变量的特殊规则"></a>2.4 long和double型变量的特殊规则</h3><p>long和double是64位的数据类型，如果没有被volatile修饰，每次操作划分为2次32位进行操作，原子性对于这个不起作用，如果多个线程操作这样的数据，会出现数据错误。</p><h2 id="三、JMM存在的必要性"><a href="#三、JMM存在的必要性" class="headerlink" title="三、JMM存在的必要性"></a>三、JMM存在的必要性</h2><p>由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存(有些地方称为栈空间)，用于存储线程私有的数据。</p><p>线程与主内存中的变量操作必须通过工作内存间接完成。主要过程是将变量从主内存拷贝到每个线程各自的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存。如果存在两个线程同时对一个主内存中的实例对象的变量进行操作就有可能诱发线程安全问题。</p><p>如下图，主内存中存在一个共享变量x，现在有A和B两条线程分别对该变量x=1进行操作，A/B线程各自的工作内存中存在共享变量副本x。假设现在A线程想要修改x的值为2，而B线程却想要读取x的值，那么B线程读取到的值是A线程更新后的值2还是更新前的值1呢？</p><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190626181051.png" alt=""></p><p>答案是，不确定。即B线程有可能读取到A线程更新前的值1，也有可能读取到A线程更新后的值2，这是因为工作内存是每个线程私有的数据区域，而线程A变量x时，首先是将变量从主内存拷贝到A线程的工作内存中，然后对变量进行操作，操作完成后再将变量x写回主内存，而对于B线程的也是类似的。这样就有可能造成主内存与工作内存间数据存在一致性问题。假如A线程修改完后正在将数据写回主内存，而B线程此时正在读取主内存，即将x=1拷贝到自己的工作内存中，这样B线程读取到的值就是x=1，但如果A线程已将x=2写回主内存后，B线程才开始读取的话，那么此时B线程读取到的就是x=2，但到底是哪种情况先发生呢？这是不确定的，这也就是所谓的线程安全问题。</p><p>为了解决类似上述的问题，JVM定义了一组规则，通过这组规则来决定一个线程对共享变量的写入何时对另一个线程可见，这组规则也称为Java内存模型（即JMM），JMM是围绕着程序执行的原子性、有序性、可见性展开的，下面我们看看这三个特性。</p><h2 id="四、Java内存模型的三大特征（原子性、可见性、有序性）"><a href="#四、Java内存模型的三大特征（原子性、可见性、有序性）" class="headerlink" title="四、Java内存模型的三大特征（原子性、可见性、有序性）"></a>四、Java内存模型的三大特征（原子性、可见性、有序性）</h2><h3 id="4-1-原子性（synchronized具有原子性）"><a href="#4-1-原子性（synchronized具有原子性）" class="headerlink" title="4.1 原子性（synchronized具有原子性）"></a>4.1 原子性（synchronized具有原子性）</h3><p>由Java内存模型来直接保证的原子性变量操作包括read、load、use、assign、store和write六个，大致可以认为基础数据类型的访问和读写是具备原子性的。如果应用场景需要一个更大范围的原子性保证，Java内存模型还提供了lock和unlock操作来满足这种需求，尽管虚拟机未把lock与unlock操作直接开放给用户使用，但是却提供了更高层次的字节码指令monitorenter和monitorexit来隐匿地使用这两个操作，这两个字节码指令反映到Java代码中就是同步块—synchronized关键字，因此在synchronized块之间的操作也具备原子性。</p><p>原子性指的是一个操作是不可中断的，即使是在多线程环境下，一个操作一旦开始就不会被其他线程影响。比如对于一个静态变量int x，两条线程同时对他赋值，线程A赋值为1，而线程B赋值为2，不管线程如何运行，最终x的值要么是1，要么是2，线程A和线程B间的操作是没有干扰的，这就是原子性操作，不可被中断的特点。</p><h3 id="4-2-可见性（volatile、synchronized、final）"><a href="#4-2-可见性（volatile、synchronized、final）" class="headerlink" title="4.2 可见性（volatile、synchronized、final）"></a>4.2 可见性（volatile、synchronized、final）</h3><p>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。</p><p>Java内存模型是通过在变量修改后将新值同步到主内存，无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此，可以说volatile保证了多线程操作时变量的可见性，而普通变量不能保证这一点。</p><p>除了volatile之外，Java还有两个关键字能实现可见性，即synchronized和final。同步块的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中(执行store write操作)”这条规则获得的，而final关键字的可见性是指：被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把”this”的引用传递出去（this引用逃逸是一件很危险的事情，其他线程有可能通过这个引用访问到“初始化了一半”的对象），那在其他线程中就能看见final字段的值。</p><p>工作内存与主内存同步延迟现象就造成了可见性问题。另外指令重排以及编译器优化也可能导致可见性问题。</p><h3 id="4-3-有序性（volatile、synchronized）"><a href="#4-3-有序性（volatile、synchronized）" class="headerlink" title="4.3 有序性（volatile、synchronized）"></a>4.3 有序性（volatile、synchronized）</h3><p>Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指“线程内表现为串行的语义”(Within-Thread As-If-Serial Semantics)，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。</p><p>换句话说有序性是指对于单线程环境下代码执行的最终结果和按顺序依次执行的结果一致。但对于多线程环境，则可能出现乱序现象。因为程序编译成机器码指令后可能会出现指令重排现象，重排后的指令与原指令的顺序未必一致。</p><p>可能有点不太容易理解，有序性就是，不管哪个线程来看，操作都是有序的</p><h2 id="五、指令重排序（volatile、synchronized、有序性有关）"><a href="#五、指令重排序（volatile、synchronized、有序性有关）" class="headerlink" title="五、指令重排序（volatile、synchronized、有序性有关）"></a>五、指令重排序（volatile、synchronized、有序性有关）</h2><h3 id="5-1-基本概念："><a href="#5-1-基本概念：" class="headerlink" title="5.1 基本概念："></a>5.1 基本概念：</h3><p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序（简单理解就是原本我们写的代码指令执行顺序应该是A→B→C，但是现在的CPU都是多核CPU，为了提高并行度，为了提高性能等，可能会出现指令顺序变为B→A→C等其他情况）。</p><p>当然CPU们也不是随便就去重排序，</p><h3 id="需要满足以下两个条件（遵循的规则）："><a href="#需要满足以下两个条件（遵循的规则）：" class="headerlink" title="需要满足以下两个条件（遵循的规则）："></a>需要满足以下两个条件（遵循的规则）：</h3><ul><li>在单线程环境下不能改变程序运行的结果；</li><li>存在数据依赖关系的不允许重排序</li></ul><h3 id="5-2-数据依赖性"><a href="#5-2-数据依赖性" class="headerlink" title="5.2 数据依赖性"></a>5.2 数据依赖性</h3><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190626184904.png" alt=""></p><p>重排序遵守数据依赖性，编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序。但是这里所说的数据依赖性仅针对单个处理器中执行的指令序列和单个线程中执行的操作，不同处理器之间和不同线程之间的数据依赖性不被编译器和处理器考虑。</p><h3 id="5-3-重排序分三类"><a href="#5-3-重排序分三类" class="headerlink" title="5.3 重排序分三类"></a>5.3 重排序分三类</h3><ul><li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读／写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。因为三级缓存的存在，导致内存与缓存的数据同步存在时间差。</li></ul><p>从 Java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190626185641.png" alt=""></p><h2 id="六、volatile关键字"><a href="#六、volatile关键字" class="headerlink" title="六、volatile关键字"></a>六、volatile关键字</h2><p>volatile是Java虚拟机提供的轻量级的同步机制。</p><p><strong>volatile关键字有如下两个作用：</strong></p><ul><li>保证被volatile修饰的共享变量对所有线程总是可见的，也就是当一个线程修改了一个被volatile修饰共享变量的值，新值总是可以被其他线程立即得知，这个线程会通知其他线程从新读取主内存的值</li><li><p>禁止指令重排序优化。</p></li><li><p>不具有原子性，i++等会出现线程安全问题</p></li></ul><h2 id="七、final"><a href="#七、final" class="headerlink" title="七、final"></a>七、final</h2><p>final在Java中是一个保留的关键字，可以声明成员变量、方法、类以及本地变量。 被final修饰的变量不能被修改，方法不能被重写，类不能被继承。</p><p>对于final，编译器和处理器要遵守两个重排序规则：写规则和读规则</p><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>JMM就是一组规则，解决在并发编程可能出现的线程安全问题，提供了内置解决方案（happen-before原则）及其外部可使用的同步手段（synchronized/volatile等），确保了程序在多线程并发执行中的原子性、可见性、有序性。</p><p>重排序是多核CPU等为了性能进行的优化操作，但会导致可见性等问题。为了解决这些问题，所以JMM需要制定一些规则，不让其随意重排序。</p><p>as-if-serial只保证单线程环境的不可随意重排序。</p><p>多线程下用，happens-before是JMM制定的最终目的，内存屏障则是实现happens-before的具体手段。</p><p>参考资料：</p><ol><li><a href="https://blog.csdn.net/j080624/article/details/85320108" target="_blank" rel="noopener">https://blog.csdn.net/j080624/article/details/85320108</a></li><li><a href="https://www.cnblogs.com/nexiyi/p/java_memory_model_and_thread.html" target="_blank" rel="noopener">https://www.cnblogs.com/nexiyi/p/java_memory_model_and_thread.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java内存模型  !=  JVM内存模型！！！！！！&lt;/p&gt;
    
    </summary>
    
      <category term="Java内存模型JMM" scheme="https://heshang.ink/categories/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8BJMM/"/>
    
    
      <category term="线程" scheme="https://heshang.ink/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Java内存模型" scheme="https://heshang.ink/tags/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="JMM" scheme="https://heshang.ink/tags/JMM/"/>
    
      <category term="volatile" scheme="https://heshang.ink/tags/volatile/"/>
    
  </entry>
  
  <entry>
    <title>（转）PicGo+GitHub图床+微博图床</title>
    <link href="https://heshang.ink/2019/05/27/%EF%BC%88%E8%BD%AC%EF%BC%89PicGo-GitHub%E5%9B%BE%E5%BA%8A-%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/"/>
    <id>https://heshang.ink/2019/05/27/（转）PicGo-GitHub图床-微博图床/</id>
    <published>2019-05-27T03:16:18.000Z</published>
    <updated>2019-05-27T04:44:46.335Z</updated>
    
    <content type="html"><![CDATA[<p>PicGo图床上传工具，配置GitHub图床、微博图床（在csdn和博客上不显示出来，被吞了）</p><p><a href="https://blog.csdn.net/baidu_41601299/article/details/90063077" target="_blank" rel="noopener">原链接</a></p><a id="more"></a><h2 id="PicGo介绍"><a href="#PicGo介绍" class="headerlink" title="PicGo介绍"></a>PicGo介绍</h2><p>这是一款图片上传的工具，目前支持微博图床，七牛图床，腾讯云，又拍云，GitHub等图床，未来将支持更多图床。</p><p>所以解决问题的思路就是，将本地的文件，或者剪切板上面的截图发送图床，然后生成在线图片的链接，走到哪就可以用到哪😊。</p><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190527112234.png?token=AJOTJVWTC3UPRDXFFXPAV3245NMDS" alt=""></p><h3 id="一、GitHub图床："><a href="#一、GitHub图床：" class="headerlink" title="一、GitHub图床："></a>一、GitHub图床：</h3><h5 id="1-创建GitHub图床之前，需要注册-登陆GitHub账号"><a href="#1-创建GitHub图床之前，需要注册-登陆GitHub账号" class="headerlink" title="1. 创建GitHub图床之前，需要注册/登陆GitHub账号"></a>1. 创建GitHub图床之前，需要注册/登陆GitHub账号</h5><p>申请GitHub账号很简单，我就不演示了</p><h5 id="2-创建Repository"><a href="#2-创建Repository" class="headerlink" title="2. 创建Repository"></a>2. 创建Repository</h5><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190527113405.png?token=AJOTJVXOEXCCNYZF3IW7WCC45NNPK" alt=""></p><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190527113517.png?token=AJOTJVSDDXLFPDWF23YNIO245NNTK" alt=""></p><h5 id="3-生成一个Token用于操作GitHub-repository"><a href="#3-生成一个Token用于操作GitHub-repository" class="headerlink" title="3.生成一个Token用于操作GitHub repository"></a>3.生成一个Token用于操作GitHub repository</h5><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190527113631.png?token=AJOTJVWLF6X5T4B6GKRZIBC45NNX6" alt=""></p><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190527113724.png?token=AJOTJVUNYEKBU6DGJ6XBXL245NN4A" alt=""></p><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190527113945.png?token=AJOTJVSYYIFWYWHRRL2Q3B245NOEC" alt=""></p><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190527114018.png?token=AJOTJVRZMN65CYLYACLU3T245NOGG" alt=""></p><p>注：创建成功后，会生成一串token，这串token之后不会再显示，所以第一次看到的时候，就要好好保存</p><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><h5 id="1-下载运行PicGo"><a href="#1-下载运行PicGo" class="headerlink" title="1. 下载运行PicGo"></a>1. 下载运行PicGo</h5><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">下载</a></p><h5 id="2-配置图床"><a href="#2-配置图床" class="headerlink" title="2. 配置图床"></a>2. 配置图床</h5><p><img src="https://raw.githubusercontent.com/heshangcode/Figurebed/master/img/20190527114239.png?token=AJOTJVUOE7GTBLGDBT2VMMK45NOO6" alt=""></p><p>。设定仓库名的时候，是按照“账户名/仓库名的格式填写”<br>。分支名统一填写“master”<br>。将之前的Token黏贴在这里<br>。存储的路径可以按照我这样子写，就会在repository下创建一个“img”文件夹</p><p>。自定义域名的作用是，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接，放到剪切板上<a href="https://raw.githubusercontent.com/用户名/RepositoryName/分支名，，自定义域名需要按照这样去填写" target="_blank" rel="noopener">https://raw.githubusercontent.com/用户名/RepositoryName/分支名，，自定义域名需要按照这样去填写</a></p><h3 id="二、微博图床"><a href="#二、微博图床" class="headerlink" title="二、微博图床"></a>二、微博图床</h3><p>上传的图片不会出现在你的微博相册里。可以选择链接的图片质量，这样在复制到剪贴板里的图片将会对应修改成对应的链接地址。设置你的微博图床可以选择两种模式：</p><p>只需填写你的微博用户名密码即可。缺点：上传速度会慢（尤其windows平台），因为要经过很多层验证。并且如果出现需要验证码的情况无法解决。</p><p>只需Cookie上传（PicGo v1.3.2及以上版本支持）。切换成cookie模式。然后先登录微博（必须先登录），之后打开minipublish（minipublish链接地址）页面，如果你是mac用户，使用command+alt+i，如果你是windows用户，使用F12打开控制台，选择Network标签栏。然后刷新一下页面，找到Network里的minipublish一项，再找到minipublish右侧的Cookie一项，把Cookie冒号后的值全部复制（不要把Cookie:这个也复制了）然后填入PicGo里的Cookie一栏。这样就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PicGo图床上传工具，配置GitHub图床、微博图床（在csdn和博客上不显示出来，被吞了）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/baidu_41601299/article/details/90063077&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://heshang.ink/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="图床" scheme="https://heshang.ink/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="PicGo" scheme="https://heshang.ink/tags/PicGo/"/>
    
  </entry>
  
  <entry>
    <title>JVM（一）JVM构成及简单入门</title>
    <link href="https://heshang.ink/2019/04/12/JVM%EF%BC%88%E4%B8%80%EF%BC%89JVM%E6%9E%84%E6%88%90%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    <id>https://heshang.ink/2019/04/12/JVM（一）JVM构成及简单入门/</id>
    <published>2019-04-12T11:07:41.000Z</published>
    <updated>2019-05-26T12:07:01.973Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要使用JVM、JVM构成（方法区、堆内存、线程独有的（线程栈、本地方法栈、PC计数器））</p><a id="more"></a><h2 id="从HelloWord角度理解JVM"><a href="#从HelloWord角度理解JVM" class="headerlink" title="从HelloWord角度理解JVM"></a>从HelloWord角度理解JVM</h2><h3 id="1-为什么要使用虚拟机-JVM"><a href="#1-为什么要使用虚拟机-JVM" class="headerlink" title="1.为什么要使用虚拟机(JVM)"></a>1.为什么要使用虚拟机(JVM)</h3><p>虚拟除了一台拥有和真实计算机相同能力的机器，只不过他里面的任何硬件都是虚拟出来的，通过虚拟机来保证了真实机器的安全，JVM同时也是java跨平台运行的基础。</p><h3 id="2-JVM构成"><a href="#2-JVM构成" class="headerlink" title="2.JVM构成"></a>2.JVM构成</h3><p><img src="assets\c31cbfc9ly1fuctukx2o3j20hz0a7aa6.jpg" alt=""></p><ol><li>方法区里会有常量池</li><li>堆内存：多线程共享，会发生并发</li><li>另外一块是线程私有的，不会发生并发<ul><li>线程栈：方法压栈到这里面执行,先进后出</li><li>PC计数器：记录程序指令执行到哪</li><li>本地方法栈：JNI，把c和c++的函数压到本地栈里执行</li><li>还有栈上分配对象(未画出):开辟一个空间，线程首先在这个空间里运行，如果不能满足，再去堆内存运行，避免在堆内存中多线程并发问题</li></ul></li></ol><h3 id="3-字节码在类加载器的过程"><a href="#3-字节码在类加载器的过程" class="headerlink" title="3.字节码在类加载器的过程"></a>3.字节码在类加载器的过程</h3><p><img src="assets/5ce9fc592eab359799.jpg" alt=""></p><ol><li>加载</li><li>验证：<ul><li>class文件的版本能不能兼容当前JVM版本，eg:jdk1.9的文件到jdk1.7的运行</li><li>class文件是否满足jvm规范(class的第一个字节码文件为’魔数’值)为十六进制的代码</li></ul></li><li>准备：把<code>类成员</code>初始化为初始值。final的类变量除外，final变量直接初始化为变量值</li><li>解析：<ul><li>把符号引用解析为直接引用</li><li>符号引用：就是我们写的xx变量 xxx对象的引用 如Integer xxx = new Integer();</li><li>解析就是要把类似于xxx，xx这种符号引用变为直接引用即内存地址</li></ul></li><li>初始化：把我们定义的static变量或者static静态代码块按顺序组织成&lt;clinit&gt;构造器(也称作类构造器)来初始化变量</li><li>最后到方法区，所有关于类的信息全部保存在方法区。通过常量池来保存，生成了一个代表所有类信息的对象classInstance</li></ol><h3 id="4-分析Hello-Word在jvm中执行过程"><a href="#4-分析Hello-Word在jvm中执行过程" class="headerlink" title="4.分析Hello Word在jvm中执行过程"></a>4.分析Hello Word在jvm中执行过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello word"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>main方法压栈到堆栈里，执行他</li><li>调用他，里面的System类又加载到方法区里，这个类里一个out的静态变量，然后调用了println方法(这个也是在方法区里)</li></ol><h3 id="5-反编译分析hello-Word字节码"><a href="#5-反编译分析hello-Word字节码" class="headerlink" title="5.反编译分析hello Word字节码"></a>5.反编译分析hello Word字节码</h3><p>cmd指令 javap -c xxx</p><p>将指定字节码反编译为字节码指令输出</p><p><img src="assets/5ce9fc576883680330.jpg" alt=""></p><p>分析下面的指令：</p><ol><li>0：getstatic    #2    字面意思，获取静态，就是在方法区从System这个类中取2号位常量池Field中的out对象的引用压栈到堆栈中</li><li>3：ldc         #3      把3号位String的引用压栈到堆栈中</li><li>5：invokevirtual        #4        激活out对象里的println方法</li><li>8：return     程序结束完毕</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么要使用JVM、JVM构成（方法区、堆内存、线程独有的（线程栈、本地方法栈、PC计数器））&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://heshang.ink/categories/JVM/"/>
    
    
      <category term="为什么要使用JVM" scheme="https://heshang.ink/tags/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8JVM/"/>
    
      <category term="JVM构成" scheme="https://heshang.ink/tags/JVM%E6%9E%84%E6%88%90/"/>
    
      <category term="类加载器" scheme="https://heshang.ink/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
      <category term="方法区" scheme="https://heshang.ink/tags/%E6%96%B9%E6%B3%95%E5%8C%BA/"/>
    
      <category term="堆内存" scheme="https://heshang.ink/tags/%E5%A0%86%E5%86%85%E5%AD%98/"/>
    
      <category term="线程栈（堆栈）" scheme="https://heshang.ink/tags/%E7%BA%BF%E7%A8%8B%E6%A0%88%EF%BC%88%E5%A0%86%E6%A0%88%EF%BC%89/"/>
    
      <category term="本地方法栈" scheme="https://heshang.ink/tags/%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/"/>
    
      <category term="PC计数器" scheme="https://heshang.ink/tags/PC%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>出租车项目技术总结</title>
    <link href="https://heshang.ink/2019/03/16/%E5%87%BA%E7%A7%9F%E8%BD%A6%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>https://heshang.ink/2019/03/16/出租车项目技术总结/</id>
    <published>2019-03-16T04:01:14.000Z</published>
    <updated>2019-05-27T02:38:48.915Z</updated>
    
    <content type="html"><![CDATA[<p>2018.10-2019.1</p><p>项目描述：出租车公司的管理系统，实现车辆档案管理、车辆收费、公司报表、设备和 sim 出入库报废、字典设 置、权限管理，打印等 </p><p>技术：Spring+SpringMvc+MyBatis+MySQL+shiro+Bootstrap3+HTML5+CSS3+JQueryAjax</p><a id="more"></a><p>[TOC]</p><h5 id="1-不同公司的人只能看见它公司的相关信息或者子公司的相关信息，进行一个数据过滤"><a href="#1-不同公司的人只能看见它公司的相关信息或者子公司的相关信息，进行一个数据过滤" class="headerlink" title="1.不同公司的人只能看见它公司的相关信息或者子公司的相关信息，进行一个数据过滤"></a>1.不同公司的人只能看见它公司的相关信息或者子公司的相关信息，进行一个数据过滤</h5><p>解决办法：数据库设计过滤</p><ul><li>给公司字段加入是几级公司，公司名/公司编码（或其他唯一的）</li><li>给人的字段加入所在公司的层次级别和公司名</li><li>给这个公司的相关产品加上公司名和级别字段</li></ul><p>案例：</p><p>​    公司表：</p><p><img src="https://i.loli.net/2019/05/27/5ceb4d766368f10186.jpg" alt=""></p><p>​    公司员工表：</p><p><img src="https://i.loli.net/2019/05/27/5ceb4d75379fc62564.jpg" alt=""></p><p>​    公司的车辆表：</p><p><img src="https://i.loli.net/2019/05/27/5ceb4d7247cdc86628.jpg" alt=""></p><p>分析：</p><ul><li>本过滤用于，多少级公司具体知道</li><li>管理员给员工账号分配公司，员工三个字段就出来了</li><li>员工登录系统，查看车辆，从session里取出登录人所在公司级别和公司编码，如果为1级公司，就是level1=公司编码，2级公司就是level2=公司编码….</li><li>添加车辆时，取登录人所在公司级别和公司编码，然后作为数据放进各个表里，如果他不是总公司，就得把他的父公司编码填进相应的字段。</li></ul><h5 id="2-根据访问ip获取所在地方的信息-百度API"><a href="#2-根据访问ip获取所在地方的信息-百度API" class="headerlink" title="2.根据访问ip获取所在地方的信息(百度API)"></a>2.根据访问ip获取所在地方的信息(百度API)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url : <span class="string">'http://api.map.baidu.com/location/ip?ak=ia6HfFL660Bvh43exmH9LrI6'</span>,</span><br><span class="line">type : <span class="string">'GET'</span>,</span><br><span class="line">dataType : <span class="string">'jsonp'</span>,</span><br><span class="line"><span class="keyword">async</span> : <span class="literal">false</span>,</span><br><span class="line">success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出====：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"address"</span>: <span class="string">"CN|吉林|长春|None|UNICOM|0|0"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"address_detail"</span>: &#123;</span><br><span class="line">            <span class="attr">"province"</span>: <span class="string">"吉林省"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"长春市"</span>,</span><br><span class="line">            <span class="attr">"district"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"street"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"street_number"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"city_code"</span>: xx</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"吉林省长春市"</span>,</span><br><span class="line">        <span class="attr">"point"</span>: &#123;</span><br><span class="line">            <span class="attr">"y"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">            <span class="attr">"x"</span>: <span class="string">"xx"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-动态拼接HTML"><a href="#3-动态拼接HTML" class="headerlink" title="3.动态拼接HTML"></a>3.动态拼接HTML</h5><p>有些数据需要从数据库里动态导出来，这里就需要用到动态拼接表单元素，可能会用到append()函数等，很多时候关于元素的定位，找他上一个节点或者下一个节点，需要用到next()、parents()、children()等函数来获取数据</p><h5 id="4-页面上出现快速查询功能（jQuery-UI的autocomplete）"><a href="#4-页面上出现快速查询功能（jQuery-UI的autocomplete）" class="headerlink" title="4.页面上出现快速查询功能（jQuery UI的autocomplete）"></a>4.页面上出现快速查询功能（jQuery UI的autocomplete）</h5><p><em>允许用户在键入时快速查找和选择预先填充的值列表，利用搜索和过滤。</em></p><p><a href="http://www.runoob.com/jqueryui/example-autocomplete.html" target="_blank" rel="noopener">jQuery UI 实例 – 自动完成（Autocomplete） | 菜鸟教程</a> </p><p><a href="http://jqueryui.com/autocomplete/" target="_blank" rel="noopener">自动完成| jQuery UI</a></p><p><img src="https://i.loli.net/2019/05/27/5ceb4d72e570e64983.gif" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery UI 自动完成（Autocomplete） - 默认功能<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-1.9.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/ui/1.10.4/jquery-ui.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://jqueryui.com/resources/demos/style.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> availableTags = [</span></span><br><span class="line"><span class="javascript">      <span class="string">"ActionScript"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"AppleScript"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Asp"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"BASIC"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"C"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"C++"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Clojure"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"COBOL"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"ColdFusion"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Erlang"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Fortran"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Groovy"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Haskell"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Java"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"JavaScript"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Lisp"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Perl"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"PHP"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Python"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Ruby"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Scala"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"Scheme"</span></span></span><br><span class="line"><span class="undefined">    ];</span></span><br><span class="line"><span class="javascript">    $( <span class="string">"#tags"</span> ).autocomplete(&#123;</span></span><br><span class="line"><span class="xml">      source: availableTags   <span class="comment">&lt;!--availableTags数据源，也可以从后台传回来一个list集合的json数据--&gt;</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui-widget"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"tags"</span>&gt;</span>标签：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tags"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-前端页面打印"><a href="#5-前端页面打印" class="headerlink" title="5.前端页面打印"></a>5.前端页面打印</h5><h6 id="1-利用print函数"><a href="#1-利用print函数" class="headerlink" title="1.利用print函数"></a>1.利用print函数</h6><p><a href="https://www.cnblogs.com/java-spring/p/7791800.html" target="_blank" rel="noopener">利用前端实现打印功能</a></p><h6 id="2-利用前端打印控件lodop"><a href="#2-利用前端打印控件lodop" class="headerlink" title="2.利用前端打印控件lodop"></a>2.利用前端打印控件lodop</h6><p><a href="https://blog.csdn.net/m0_37942145/article/details/72780965" target="_blank" rel="noopener">前端打印控件lodop的相关使用问题和相关的知识领域</a></p><p><a href="http://www.lodop.net/" target="_blank" rel="noopener">lodop官网</a></p><h5 id="6-虚拟路径（解决图片不保存在tomcat下，硬盘其他地方，重启tomcat，图片文件还在）"><a href="#6-虚拟路径（解决图片不保存在tomcat下，硬盘其他地方，重启tomcat，图片文件还在）" class="headerlink" title="6.虚拟路径（解决图片不保存在tomcat下，硬盘其他地方，重启tomcat，图片文件还在）"></a>6.虚拟路径（解决图片不保存在tomcat下，硬盘其他地方，重启tomcat，图片文件还在）</h5><p>1.修改tomcat下的server.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span> <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--docBase:真实路径，path：虚拟路径（文件访问直接/photo），reloadable指有文件更新时，是否重新加载   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">docBase</span>=<span class="string">"D:\upphoto\"</span> <span class="attr">path</span>=<span class="string">"/photo"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/m0_37942145/article/details/72780965" target="_blank" rel="noopener">tomcat配置虚拟路径保存、访问图片 - 小哥z - 博客园</a></p></blockquote><h5 id="7-实现excel导入导出功能"><a href="#7-实现excel导入导出功能" class="headerlink" title="7.实现excel导入导出功能"></a>7.实现excel导入导出功能</h5><h5 id="8-在后台给加入一个button，按钮在前台显示出来"><a href="#8-在后台给加入一个button，按钮在前台显示出来" class="headerlink" title="8.在后台给加入一个button，按钮在前台显示出来"></a>8.在后台给加入一个button，按钮在前台显示出来</h5><p>给数据库加个字段，然后再后台继续拼接html元素存入数据库，但是需要单双引号的问题</p><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String buttonStr = "<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'but'</span> <span class="attr">id</span>=<span class="string">'xx'</span>&gt;</span>"+某个值或者什么的+"<span class="tag">&lt;/<span class="name">button</span>&gt;</span>"</span><br></pre></td></tr></table></figure><h5 id="9-bootstrap的标签页-选项卡"><a href="#9-bootstrap的标签页-选项卡" class="headerlink" title="9.bootstrap的标签页(选项卡)"></a>9.bootstrap的标签页(选项卡)</h5><p><img src="https://i.loli.net/2019/05/27/5ceb4d745f59344098.gif" alt=""></p><p><a href="http://www.runoob.com/bootstrap/bootstrap-tab-plugin.html" target="_blank" rel="noopener">选项卡demo</a></p><h5 id="10-bootstrap的时间控件-datetimepicker"><a href="#10-bootstrap的时间控件-datetimepicker" class="headerlink" title="10.bootstrap的时间控件(datetimepicker)"></a>10.bootstrap的时间控件(datetimepicker)</h5><p><img src="https://i.loli.net/2019/05/27/5ceb4d739014922053.gif" alt=""></p><p><a href="http://www.bootcss.com/p/bootstrap-datetimepicker/" target="_blank" rel="noopener">DateTime Picker · Bootstrap</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=<span class="string">"crecordtime"</span>&gt;</span><br><span class="line">$(<span class="string">'#crecordtime'</span>).datetimepicker(&#123;</span><br><span class="line">format : <span class="string">'yyyy-mm-dd'</span>, <span class="comment">//时间格式</span></span><br><span class="line">todayBtn : <span class="literal">true</span>,<span class="comment">//today按钮显示</span></span><br><span class="line">language : <span class="string">'zh-CN'</span>,<span class="comment">//语言设置中文</span></span><br><span class="line">autoclose : <span class="literal">true</span>, <span class="comment">// 选中时间后自动关闭</span></span><br><span class="line">todayHighlight : <span class="literal">true</span>, <span class="comment">// 当天时间高亮</span></span><br><span class="line">minView : <span class="number">2</span>,<span class="comment">//日期时间选择器所能够提供的最精确的时间选择视图。</span></span><br><span class="line">maxView : <span class="number">1</span>,<span class="comment">//最大视图</span></span><br><span class="line">startView : <span class="number">1</span><span class="comment">//点击插件一出来的日期选择视图</span></span><br><span class="line">    <span class="comment">//forceParse</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="11-多图片上传（并且把图片选择了图片显示出来）"><a href="#11-多图片上传（并且把图片选择了图片显示出来）" class="headerlink" title="11.多图片上传（并且把图片选择了图片显示出来）"></a>11.多图片上传（并且把图片选择了图片显示出来）</h5><p>前台代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane fade"</span> <span class="attr">id</span>=<span class="string">"picture"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span>车辆图片上传<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"inpform"</span> <span class="attr">id</span>=<span class="string">"uploadForm"</span> <span class="attr">method</span>=<span class="string">"post"</span></span></span><br><span class="line"><span class="tag"><span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">multipart</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"detail-img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"carfile"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">name</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag"><span class="attr">onchange</span>=<span class="string">"xmTanUploadImg(this)"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"img-follow2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"msg"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"panel-footer text-right bg-light lter"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"margin-top:102px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"upload"</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-s-xs"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示选择的图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xmTanUploadImg</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="comment">/* alert("asdasdasd"); */</span></span><br><span class="line"><span class="keyword">var</span> fileInput = <span class="string">"&lt;input type=’file' multiple='multiple' name='file' onchange='xmTanUploadImg(this)'/&gt;"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(fileInput);</span><br><span class="line"><span class="comment">/* $("#uploadForm").append(fileInput); */</span></span><br><span class="line">$(<span class="string">'#detail-img'</span>).append(<span class="string">'&lt;input type="file" multiple="multiple" name="file" onchange="xmTanUploadImg(this)" class="detail-img"/&gt;'</span>);</span><br><span class="line"><span class="keyword">var</span> fl = obj.files.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fl; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> file = obj.files[i];</span><br><span class="line"><span class="comment">//FileReader用来把文件读入内存，并且读取文件中的数据。</span></span><br><span class="line"><span class="comment">// FileReader接口提供了一个异步API，使用该API可以在浏览器主线程中异步访问文件系统，读取文件中的数据。</span></span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line"><span class="comment">//读取文件过程方法</span></span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="comment">//不太明白e.target.result代表什么（一大串数字）好像是图片转化为base64</span></span><br><span class="line"><span class="keyword">var</span> imgstr = <span class="string">'&lt;img  style="width:200px;height:200px;" src="'</span> + e.target.result + <span class="string">'"/&gt;'</span>;</span><br><span class="line">$(<span class="string">"#img-follow2"</span>).append(<span class="string">"&lt;div class=\"img\" style='display:inline-block;margin:20px 0px 20px 20px;'&gt;"</span></span><br><span class="line">                                            + <span class="string">"&lt;div class=\"img-bg\"&gt;"</span></span><br><span class="line">+ <span class="string">""</span></span><br><span class="line">+ imgstr</span><br><span class="line">+ <span class="string">""</span></span><br><span class="line">+ <span class="string">"&lt;/div&gt;&lt;button type=\"button\" onclick=\"delbtn(this)\" &gt;删除&lt;/button&gt;"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//读取文件内容，结果用data:url的字符串形式表示</span></span><br><span class="line">reader.readAsDataURL(file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把图片展示出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showpic</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> file = obj.files[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//FileReader用来把文件读入内存，并且读取文件中的数据。</span></span><br><span class="line"><span class="comment">// FileReader接口提供了一个异步API，使用该API可以在浏览器主线程中异步访问文件系统，读取文件中的数据。</span></span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line"><span class="comment">//读取文件过程方法</span></span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="comment">//不太明白e.target.result代表什么（一大串数字）好像是图片转化为base64</span></span><br><span class="line"><span class="keyword">var</span> imgstr = <span class="string">'&lt;img  style="width:200px;height:200px;" src="'</span> + e.target.result + <span class="string">'"/&gt;'</span>;</span><br><span class="line">$(<span class="string">"div"</span>).remove(<span class="string">".img"</span>);</span><br><span class="line">$(<span class="string">"#img-follow"</span>).append(<span class="string">"&lt;div class=\"img\"&gt;"</span> + <span class="string">"&lt;div class=\"img-bg\"&gt;"</span> + <span class="string">""</span></span><br><span class="line">+ imgstr + <span class="string">""</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//读取文件内容，结果用data:url的字符串形式表示</span></span><br><span class="line">reader.readAsDataURL(file);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delbtn</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> index = $(obj).parents(<span class="string">".img"</span>).index();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第几个："</span>+index);</span><br><span class="line">$(<span class="string">"#detail-img input[type=file]"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">i,j</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index == i) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"删除的是第几个"</span>+i);</span><br><span class="line"><span class="keyword">this</span>.remove();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _this = $(obj);</span><br><span class="line">_this.parents(<span class="string">".img"</span>).remove();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//点击上传</span></span><br><span class="line">$(<span class="string">"#upload"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData($(<span class="string">"#uploadForm"</span>)[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//formData.append("cplateid", $("#cplateid").val()); //如果这里还有其他的数据之类的话</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type : <span class="string">"post"</span>,</span><br><span class="line">url : rootPath + <span class="string">'/car/upload.shtml'</span>,</span><br><span class="line">data : formData,</span><br><span class="line"><span class="keyword">async</span> : <span class="literal">false</span>,</span><br><span class="line">contentType : <span class="literal">false</span>,<span class="comment">// jQuery不要去设置Content-Type请求头</span></span><br><span class="line">processData : <span class="literal">false</span>,<span class="comment">// jQuery不要去处理发送的数据</span></span><br><span class="line">dataType : <span class="string">"json"</span>,</span><br><span class="line">success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="string">"success"</span>) &#123;</span><br><span class="line">layer.msg(<span class="string">'上传成功!'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">layer.msg(<span class="string">'添加失败！'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后台代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="comment">// 凡需要处理业务逻辑的.都需要记录操作日志</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>, required = <span class="keyword">false</span>)</span> MultipartFile[] file,HttpServletRequest request)</span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义路径</span></span><br><span class="line">String path = <span class="string">"D:/upphoto/carimg"</span>;</span><br><span class="line"><span class="comment">// 4.建立联系</span></span><br><span class="line">File folder = <span class="keyword">new</span> File(path);</span><br><span class="line"><span class="comment">// 5.判断该文件是否存在，不存在则创建文件夹</span></span><br><span class="line"><span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">folder.mkdirs(); <span class="comment">// 创建文件夹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"文件数量大小+++++"</span> + file.length);</span><br><span class="line"></span><br><span class="line">String newFileName = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (MultipartFile mf : file) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mf.isEmpty()) &#123;</span><br><span class="line"><span class="comment">// 6,获取上传文件的后缀名称</span></span><br><span class="line">String contentType = mf.getContentType();</span><br><span class="line">String ext = contentType.substring(contentType.indexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 7.创建新的文件名称</span></span><br><span class="line"><span class="comment">// String newFileName = UUID.randomUUID().toString() + "." + ext;</span></span><br><span class="line"><span class="comment">// 或者用时间戳创建名称</span></span><br><span class="line">newFileName = <span class="keyword">new</span> Date().getTime() + <span class="string">"_"</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">100000</span>) + <span class="string">"."</span> + ext;</span><br><span class="line"><span class="comment">// 8.文件上传，File.separator为斜线</span></span><br><span class="line">String newPath = path + <span class="string">"/"</span> + newFileName;</span><br><span class="line">mf.transferTo(<span class="keyword">new</span> File(newPath));</span><br><span class="line">System.out.println(<span class="string">"最终路径+++++++"</span> + newPath);</span><br><span class="line"><span class="comment">//之后可以进行存入数据库等操作</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较好的demo</p><p>1.<a href="https://github.com/gaoyuyue/MyUploader" target="_blank" rel="noopener">https://github.com/gaoyuyue/MyUploader</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018.10-2019.1&lt;/p&gt;
&lt;p&gt;项目描述：出租车公司的管理系统，实现车辆档案管理、车辆收费、公司报表、设备和 sim 出入库报废、字典设 置、权限管理，打印等 &lt;/p&gt;
&lt;p&gt;技术：Spring+SpringMvc+MyBatis+MySQL+shiro+Bootstrap3+HTML5+CSS3+JQueryAjax&lt;/p&gt;
    
    </summary>
    
      <category term="项目总结" scheme="https://heshang.ink/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="SSM实战" scheme="https://heshang.ink/tags/SSM%E5%AE%9E%E6%88%98/"/>
    
      <category term="虚拟路径" scheme="https://heshang.ink/tags/%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84/"/>
    
      <category term="图片文件上传" scheme="https://heshang.ink/tags/%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>win10重装恢复手册</title>
    <link href="https://heshang.ink/2018/10/23/win10%E9%87%8D%E8%A3%85%E6%81%A2%E5%A4%8D%E6%89%8B%E5%86%8C/"/>
    <id>https://heshang.ink/2018/10/23/win10重装恢复手册/</id>
    <published>2018-10-23T15:03:47.000Z</published>
    <updated>2019-05-27T02:40:03.805Z</updated>
    
    <content type="html"><![CDATA[<p>每一次重装系统之后，就要把各种软件重新装一遍，然后自己的软件还多，不知道到底有哪些，所以就有了这个文章，一直持续更新中</p><a id="more"></a><p>首先还是献上自己的桌面布局</p><p><img src="https://i.loli.net/2019/05/27/5ceb4e040286443951.jpg" alt=""></p><h3 id="一、环境："><a href="#一、环境：" class="headerlink" title="一、环境："></a>一、环境：</h3><ul><li>java的环境</li><li>mysql</li><li>maven的配置</li><li>tomcat</li><li>博客用的node.js</li><li>git</li><li>我的博客恢复</li></ul><h3 id="二、软件工具"><a href="#二、软件工具" class="headerlink" title="二、软件工具"></a>二、软件工具</h3><ul><li>idea：java开发工具、idea的各种配置</li><li>eclipse：java开发工具</li><li>Navicat Premium：管理各种数据库</li><li>notepad++：神器般的打开各种文件</li><li>everything：快速的搜索各种软件</li><li>sublime text3：可以用来写各种HTML啊</li><li>Snipaste：一个非常牛逼的截图和贴图软件</li><li>Office：办公全套  <a href="https://account.microsoft.com/services/" target="_blank" rel="noopener">https://account.microsoft.com/services/</a></li><li>OneNote：用来做笔记的</li><li>bandizip：压缩软件</li><li>VM：虚拟机</li><li>Visio：可以来换流程图，UMl图，各种图</li><li>谷歌浏览器、360极速浏览器</li><li>SupportAssist：戴尔官方的清理软件 <a href="https://www.dell.com/support/contents/cn/zh/cnbsd1/article/product-support/self-support-knowledgebase/software-and-downloads/supportassist" target="_blank" rel="noopener">https://www.dell.com/support/contents/cn/zh/cnbsd1/article/product-support/self-support-knowledgebase/software-and-downloads/supportassist</a></li><li>Xmind 8 和Xmind Zen：画思维导图</li><li>LICEcap：录制电脑的gif</li><li>PicGo：保存图片到各大图床</li><li>Typora：一个强大的markdown编辑器</li><li><p>百度云下载工具：</p><ul><li>速盘</li><li>pandownload</li><li>爱奇艺万能播放器</li></ul></li><li><p>翻墙：</p><ul><li>蓝灯 Lantern</li><li>赛风 psiphon3</li></ul></li><li><p>MaxxAudioPro：电脑调各种音效的软件 <a href="http://del.ly/6528DC6l4" target="_blank" rel="noopener">http://del.ly/6528DC6l4</a></p></li><li>Sticky Notes：win10自带的小便签</li><li>搜狗输入法</li><li>微信、QQ、TIM</li><li>EV录屏</li></ul><h3 id="三、各种设置"><a href="#三、各种设置" class="headerlink" title="三、各种设置"></a>三、各种设置</h3><ul><li>关闭了打开一个软件的提示框 <a href="https://jingyan.baidu.com/article/a681b0de5abddc3b18434681.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a681b0de5abddc3b18434681.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一次重装系统之后，就要把各种软件重新装一遍，然后自己的软件还多，不知道到底有哪些，所以就有了这个文章，一直持续更新中&lt;/p&gt;
    
    </summary>
    
      <category term="工具软件" scheme="https://heshang.ink/categories/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="系统重装恢复" scheme="https://heshang.ink/tags/%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>maven项目找不到resources下的资源文件</title>
    <link href="https://heshang.ink/2018/09/14/maven%E9%A1%B9%E7%9B%AE%E6%89%BE%E4%B8%8D%E5%88%B0resources%E4%B8%8B%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <id>https://heshang.ink/2018/09/14/maven项目找不到resources下的资源文件/</id>
    <published>2018-09-14T09:05:52.000Z</published>
    <updated>2018-09-14T09:55:44.003Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写SSM整合，测试的时候，发现resources下的SpringMvc.xml没有扫描到。</p><a id="more"></a><p>首先在web.xml中springmvc.xml的路径如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--核心配置文件的位置和名称--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--启动服务器的时候就对DispatcherServlet进行实例化操作--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我写的<code>/WEB-INF/springmvc.xml</code>，把springmvc.xml放在WEB-INF下，也依然不能访问，报的错误也很奇怪，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler processing failed; nested exception is java.lang.NoClassDefFoundError: javax/servlet/jsp/jstl/core/Config</span><br></pre></td></tr></table></figure><p>自己百度了，都说是少了jstl的包，但是我pom.xml依赖里加了jstl的依赖的，太奇怪了，最后一个解决办法，在pom.xml中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--扫描到resources下的xml等资源文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入这个代码，不管xml文件放在resources下还是WEB-INF下，都能扫描到。</p><p>但是还是比较纠结报错的问题，为什么报那个错误！？？？？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在写SSM整合，测试的时候，发现resources下的SpringMvc.xml没有扫描到。&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="https://heshang.ink/categories/maven/"/>
    
    
      <category term="MyBatis" scheme="https://heshang.ink/tags/MyBatis/"/>
    
      <category term="SSM" scheme="https://heshang.ink/tags/SSM/"/>
    
      <category term="SpringMvc" scheme="https://heshang.ink/tags/SpringMvc/"/>
    
      <category term="Spring" scheme="https://heshang.ink/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>VM安装、Ubuntu的安装、Ubuntu设置为中文</title>
    <link href="https://heshang.ink/2018/09/14/VM%E5%AE%89%E8%A3%85%E3%80%81Ubuntu%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81Ubuntu%E8%AE%BE%E7%BD%AE%E4%B8%BA%E4%B8%AD%E6%96%87/"/>
    <id>https://heshang.ink/2018/09/14/VM安装、Ubuntu的安装、Ubuntu设置为中文/</id>
    <published>2018-09-14T08:58:30.000Z</published>
    <updated>2019-05-27T02:46:10.989Z</updated>
    
    <content type="html"><![CDATA[<p>vm下载及破解：链接: <a href="https://pan.baidu.com/s/1znunnWwNIdgrmmd_LGm0-g" target="_blank" rel="noopener">https://pan.baidu.com/s/1znunnWwNIdgrmmd_LGm0-g</a> 密码: d23j</p><p>Ubuntu镜像下载：<a href="https://cn.ubuntu.com/desktop/" target="_blank" rel="noopener">https://cn.ubuntu.com/desktop/</a></p><a id="more"></a><p><strong>重点！！！，安装Ubuntu的时候，千万不能联网，自己吃了一个大亏！！！！！，其他步骤都可以联网操作，安装Ubuntu有些地方会很慢，请耐心等待</strong></p><h3 id="1-安装vm"><a href="#1-安装vm" class="headerlink" title="1.安装vm"></a>1.安装vm</h3><p>下载好了vm软件，双击</p><p><img src="/images/c31cbfc9ly1fv94vbzwf8j20dr0ao3zm.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv94wwotjmj20dn0aedg6.jpg" alt=""></p><p>选择安装位置</p><p><img src="/images/c31cbfc9ly1fv94xzgfdbj20do0audfx.jpg" alt=""></p><p>把这两个√去掉，避免更新</p><p><img src="/images/c31cbfc9ly1fv94zmdai0j20dr0axdg1.jpg" alt=""></p><p>点击这个输入许可证即ok</p><p><img src="/images/c31cbfc9ly1fv953hngczj20dp0ant9n.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv9573r4ygj20fe0870tl.jpg" alt=""></p><h3 id="2-安装Ubuntu"><a href="#2-安装Ubuntu" class="headerlink" title="2.安装Ubuntu"></a>2.安装Ubuntu</h3><p>官网下载Ubuntu的镜像，然后在打开虚拟机，两种方式新建虚拟机。</p><p><img src="/images/c31cbfc9ly1fv95ej640pj21020jcabu.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95fjvmncj20es0cemxv.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95hovkusj20fe0e3tac.jpg" alt=""></p><p>这个关键，一定勾选这个，如果选择了第二个，在后面可能会出错，卡住，</p><p><img src="/images/c31cbfc9ly1fv95itaipaj20hd0exjty.jpg" alt=""></p><p>这里选择你需要装的系统</p><p><img src="/images/c31cbfc9ly1fv95k6vgz1j20fe0c9gn3.jpg" alt=""></p><p>选择你系统装的位置和名称</p><p><img src="/images/c31cbfc9ly1fv95klqbs4j20fe0cpt9s.jpg" alt=""></p><p>选择你系统的配置大小</p><p><img src="/images/c31cbfc9ly1fv95ljkt9sj20fe0bnq3w.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95lzsktcj20e90cpwet.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95mauyzcj20fe0cgacg.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95mlaoagj20fe0bvwfu.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95mtp5xgj20ej0dg3yo.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95n52xrij20em0d7mxg.jpg" alt=""></p><p>给虚拟机分配的磁盘空间大小</p><p><img src="/images/c31cbfc9ly1fv95nhz4qej20fe0cbdih.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95o2ieu6j20f90ce3yn.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95ofskk0j20eq0c9aab.jpg" alt=""></p><p>然后点击完成，接下来放入系统镜像</p><p><img src="/images/c31cbfc9ly1fv95p2hdmjj20fe0ab75k.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95paqk4fj20fe09gabk.jpg" alt=""></p><p>然后点击确定，然后开启此虚拟机电源，慢慢等待出现，</p><p><img src="/images/c31cbfc9ly1fv95q5gkztj20fe08wdh4.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95qfakxrj20fe07cmxv.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95qn8330j20fe08q75w.jpg" alt=""></p><p>这里输入你的虚拟机系统名称和密码，然后continue，最后会提醒你重启，即重启，然后再次打开虚拟机，即安装完成</p><p><img src="/images/c31cbfc9ly1fv95s8vj8qj20lj0fxgno.jpg" alt=""></p><h3 id="3-设置Ubuntu系统为中文"><a href="#3-设置Ubuntu系统为中文" class="headerlink" title="3.设置Ubuntu系统为中文"></a>3.设置Ubuntu系统为中文</h3><p>打开虚拟机</p><p><img src="/images/c31cbfc9ly1fv95uuei7vj20fe088ju4.jpg" alt=""></p><p><img src="/images/c31cbfc9ly1fv95v39ek3j20fe086myc.jpg" alt=""></p><p>这里会提醒你下载语言包，然后等待下载，可能会很慢。下载成功之后，在里面勾选Chinese。</p><p><img src="/images/c31cbfc9ly1fv95ygo07ej20fe08egng.jpg" alt=""></p><p>如果这里出现汉语，但是却是灰色，鼠标把他拖上面去，就变黑了，然后即ok。</p><p><img src="/images/c31cbfc9ly1fv95zg6l81j20fe08l0uk.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vm下载及破解：链接: &lt;a href=&quot;https://pan.baidu.com/s/1znunnWwNIdgrmmd_LGm0-g&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1znunnWwNIdgrmmd_LGm0-g&lt;/a&gt; 密码: d23j&lt;/p&gt;
&lt;p&gt;Ubuntu镜像下载：&lt;a href=&quot;https://cn.ubuntu.com/desktop/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cn.ubuntu.com/desktop/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://heshang.ink/categories/Linux/"/>
    
    
      <category term="Ubuntu安装" scheme="https://heshang.ink/tags/Ubuntu%E5%AE%89%E8%A3%85/"/>
    
      <category term="VM安装" scheme="https://heshang.ink/tags/VM%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架总结—学习路线</title>
    <link href="https://heshang.ink/2018/09/04/SSM%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93%E2%80%94%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://heshang.ink/2018/09/04/SSM框架总结—学习路线/</id>
    <published>2018-09-04T12:50:42.000Z</published>
    <updated>2019-05-26T13:59:29.648Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis,Spring,SpringMvc,单元测试框架，日志框架Log4J</p><a id="more"></a><p>思维导图源文件获取，用xmind 8 打开<a href="https://github.com/heshangcode/Learn" target="_blank" rel="noopener">github</a></p><p>[TOC]</p><p><img src="/images/c31cbfc9ly1fuxszb7lr5j21av5x57wl.jpg" alt=""></p><h2 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>MyBatis是一个持久层框架/ORM框架，会对结果集(查询)映射，对JDBC简单的封装<ul><li>insert</li><li>update</li><li>delete</li><li>selectOne</li><li>selectList</li></ul></li><li>持久化<ul><li>狭义：将数据永久的保存到数据库/磁盘等媒介</li><li>广义：针对于数据的操作都称之持久化操作</li><li>实体Bean == 持久化类</li></ul></li><li>需要的jar包<ul><li>mybatis-3.4.6.jar</li><li>mysql-connector-java-5.1.45-bin.jar</li></ul></li></ul><h3 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h3><ul><li><p>针对于CUD操作，MyBatis需要手动提交事务</p></li><li><p>MyBatis的API调用过程</p></li><li><blockquote><p>package com.hs.util;</p></blockquote></li><li><blockquote><p>/**</p></blockquote></li><li><blockquote><ul><li>知识点：</li></ul></blockquote></li><li><blockquote><ul><li>final修饰类：不能被继承</li></ul></blockquote></li><li><blockquote><ul><li>修饰方法：不能被重写</li></ul></blockquote></li><li><blockquote><ul><li>修饰变量：常量不可用变，但如果是对象，对象里的值可以变</li></ul></blockquote></li><li><blockquote><p>*</p></blockquote></li><li><blockquote><p>*/</p></blockquote></li><li><blockquote><p>import org.apache.ibatis.io.Resources;</p></blockquote></li><li><blockquote><p>import org.apache.ibatis.session.SqlSession;</p></blockquote></li><li><blockquote><p>import org.apache.ibatis.session.SqlSessionFactory;</p></blockquote></li><li><blockquote><p>import org.apache.ibatis.session.SqlSessionFactoryBuilder;</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>import java.io.IOException;</p></blockquote></li><li><blockquote><p>import java.io.InputStream;</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>public class MyBatisUtils {</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>private MyBatisUtils() { }  //不允许实例化</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>private static final String PATH = “mybatis-config.xml”;</p></blockquote></li><li><blockquote><p>private static InputStream inputStream;</p></blockquote></li><li><blockquote><p>private static SqlSessionFactory sqlSessionFactory;</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>static { //1.静态代码块，只是加载一次</p></blockquote></li><li><blockquote><p>try {</p></blockquote></li><li><blockquote><p>//输入流 读文件</p></blockquote></li><li><blockquote><p>//1.读取核心配置文件</p></blockquote></li><li><blockquote><p>inputStream = Resources.getResourceAsStream(PATH);</p></blockquote></li><li><blockquote><p>//2.创建SqlSession工厂(SqlSessionFactory)相当于Connection</p></blockquote></li><li><blockquote><p>sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</p></blockquote></li><li><blockquote><p>} catch (IOException e) {</p></blockquote></li><li><blockquote><p>e.printStackTrace();</p></blockquote></li><li><blockquote><p>throw new RuntimeException(“加载核心配置文件失败”);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>/**</p></blockquote></li><li><blockquote><p>*3.获取SqlSession 相当于 执行SQL语句对象PreparedStament预处理对象</p></blockquote></li><li><blockquote><ul><li>SqlSession完成所有的持久化操作CRUD</li></ul></blockquote></li><li><blockquote><p>*/</p></blockquote></li><li><blockquote><p>public static SqlSession getSqlsession() {</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>return sqlSessionFactory.openSession();</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>/**</p></blockquote></li><li><blockquote><p>*6.关闭资源</p></blockquote></li><li><blockquote><p>*/</p></blockquote></li><li><blockquote><p>public static void closeSqlSession(SqlSession sqlSession) {</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>if (sqlSession != null) {</p></blockquote></li><li><blockquote><p>sqlSession.close();</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote></blockquote><ul><li><p>1.读取核心配置文件 classpath(src)/mybatis-config.xml</p><ul><li><p>加载数据库信息属性文件jdbc.properties，${key}获取值</p></li><li><blockquote><properties resource="jdbc.properties"></properties></blockquote></li><li><p>自定义设置类型的别名</p></li><li><blockquote><!--自定义设置类型的别名，也就是resultMap里的type，避免包名已修改，在映射文件里修改多处地方--></blockquote></li><li><blockquote><typealiases></typealiases></blockquote></li><li><blockquote><!-- 方式一、com.hs.model.Skill这个类设置了别名hs，之后要用这个的话，直接写hs --></blockquote></li><li><blockquote><!--<typeAlias type="com.hs.model.Skill" alias="hs"/> --></blockquote></li><li><blockquote><!-- 方式二、com.hs.model这个包下的类，要用的时候直接写类名，比如用com.hs.model.Skill，直接写Skill --></blockquote></li><li><blockquote><package name="com.hs.model"></package></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>配置数据库的环境</p></li><li><blockquote><environments default="development"></environments></blockquote></li><li><blockquote><environment id="development"></environment></blockquote></li><li><blockquote><!--事务管理器:保证数据的完整性和一致性  --></blockquote></li><li><blockquote><!--框架：默认情况下CUD操作需要手动提交事务（如同在Navicat中表中输入了数据，没有点那个小√，就是没有提交事务，但是输入insert语句，就自动提交事务了）  --></blockquote></li><li><blockquote><transactionmanager type="JDBC"></transactionmanager></blockquote></li><li><blockquote><!--使用的是连接池：百度java如何实行连接池的原理？  --></blockquote></li><li><blockquote><datasource type="POOLED"></datasource></blockquote></li><li><blockquote><property name="driver" value="${jdbc.mysql.driver}"></property></blockquote></li><li><blockquote><property name="url" value="${jdbc.mysql.url}"></property></blockquote></li><li><blockquote><property name="username" value="${jdbc.mysql.username}"></property></blockquote></li><li><blockquote><property name="password" value="${jdbc.mysql.password}"></property></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>加载映射文件</p></li><li><blockquote><mappers></mappers></blockquote></li><li><blockquote><!--告知映射文件方式1，一个一个的配置--></blockquote></li><li><blockquote><mapper resource="com/hs/model/UserMapper.xml"></mapper></blockquote></li><li><blockquote><!-- 告知映射文件方式2，自动扫描包内的Mapper接口与配置文件 --></blockquote></li><li><blockquote><!--<package name="com.hs.model"/>--></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li><li><p>2.创建SqlSession工厂 == SqlSessionFactory</p></li><li><p>3.获取SqlSession</p><ul><li>连接数据库</li><li>完成针对于数据的CRUD操作</li></ul></li><li><p>4.执行定制的SQL语句</p><ul><li>传统方式<ul><li>命名空间namespace持久化类的全路径</li><li>.</li><li>映射文件的ID</li></ul></li><li>接口代理模式——推荐<ul><li>命名空间namespace固定必须为接口的全路径</li><li>映射文件中的ID需要跟接口中的方法名保持一致</li><li>查询操作：根据你的接口的返回值<ul><li>selectOne</li><li>selectList</li></ul></li></ul></li></ul></li><li><p>5.事务的提交</p><ul><li>Spring框架中有事务的管理</li></ul></li><li><p>6.关闭资源</p></li></ul></li><li><p>提取公共的字段代码</p><ul><li><p>无别名</p></li><li><blockquote><sql id="sys_role_columns"></sql></blockquote></li><li><blockquote><p>role_id,role_name,role_key,status</p></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>有别名</p></li><li><blockquote><sql id="sys_role_columns_alias"></sql></blockquote></li><li><blockquote><p>${alias}.role_id,${alias}.role_name,${alias}.role_key,${alias}.status</p></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>概要: 如何用</p></li><li><blockquote></blockquote></li><li><blockquote><include refid="sys_role_columns"></include></blockquote></li><li><blockquote><include refid="sys_role_colums_alias"></include></blockquote></li><li><blockquote><property name="alias" value="r"></property></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li><li><p>查询操作</p><ul><li><p>结果集的处理方式</p><ul><li>resultType</li><li>resultMap</li></ul></li><li><p>结果集可以处理成什么方式？</p><ul><li><p>返回Map类型</p><ul><li>resultType=”map”或者resultType=”java.util.Map”</li><li>resultMap属性去找resultMap标签<ul><li>默认情况是自动映射</li><li>可以设置别名</li></ul></li></ul></li><li><p>返回List类型–&gt;依旧使用Map处理结果</p><ul><li>只是在调用方法的时候使用selectList即可</li></ul></li><li><p>返回对象</p><ul><li><p>可以使用别名方式，保证查询的字段名称和类中的属性名称一致即可使用resultType完成对象的映射</p></li><li><p>重点resultMap属性</p><ul><li><p>一对一和多对一的关联标签association</p><ul><li><p>select方式</p></li><li><blockquote><p><resultmap id="SimpleResultMapper" type="User" extends="BaseResultMapper"> <!-- extends继承了BaseResultMapper，同java继承一样 --></resultmap></p></blockquote></li><li><blockquote><!--配置关联对象--></blockquote></li><li><blockquote><!--在结果集中找到fk_role_id字段，然后再传值给命名空间com.hs.dao.RoleDao下的getRoleByPk语句进行查询(找到要执行的SQL语句)，最后返回role(对象的属性)，它的类型是com.hs.model.Role--></blockquote></li><li><blockquote><association property="role" javatype="Role" column="fk_role_id" select="com.hs.dao.RoleDao.getRoleByPk"></association></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>结果集映射方式</p></li><li><blockquote><p>resultMap id=”JoinResultMapper” type=”User” extends=”BaseResultMapper”&gt;</p></blockquote></li><li><blockquote><!--关联对象--></blockquote></li><li><blockquote><!--resultMap引用别人的结果集(命名空间+"."+id)，或者自己在下面写结果集处理--></blockquote></li><li><blockquote><association property="role" javatype="Role" resultmap="com.hs.dao.RoleDao.BaseResultMapper"></association></blockquote></li><li><blockquote><p>&lt;!– <id column="role_id" property="role_id"></id></p></blockquote></li><li><blockquote><result column="role_name" property="role_name"></result></blockquote></li><li><blockquote><result column="role_key" property="role_key"></result></blockquote></li><li><blockquote><p><result column="status" property="status"> –&gt;</result></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li><li><p>一对多的关联标签collection</p><ul><li><p>方式</p><ul><li><p>select方式</p></li><li><blockquote><resultmap id="SimpleResultMapper" type="Role" extends="BaseResultMapper"></resultmap></blockquote></li><li><blockquote><!--配置集合List<User>,javaType一般可以不写--></blockquote></li><li><blockquote><p>&lt;!–在结果集中找到role_id这个字段，然后传给命名空间com.hs.dao.UserDao下id为getUserByFk的语句，</p></blockquote></li><li><blockquote><p>返回的结果集字段为userList，类型为java.util.List，里面装的类型是com.he.model.User这个类型</p></blockquote></li><li><blockquote><p>–&gt;</p></blockquote></li><li><blockquote><p>&lt;collection property=”userList”</p></blockquote></li><li><blockquote><p>javaType=”java.util.List”</p></blockquote></li><li><blockquote><p>ofType=”User”</p></blockquote></li><li><blockquote><p>column=”role_id”</p></blockquote></li><li><blockquote><p>select=”com.hs.dao.UserDao.getUserByFk”/&gt;</p></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>结果集映射方式</p></li><li><blockquote><resultmap id="JoinResultMapper" type="Role" extends="BaseResultMapper"></resultmap></blockquote></li><li><blockquote><!--配置集合，查询出来的User里的结果集找com.hs.dao.UserDao.BaseResultMapper处理--></blockquote></li><li><blockquote><p>&lt;collection property=”userList” javaType=”list” ofType=”com.hs.model.User”</p></blockquote></li><li><blockquote><p>resultMap=”com.hs.dao.UserDao.BaseResultMapper”/&gt;</p></blockquote></li><li><blockquote><p>&lt;!–<id></id></p></blockquote></li><li><blockquote><p><result>–&gt;</result></p></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li><li><p>注意：ofType属性是必须要填写</p></li></ul></li></ul></li></ul></li></ul></li><li><p>模糊查询</p><ul><li>concat(‘%’,#{name},’%’)</li></ul></li></ul></li></ul><h3 id="动态的SQL语句"><a href="#动态的SQL语句" class="headerlink" title="动态的SQL语句"></a>动态的SQL语句</h3><ul><li><p>在映射文件中获取数据的方式</p><ul><li>#()<ul><li>#()默认是预处理模式</li></ul></li><li>$()<ul><li>$()默认是直接拼接到SQL语句当中，并且需要提供KEY值，推荐在排序使用</li></ul></li></ul></li><li><p>if标签</p><ul><li>test属性 test=”类中属性或者Map中的KEY或者使用@Param指定KEY”</li></ul></li><li><p>where标签</p><ul><li><p>如果有内容，在内容的最前面加入where关键字，并且去掉内容最前面的and或者or</p></li><li><blockquote><where></where></blockquote></li><li><blockquote><if test="name != null &amp;&amp; name != ''"></if></blockquote></li><li><blockquote><p>and user_name like concat(‘%’,#{name},’%’)</p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><if test="sex != null and sex != ''"></if></blockquote></li><li><blockquote><p>and sex = #{sex}</p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li><li><p>set标签</p><ul><li><p>如果有内容，在内容的最前面加入set关键字，并且去掉内容最后面的逗号</p></li><li><blockquote><set></set></blockquote></li><li><blockquote><if test="user_name !=null and user_name != ''"></if></blockquote></li><li><blockquote><p>user_name = #{user_name},</p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><if test="sex !=null and sex != ''"></if></blockquote></li><li><blockquote><p>sex = #{sex},</p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p><if test="money != null"> <!--不是字符串就不要判断是否为空 --></if></p></blockquote></li><li><blockquote><p>money = #{money},</p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li><li><p>trim标签</p><ul><li><p>主要的目的是完成对动态添加SQL的拼写— 一般可以用来完成set和where功能</p></li><li><blockquote><p>&lt;trim prefix=”当发现有内容的时候,你在内容的最前面想加入什么内容”           </p></blockquote></li><li><blockquote><p>prefixOverrides=”当发现有内容的时候,你在内容的最前面想抹掉什么内容”            </p></blockquote></li><li><blockquote><p>suffix=”当发现有内容的时候,你在内容的最后面面想加入什么内容”            </p></blockquote></li><li><blockquote><p>suffixOverrides=”当发现有内容的时候,你在内容的最后面想抹掉什么内容”&gt;        </p></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li><li><p>foreach标签</p><ul><li>如果你传递的数据的形参为一个数据，并且数据类型是数组或者List<ul><li>collection属性只能取array || list</li></ul></li><li>如果你传递的是Map或者对象(都有一个存储集合的属性或者KEY)<ul><li>collection=”集合对应的Map中的KEY或者类中的属性”</li></ul></li></ul></li></ul><h3 id="传递多个参数"><a href="#传递多个参数" class="headerlink" title="传递多个参数"></a>传递多个参数</h3><blockquote><p>/**</p></blockquote><blockquote><ul><li>传递多个参数</li></ul></blockquote><blockquote><ul><li>1.当你的形参传递&gt;1个的时候，parameterType不写，让其自动处理</li></ul></blockquote><blockquote><ul><li>2.#{值}，默认为arg0，arg1…..或param1，param2，，，</li></ul></blockquote><blockquote><ul><li>若在dao注解了@xxx(相当于指明了key值)，即也可以写xxx，默认的也可以写，相当于3个值</li></ul></blockquote><blockquote><p>*/</p></blockquote><blockquote><p>User getUser(@Param(“account”) String account, @Param(“password”) String password);</p></blockquote><h3 id="接口代理模式和传统模式"><a href="#接口代理模式和传统模式" class="headerlink" title="接口代理模式和传统模式"></a>接口代理模式和传统模式</h3><ul><li><p>接口代理模式</p></li><li><blockquote><p>只需要写接口，在测试类中调用，接口编程: 什么是接口? 简单理解:接口就是定义规范</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>接口返回类型跟你设置的resultMap或者resultType对应上即可,但是会根据你返回的类型完成selectone或者selectList操作</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>接口里方法如何写：sql语句返回的结果集类型 sql语句的id(要传的值);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>eg:List getSkillLike02(String name);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>List为SQL语句返回的结果集类型，getSkillLike02为映射文件中SQL语句的id，String name是传给映射文件的值</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>映射文件命名空间为接口的全路径</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>可以根据接口的返回类型自动判断使用selectOne还是selectList</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>eg:返回的是一个对象的为one，返回的是list的就是List，如果是List，也是List</p></blockquote></li><li><p>传统模式</p></li><li><blockquote><p>需要写接口，接口实现类，测试类，</p></blockquote></li><li><blockquote><p>映射文件命名空间为持久化类的全路径</p></blockquote></li></ul><h2 id="单元测试框架"><a href="#单元测试框架" class="headerlink" title="单元测试框架"></a>单元测试框架</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>单元(方法)就是对类中方法的测试</li><li>命名规则<ul><li>类名 UserDaoTest</li><li>方法 testLoadMethod</li></ul></li></ul><h3 id="需要的jar包"><a href="#需要的jar包" class="headerlink" title="需要的jar包"></a>需要的jar包</h3><ul><li>hamcrest-core-1.3.jar</li><li>junit-4.12.jar</li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul><li><p>@Before</p></li><li><blockquote><p>@Before //再每个单元测试运行之前都要进行这个方法</p></blockquote></li><li><blockquote><p>public void init() {</p></blockquote></li><li><blockquote><p>this.arithmeticService = new ArithmeticServiceImpl();    //想用哪个功能就实例化哪个</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>@Test</p></li><li><blockquote><p>@Test    //测试这个方法</p></blockquote></li><li><blockquote><p>public void test01() {}</p></blockquote></li></ul><h2 id="日志框架Log4J"><a href="#日志框架Log4J" class="headerlink" title="日志框架Log4J"></a>日志框架Log4J</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><ul><li>在MyBatis中显示出SQL语句，信息等，放在classpath路径下log4j.properties</li></ul><h3 id="需要的jar包-1"><a href="#需要的jar包-1" class="headerlink" title="需要的jar包"></a>需要的jar包</h3><ul><li>log4j-1.2.17.jar</li></ul><h3 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h3><blockquote><h1 id="Global-logging-configuration"><a href="#Global-logging-configuration" class="headerlink" title="Global logging configuration"></a>Global logging configuration</h1></blockquote><blockquote><p>log4j.rootLogger=ERROR, stdout</p></blockquote><blockquote><h1 id="MyBatis-logging-configuration…"><a href="#MyBatis-logging-configuration…" class="headerlink" title="MyBatis logging configuration…"></a>MyBatis logging configuration…</h1></blockquote><blockquote><h1 id="如果要显示SQL语句，那么这个位置需要配置为命名空间"><a href="#如果要显示SQL语句，那么这个位置需要配置为命名空间" class="headerlink" title="如果要显示SQL语句，那么这个位置需要配置为命名空间"></a>如果要显示SQL语句，那么这个位置需要配置为命名空间</h1></blockquote><blockquote><p>log4j.logger.com.shxt.model.Skill=TRACE</p></blockquote><blockquote><h1 id="Console-output…"><a href="#Console-output…" class="headerlink" title="Console output…"></a>Console output…</h1></blockquote><blockquote><p>log4j.appender.stdout=org.apache.log4j.ConsoleAppender</p></blockquote><blockquote><p>log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</p></blockquote><blockquote><p>log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</p></blockquote><h2 id="SpringMVC框架"><a href="#SpringMVC框架" class="headerlink" title="SpringMVC框架"></a>SpringMVC框架</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><ul><li><p>核心配置文件DispatcherServlet的规则</p><ul><li><p>默认情况下：WEB-INF/[servlet-name]-servlet.xml</p></li><li><blockquote><servlet></servlet></blockquote></li><li><blockquote><!--默认的核心配置文件--></blockquote></li><li><blockquote><p><servlet-name>springmvc</servlet-name></p></blockquote></li><li><blockquote><p><servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class></p></blockquote></li><li><blockquote><!-- 服务器启动的时候就对DispatcherServlet进行实例化操作 --></blockquote></li><li><blockquote><!-- 值越小，越被越优先实例化 --></blockquote></li><li><blockquote><p><load-on-startup>2</load-on-startup></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p><servlet-mapping></servlet-mapping></p></blockquote></li><li><blockquote><p><servlet-name>springmvc</servlet-name></p></blockquote></li><li><blockquote><p>&lt;!–  /</p></blockquote></li><li><blockquote><p>所有的资源访问都需要经过 DispatcherServlet处理</p></blockquote></li><li><blockquote><p>路径</p></blockquote></li><li><blockquote><p>href</p></blockquote></li><li><blockquote><p>src…..</p></blockquote></li><li><blockquote><p>区分   /* 和 /</p></blockquote></li><li><blockquote><p>–&gt;</p></blockquote></li><li><blockquote><p><url-pattern>/</url-pattern></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>自定义规则</p></li><li><blockquote><servlet></servlet></blockquote></li><li><blockquote><p><servlet-name>springmvc</servlet-name></p></blockquote></li><li><blockquote><p><servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class></p></blockquote></li><li><blockquote><p><init-param></init-param></p></blockquote></li><li><blockquote><!--自定义的核心配置文件的名字和位置--></blockquote></li><li><blockquote><p><param-name>contextConfigLocation</param-name></p></blockquote></li><li><blockquote><p><param-value>/WEB-INF/springmvc.xml</param-value></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p><load-on-startup>1</load-on-startup></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p><servlet-mapping></servlet-mapping></p></blockquote></li><li><blockquote><p><servlet-name>springmvc</servlet-name></p></blockquote></li><li><blockquote><p><url-pattern>/</url-pattern></p></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li></ul><h3 id="需要的jar包-2"><a href="#需要的jar包-2" class="headerlink" title="需要的jar包"></a>需要的jar包</h3><ul><li>spring-aop-4.3.6.RELEASE.jar</li></ul><p>spring-beans-4.3.6.RELEASE.jar</p><p>spring-context-4.3.6.RELEASE.jar</p><p>spring-context-support-4.3.6.RELEASE.jar</p><p>spring-core-4.3.6.RELEASE.jar</p><p>spring-expression-4.3.6.RELEASE.jar</p><p>spring-web-4.3.6.RELEASE.jar</p><p>spring-webmvc-4.3.6.RELEASE.jar</p><p>commons-logging-1.2.jar</p><h3 id="控制器专题"><a href="#控制器专题" class="headerlink" title="控制器专题"></a>控制器专题</h3><ul><li><p>控制传递的参数</p></li><li><blockquote><p>@RequestMapping(path = “/param02”,params = {“hs!=tomcat”,”method=add”})</p></blockquote></li><li><p>形参</p><ul><li>默认会对形参中的类进行自动的实例化操作</li></ul></li><li><p>页面跳转方式</p><ul><li>默认请求转发，能访问WEB-INF下</li><li>重定向，不能访问WEB-INF下</li><li>概要: 指明前缀，请求转发”forward:/hs011.jsp”,重定向redirect:/xxx</li></ul></li><li><p>返回类型</p><ul><li><p>ModelAndView</p><ul><li><p>JSP的请求转发的视图解析器</p></li><li><blockquote><p>&lt;!–jsp请求转发视图解析器</p></blockquote></li><li><blockquote><p>请求转发jsp页面的时候，在路径上加入前缀和后缀</p></blockquote></li><li><blockquote><p>–&gt;</p></blockquote></li><li><blockquote><!--下面相当于 InternalResourceViewResolver internalResourceViewResolver = new InternalResourceViewResolver()--></blockquote></li><li><blockquote><bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"></bean></blockquote></li><li><blockquote><!--前缀--></blockquote></li><li><blockquote><!--相当于setPrefix("/WEB-INF/")--></blockquote></li><li><blockquote><property name="prefix" value="/WEB-INF/"></property></blockquote></li><li><blockquote><!--后缀--></blockquote></li><li><blockquote><property name="suffix" value=".jsp"></property></blockquote></li><li><blockquote><!--支持JSTL--></blockquote></li><li><blockquote><property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li><li><p>void</p><ul><li>默认情况下是按照路径去请求转发找到对应的JSP页面_不推荐使用</li></ul></li><li><p>String</p><ul><li>推荐使用，跳转到页面或者另外的Controller，也满足JSP的请求转发的视图解析器<br>如果使用了前缀的标识那么一定是从Controller跳转到另一个Controller</li></ul></li><li><p>任意</p><ul><li>ResponseEntity<t></t></li><li>@ResponseBody—推荐，常用于JSON串的处理<ul><li>针对于你返回的数据的类型进行转换，可以转换任意类型，但是需要第三方库的支持</li></ul></li><li>情况说明<ul><li>字符串默认可以自动转换为文本</li><li>如果是其他类型需要使用第三方Jackson的支持，将返回的数据转换成JSON格式的字符串<ul><li>Jackson的jar包<ul><li>jackson-annotations-2.8.1.jar</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>jackson-core-2.8.1.jar</p><p>jackson-databind-2.8.1.jar</p><ul><li><p>访问路径</p><ul><li><p>路径的设置</p><ul><li>/sys/user</li><li>/sys/*或者/sys/**—不推荐使用</li><li>/sys/user/{hs}占位符路径<ul><li>使用占位符，一般只是传递主键和简单的字符串，完成REST风格的路径，优先级比通配符高，hs接收传过的值</li></ul></li></ul></li><li><p>请求方式的说明</p><ul><li><p>HTML页面中有且只有GET/POST请求</p></li><li><p>通过设置过滤器完成了8种请求方式</p></li><li><blockquote><p>&lt;!–http的请求转换过滤器</p></blockquote></li><li><blockquote><p>过滤器使html中支持除了get、post，的其他请求put，delete，patch–&gt;</p></blockquote></li><li><blockquote><filter></filter></blockquote></li><li><blockquote><p><filter-name>httpMethodFilter</filter-name></p></blockquote></li><li><blockquote><p><filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p><filter-mapping></filter-mapping></p></blockquote></li><li><blockquote><p><filter-name>httpMethodFilter</filter-name></p></blockquote></li><li><blockquote><!--设置需要过滤的Servlet的名字，就是下面那个servlet--></blockquote></li><li><blockquote><p><servlet-name>springmvc</servlet-name></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>为了支持其他的请求方式，把method都改为post，然后加入一个</p></blockquote></li><li><blockquote><input type="hidden" name="_method" value="get|post|put|delete|patch"></blockquote></li><li><blockquote><p>value不分大小写，name=xxx固定</p></blockquote><ul><li>get：查询</li><li>post：添加</li><li>put：更新</li><li>delete：删除</li></ul></li></ul></li></ul></li></ul><h3 id="静态资源-图片、js、css-排除方案，不经过DispatcherServlet"><a href="#静态资源-图片、js、css-排除方案，不经过DispatcherServlet" class="headerlink" title="静态资源(图片、js、css)排除方案，不经过DispatcherServlet"></a>静态资源(图片、js、css)排除方案，不经过DispatcherServlet</h3><blockquote><p>&lt;!–4.静态资源(图片、js、css之类的)(让这些资源不经过servlet处理)的</p></blockquote><blockquote><p>处理方式一  推荐方式–&gt;</p></blockquote><blockquote><p>&lt;mvc:default-servlet-handler default-servlet-name=”default”/&gt;</p></blockquote><blockquote><!--4.静态资源的处理方式二(可以写多个，从上而下找，找到就不再找) 映射方式(mapping中/image/后面的输进去，默认加到/WEB-INF/后面),--></blockquote><blockquote><!--<mvc:resources mapping="/image/**" location="/WEB-INF/"/>--></blockquote><h3 id="客户端传递数据转换成服务端对应的数据类型"><a href="#客户端传递数据转换成服务端对应的数据类型" class="headerlink" title="客户端传递数据转换成服务端对应的数据类型"></a>客户端传递数据转换成服务端对应的数据类型</h3><ul><li><p>@RequestParam注解</p></li><li><blockquote><p>public ModelAndView test02(@RequestParam(value = “user_name”, required = false) String name,</p></blockquote></li><li><blockquote><p>@RequestParam(name = “user_id”, required = false, defaultValue = “1111”) Integer id) {</p></blockquote></li><li><blockquote><p>System.out.println(“姓名” + name);</p></blockquote></li><li><blockquote><p>System.out.println(“ID” + id);</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote><ul><li>name=”” | value=””对应传递数据的名称</li><li>required=”true”默认值</li><li>defaultValue=”设置默认值”</li></ul></li><li><p>简写方式 推荐：传递的name和形参中的名称保持一致即可</p></li><li><p>数组</p><ul><li><p>超链接获取数组</p></li><li><blockquote><p><a href="client04?role_id=100&role_id=200&role_id=300">传递数组</a></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>@GetMapping(“/client04”)</p></blockquote></li><li><blockquote><p>public ModelAndView test01(@RequestParam(name = “role_id”) Integer[] roles) {</p></blockquote></li><li><blockquote><p>System.out.println(Arrays.asList(roles));</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>复选框传递数组</p></li><li><blockquote><form action="client05"></form></blockquote></li><li><blockquote><p><input type="checkbox" name="hobby" value="basketball">篮球</p></blockquote></li><li><blockquote><p><input type="checkbox" name="hobby" value="football">足球</p></blockquote></li><li><blockquote><p><input type="checkbox" name="hobby" value="book">看书</p></blockquote></li><li><blockquote><button>简写方式</button></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>@GetMapping(“/client05”)</p></blockquote></li><li><blockquote><p>public ModelAndView test02(String[] hobby) {</p></blockquote></li><li><blockquote><p>if (hobby != null) {</p></blockquote></li><li><blockquote><p>System.out.println(Arrays.asList(hobby));</p></blockquote></li><li><blockquote><p>} else {</p></blockquote></li><li><blockquote><p>System.out.println(“您没有爱好！”);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>文本框传递数据</p></li><li><blockquote><form action="client06"></form></blockquote></li><li><blockquote><input type="text" name="hobby"></blockquote></li><li><blockquote><input type="text" name="hobby"></blockquote></li><li><blockquote><button>简写方式</button></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>@GetMapping(“/client06”)</p></blockquote></li><li><blockquote><p>public ModelAndView test03(String[] hobby) {</p></blockquote></li><li><blockquote><p>System.out.println(Arrays.asList(hobby));</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>多选列表传递数组</p></li><li><blockquote><form action="client07"></form></blockquote></li><li><blockquote><select name="hobby" multiple="multiple"></select></blockquote></li><li><blockquote><option value="music">音乐</option></blockquote></li><li><blockquote><option value="book">看书</option></blockquote></li><li><blockquote><option value="football">足球</option></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><button>简写方式</button></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>@GetMapping(“/client07”)</p></blockquote></li><li><blockquote><p>public ModelAndView test04(String[] hobby) {</p></blockquote></li><li><blockquote><p>if (hobby != null) {</p></blockquote></li><li><blockquote><p>System.out.println(Arrays.asList(hobby));</p></blockquote></li><li><blockquote><p>} else {</p></blockquote></li><li><blockquote><p>System.out.println(“您没有爱好！！”);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li><li><p>对象</p><ul><li><p>简单对象，只是需要你传递的名称跟类中的属性名保持一致即可</p></li><li><blockquote><p>@GetMapping(“/client08”)</p></blockquote></li><li><blockquote><p>public ModelAndView test01(User user, String user_name, String sex) {</p></blockquote></li><li><blockquote><p>System.out.println(user);</p></blockquote></li><li><blockquote><p>System.out.println(“—–依然可以使用简单方式—-“);</p></blockquote></li><li><blockquote><p>System.out.println(user_name);</p></blockquote></li><li><blockquote><p>System.out.println(sex);</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>多个对象如果属性不相同，那么SpringMvc框架会帮我们自动完成转换</p></li><li><blockquote><p>@GetMapping(“/client09”)</p></blockquote></li><li><blockquote><p>public ModelAndView test02(User user, Role role) {</p></blockquote></li><li><blockquote><p>System.out.println(user);</p></blockquote></li><li><blockquote><p>System.out.println(“—–角色—-“);</p></blockquote></li><li><blockquote><p>System.out.println(role);</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>关联对象，一个对象里有另外一个对象</p></li><li><blockquote><p>public class User {</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>private Role role;</p></blockquote><ul><li><p>后台处理</p><ul><li><blockquote><p>@GetMapping(“/client10”)</p></blockquote></li><li><blockquote><p>public ModelAndView test03(User user, Role role) {</p></blockquote></li><li><blockquote><p>//设置关联关系</p></blockquote></li><li><blockquote><p>user.setRole(role);</p></blockquote></li><li><blockquote><p>System.out.println(user);</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li><li><p>前台处理</p></li><li><blockquote><h2>多个对象进行关联方式二：前台处理</h2></blockquote></li><li><blockquote><form action="client11"></form></blockquote></li><li><blockquote><p>姓名：<input type="text" name="user_name"></p></blockquote></li><li><blockquote><p>性别：<input type="text" name="sex"></p></blockquote></li><li><blockquote><p>角色名称：<input type="text" name="role.role_name">&lt;%–name=类中.属性–%&gt;</p></blockquote></li><li><blockquote><button>提交数据</button></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p>@GetMapping(“/client11”)</p></blockquote></li><li><blockquote><p>public ModelAndView test04(User user) {</p></blockquote></li><li><blockquote><p>System.out.println(user);</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li><li><p>多个对象如果出现同属性问题，需要借助第三方类来区分数据的归属情况</p></li><li><blockquote><h2>不同对象同属性传递借助第三方类</h2></blockquote></li><li><blockquote><form action="client12"></form></blockquote></li><li><blockquote><h3>用户</h3></blockquote></li><li><blockquote><p>姓名：<input type="text" name="user.user_name"></p></blockquote></li><li><blockquote><p>性别：<input type="text" name="user.sex"></p></blockquote></li><li><blockquote><p>角色信息：<input type="text" name="user.role.role_name"></p></blockquote></li><li><blockquote><h3>学生</h3></blockquote></li><li><blockquote><p>姓名：<input type="text" name="student.user_name"></p></blockquote></li><li><blockquote><p>性别：<input type="text" name="student.sex"></p></blockquote></li><li><blockquote><button>提交数据</button></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>@GetMapping(“/client12”)</p></blockquote></li><li><blockquote><p>public ModelAndView test05(HsModel hsModel) {</p></blockquote></li><li><blockquote><p>System.out.println(hsModel.getStudent());</p></blockquote></li><li><blockquote><p>System.out.println(hsModel.getUser());</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote></blockquote><ul><li><p>第三方类含这些类</p><ul><li><blockquote><p>public class HsModel {</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>private User user;</p></blockquote></li><li><blockquote><p>private Student student;</p></blockquote></li></ul></li></ul></li></ul></li><li><p>Map</p></li><li><blockquote><form action="client13"></form></blockquote></li><li><blockquote><p>姓名：&lt;input type=”text” name=”query[‘user_name’]”&lt;%–属性[‘需要设置的key值’]–%&gt;&gt;</p></blockquote></li><li><blockquote><p>性别：<input type="text" name="query['sex']"></p></blockquote></li><li><blockquote><button>提交数据</button></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p>@GetMapping(“/client13”)</p></blockquote></li><li><blockquote><p>public ModelAndView test01(HsModel hsModel) {</p></blockquote></li><li><blockquote><p>System.out.println(hsModel.getQuery());</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote><ul><li><p>需要借助第三方类的支持</p></li><li><blockquote><p>public class HsModel {</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>private Map&lt;String,Object&gt; query;</p></blockquote></li><li><p>一般做分页查询的时候使用 query[“设置Map中的KEY”]</p></li></ul></li><li><p>List</p></li><li><blockquote><form action="client14"></form></blockquote></li><li><blockquote><p>姓名：<input type="text" name="studentList[0].user_name"> &lt;%–设置第1条数据的user_name–%&gt;</p></blockquote></li><li><blockquote><p>性别：<input type="text" name="studentList[0].sex">&lt;%–设置第1条数据的sex–%&gt;</p></blockquote></li><li><blockquote><hr></blockquote></li><li><blockquote><p>姓名：<input type="text" name="studentList[1].user_name"> &lt;%–设置第2条数据的user_name–%&gt;</p></blockquote></li><li><blockquote><p>性别：<input type="text" name="studentList[1].sex"></p></blockquote></li><li><blockquote><hr></blockquote></li><li><blockquote><p>姓名：<input type="text" name="studentList[5].user_name"> &lt;%–设置第6条数据的user_name,同时也设置了这个list长度是6–%&gt;</p></blockquote></li><li><blockquote><p>性别：<input type="text" name="studentList[5].sex"></p></blockquote></li><li><blockquote><button>提交数据</button></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>@Controller</p></blockquote></li><li><blockquote><p>public class    ListTypeDemoController {</p></blockquote></li><li><blockquote><p>@GetMapping(“/client14”)</p></blockquote></li><li><blockquote><p>public ModelAndView test01(HsModel hsModel) {</p></blockquote></li><li><blockquote><p>System.out.println(hsModel.getStudentList());</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>}</p></blockquote><ul><li><p>需要借助第三方类的支持</p></li><li><blockquote><p>public class HsModel {</p></blockquote></li><li><blockquote><p>private List<student> studentList;</student></p></blockquote></li><li><p>一般做批量添加</p></li></ul></li><li><p>占位符传递数据</p></li><li><blockquote><p><a href="client15/11110/tomcat?sex=man">占位符传递数据</a></p></blockquote><ul><li><p>普通接收数据</p></li><li><blockquote><p>@GetMapping(“/client15/{id}/{name}”)</p></blockquote></li><li><blockquote><p>public ModelAndView test01(</p></blockquote></li><li><blockquote><p>@PathVariable(“id”) int user_id,/<em>占位符的名字和形参不一样，在PathVariable中需要写占位符的名字</em>/</p></blockquote></li><li><blockquote><p>@PathVariable String name,/<em>一样则可以省略</em>/</p></blockquote></li><li><blockquote><p>String sex  /<em>@RequestParam的简写方式</em>/</p></blockquote></li><li><blockquote><p>) {</p></blockquote></li><li><blockquote><p>System.out.println(user_id);</p></blockquote></li><li><blockquote><p>System.out.println(name);</p></blockquote></li><li><blockquote><p>System.out.println(sex);</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>Map接收数据</p></li><li><blockquote><p>@GetMapping(“/client16/{id}/{name}”)</p></blockquote></li><li><blockquote><p>public ModelAndView test01(</p></blockquote></li><li><blockquote><p>@PathVariable Map&lt;String,Object&gt; map,/<em>占位符的名字作为key值</em>/</p></blockquote></li><li><blockquote><p>String sex  /<em>@RequestParam的简写方式</em>/</p></blockquote></li><li><blockquote><p>) {</p></blockquote></li><li><blockquote><p>System.out.println(map);</p></blockquote></li><li><blockquote><p>System.out.println(sex);</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li><li><p>JSON数据</p><ul><li><p>服务端使用@RequestBody接收数据</p></li><li><p>JSON数据—Java对象互转</p><ul><li><p>Map</p></li><li><blockquote><p>@Test</p></blockquote></li><li><blockquote><p>public void test01() throws IOException {</p></blockquote></li><li><blockquote><p>Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</p></blockquote></li><li><blockquote><p>map.put(“user_name”,”悟空”);</p></blockquote></li><li><blockquote><p>map.put(“age”, 500);</p></blockquote></li><li><blockquote><p>map.put(“hobby”,/<em>静态初始化数据</em>/ new String[]{“music”,”book”});</p></blockquote></li><li><blockquote><p>System.out.println(“转换之前的Map:”+map);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//1.java对象转JSON格式的字符串</p></blockquote></li><li><blockquote><p>ObjectMapper objectMapper = new ObjectMapper();</p></blockquote></li><li><blockquote><p>String jsonString = objectMapper.writeValueAsString(map);</p></blockquote></li><li><blockquote><p>System.out.println(“java对象转JSON格式的字符串:”+jsonString);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//2.JSON字符串转换为java对象</p></blockquote></li><li><blockquote><p>Map&lt;String, Object&gt; hsMap = objectMapper.readValue(jsonString, Map.class);</p></blockquote></li><li><blockquote><p>System.out.println(“JSON字符串转换为java对象:”+hsMap);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>集合</p></li><li><blockquote><p>@Test</p></blockquote></li><li><blockquote><p>public void test03() throws Exception {</p></blockquote></li><li><blockquote><p>List<user> userList = new ArrayList&lt;&gt;();</user></p></blockquote></li><li><blockquote><p>User user = new User();</p></blockquote></li><li><blockquote><p>user.setUser_id(100);</p></blockquote></li><li><blockquote><p>user.setUser_name(“八戒”);</p></blockquote></li><li><blockquote><p>user.setSex(“男”);</p></blockquote></li><li><blockquote><p>Role role = new Role();</p></blockquote></li><li><blockquote><p>role.setRole_name(“超级管理员”);</p></blockquote></li><li><blockquote><p>user.setRole(role);</p></blockquote></li><li><blockquote><p>userList.add(user);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>user = new User();</p></blockquote></li><li><blockquote><p>user.setUser_id(100);</p></blockquote></li><li><blockquote><p>user.setUser_name(“悟空”);</p></blockquote></li><li><blockquote><p>user.setSex(“男”);</p></blockquote></li><li><blockquote><p>role = new Role();</p></blockquote></li><li><blockquote><p>role.setRole_name(“管理员”);</p></blockquote></li><li><blockquote><p>user.setRole(role);</p></blockquote></li><li><blockquote><p>userList.add(user);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>System.out.println(“转换之前的List<user>:”+userList);</user></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//1.java对象转json字符串</p></blockquote></li><li><blockquote><p>ObjectMapper objectMapper = new ObjectMapper();</p></blockquote></li><li><blockquote><p>String jsonString = objectMapper.writeValueAsString(userList);</p></blockquote></li><li><blockquote><p>System.out.println(“java对象转json字符串:”+jsonString);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//2.json字符串转java对象</p></blockquote></li><li><blockquote><p>System.out.println(“组成的List<map>:”+objectMapper.readValue(jsonString, List.class)); //组成的是List<map></map></map></p></blockquote></li><li><blockquote><p>JavaType t = objectMapper.getTypeFactory().constructParametricType(List.class, User.class);</p></blockquote></li><li><blockquote><p>List<user> tempList = objectMapper.readValue(jsonString, t);</user></p></blockquote></li><li><blockquote><p>System.out.println(“json字符串转java对象:”+tempList);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>自定义对象</p></li><li><blockquote><p>@Test</p></blockquote></li><li><blockquote><p>public void test02() throws Exception {</p></blockquote></li><li><blockquote><p>User user = new User();</p></blockquote></li><li><blockquote><p>user.setUser_id(100);</p></blockquote></li><li><blockquote><p>user.setUser_name(“八戒”);</p></blockquote></li><li><blockquote><p>user.setSex(“男”);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>Role role = new Role();</p></blockquote></li><li><blockquote><p>role.setRole_name(“超级管理员”);</p></blockquote></li><li><blockquote><p>//建立联系</p></blockquote></li><li><blockquote><p>user.setRole(role);</p></blockquote></li><li><blockquote><p>System.out.println(“转换之前的User:”+user);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//1.java对象转json字符串</p></blockquote></li><li><blockquote><p>ObjectMapper objectMapper = new ObjectMapper();</p></blockquote></li><li><blockquote><p>String jsonString = objectMapper.writeValueAsString(user);</p></blockquote></li><li><blockquote><p>System.out.println(“java对象转json字符串:”+jsonString);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//2.json字符串转java对象</p></blockquote></li><li><blockquote><p>User hsUser = objectMapper.readValue(jsonString, User.class);</p></blockquote></li><li><blockquote><p>System.out.println(“json字符串转java对象:”+hsUser);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li><li><p>JavaScript对象—JSON格式字符互转</p></li><li><blockquote><script type="text/javascript"></blockquote></li><li><blockquote><p>//给对象赋值的几种方 式</p></blockquote></li><li><blockquote><p>//javascript中，var 对象 = {}大括号，数组[]</p></blockquote></li><li><blockquote><p>var obj = {</p></blockquote></li><li><blockquote><p>user_name: “悟空”,</p></blockquote></li><li><blockquote><p>sex: “男”,</p></blockquote></li><li><blockquote><p>hobby: [“basktball”, “football”],</p></blockquote></li><li><blockquote><p>classInfo: {</p></blockquote></li><li><blockquote><p>class_name: “计算机”,</p></blockquote></li><li><blockquote><p>number:8</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>};</p></blockquote></li><li><blockquote><p>obj.nickname = “齐天大圣”;</p></blockquote></li><li><blockquote><p>obj[“age”] = 500;</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>console.log(obj);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//1.将JavaScript对象转换为JSON格式的字符串</p></blockquote></li><li><blockquote><p>var jsonStr = JSON.stringify(obj);</p></blockquote></li><li><blockquote><p>console.log(jsonStr);</p></blockquote></li><li><blockquote><p>//2.将JSON格式的字符串转换为JavaScript对象</p></blockquote></li><li><blockquote><p>var hs = JSON.parse(jsonStr);</p></blockquote></li><li><blockquote><p>console.log(hs);</p></blockquote></li><li><blockquote><p></script><p></p></blockquote></li><li><blockquote></blockquote></li></ul></li><li><p>文件上传</p><ul><li>配置上传文件的解析器，如果发现你是二进制流的方式传递数据，那么会使用该解析器处理数据</li></ul></li><li><p>数据类型的转换</p><ul><li><p>日期类型的转换@@DateTimeFormat</p></li><li><blockquote><p>/**</p></blockquote></li><li><blockquote><ul><li>接收日期类型的客户端传递数据，简写方式</li></ul></blockquote></li><li><blockquote><ul><li>没有写注解，就写 2018/8/14 15:31:20</li></ul></blockquote></li><li><blockquote><ul><li>写了注解就按照他的格式来，如果没有写时间，你输入了时间也不会认</li></ul></blockquote></li><li><blockquote><ul><li>如果一个类中也有这样的属性，同时接收这个时间，注解里也要写格式</li></ul></blockquote></li><li><blockquote><p>*</p></blockquote></li><li><blockquote><ul><li>@return</li></ul></blockquote></li><li><blockquote><p>*/</p></blockquote></li><li><blockquote><p>@GetMapping(“/client01”)</p></blockquote></li><li><blockquote><p>public ModelAndView test01(</p></blockquote></li><li><blockquote><p>@DateTimeFormat(pattern = “yyyy-MM-dd HH:mm:ss”) Date mydate,</p></blockquote></li><li><blockquote><p>User user) {</p></blockquote></li><li><blockquote><p>System.out.println(mydate);</p></blockquote></li><li><blockquote><p>System.out.println(user);</p></blockquote></li><li><blockquote><p>return null;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>@InitBinder</p></li><li><blockquote><p>@InitBinder</p></blockquote></li><li><blockquote><p>public void init01(WebDataBinder binder) {</p></blockquote></li><li><blockquote><p>//监控要转换(String)的数据类型</p></blockquote></li><li><blockquote><p>binder.registerCustomEditor(String.class, /<em>匿名对象</em>/new PropertyEditorSupport() {</p></blockquote></li><li><blockquote><p>//重写了setAsText方法</p></blockquote></li><li><blockquote><p>@Override</p></blockquote></li><li><blockquote><p>public void setAsText(String text) throws IllegalArgumentException {</p></blockquote></li><li><blockquote><p>System.out.println(“之前接收的值—-“ + text);</p></blockquote></li><li><blockquote><p>//对数据重新处理赋值，赋值给形参user_name</p></blockquote></li><li><blockquote><p>this.setValue(“对数据处理之后的值—-“ + text + “悟空”);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>});</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//监控Integer类型</p></blockquote></li><li><blockquote><p>binder.registerCustomEditor(Integer.class, new PropertyEditorSupport() {</p></blockquote></li><li><blockquote><p>@Override</p></blockquote></li><li><blockquote><p>public void setAsText(String text) throws IllegalArgumentException {</p></blockquote></li><li><blockquote><p>System.out.println(text);</p></blockquote></li><li><blockquote><p>this.setValue(“999”);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>});</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li></ul><h3 id="客户端传递数据中文乱码"><a href="#客户端传递数据中文乱码" class="headerlink" title="客户端传递数据中文乱码"></a>客户端传递数据中文乱码</h3><ul><li><p>get请求</p><ul><li><p>tomcat7</p><ul><li><p>全局设置</p><ul><li><p>在tomcat里的sever.xml中修改</p></li><li><blockquote><connector connectiontimeout="20000" port="8080" protocol="HTTP/1.1" redirectport="8443"></connector></blockquote></li><li><blockquote><p>这一行加入URIEncoding=”UTF-8”</p></blockquote></li></ul></li><li><p>单项目设置</p></li><li><blockquote><p>user_name = new String(user_name.getBytes(“ISO8859-1”),”UTF-8”);</p></blockquote></li></ul></li><li><p>tomcat8</p><ul><li>默认为UTF-8，不需要修改</li></ul></li></ul></li><li><p>post请求</p><ul><li><p>在web.xml中配置过滤器</p></li><li><blockquote><!--1.解决POST请求的中文乱码问题--></blockquote></li><li><blockquote><filter></filter></blockquote></li><li><blockquote><p><filter-name>characterEncodingFilter</filter-name></p></blockquote></li><li><blockquote><p><filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class></p></blockquote></li><li><blockquote><!--设置过滤器的一些变量的值--></blockquote></li><li><blockquote><p><init-param></init-param></p></blockquote></li><li><blockquote><p><param-name>encoding</param-name></p></blockquote></li><li><blockquote><p><param-value>UTF-8</param-value></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p><init-param></init-param></p></blockquote></li><li><blockquote><p><param-name>forceRequestEncoding</param-name></p></blockquote></li><li><blockquote><p><param-value>true</param-value></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p><init-param></init-param></p></blockquote></li><li><blockquote><p><param-name>forceResponseEncoding</param-name></p></blockquote></li><li><blockquote><p><param-value>true</param-value></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p><filter-mapping></filter-mapping></p></blockquote></li><li><blockquote><p><filter-name>characterEncodingFilter</filter-name></p></blockquote></li><li><blockquote><p><url-pattern>/*</url-pattern></p></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li></ul><h3 id="服务端传递数据到客户端"><a href="#服务端传递数据到客户端" class="headerlink" title="服务端传递数据到客户端"></a>服务端传递数据到客户端</h3><ul><li><p>返回类型ModelAndView传递数据</p><ul><li><p>指明KEY</p></li><li><blockquote><p>@GetMapping(“/server02”)</p></blockquote></li><li><blockquote><p>public ModelAndView test02() {</p></blockquote></li><li><blockquote><p>ModelAndView mav = new ModelAndView();</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//        mav.addObject() 没有指明KEY</p></blockquote></li><li><blockquote><p>//一步一步的追源码，发现一个ModelMap的类实例化对象.用它的addAttribute方法添加，ModelMap又是继承了HashMap</p></blockquote></li><li><blockquote><p>mav.addObject(“title”, “通过ModelAndView传递数据”);</p></blockquote></li><li><blockquote><p>mav.addObject(“hs”, “中国和尚”);</p></blockquote></li><li><blockquote><p>mav.addObject(“class”, “计算机计科”);</p></blockquote></li><li><blockquote><p>mav.addObject(“number”, 11);</p></blockquote></li><li><blockquote><p>mav.setViewName(“jsp/result02”);    //请求转发，通过视图解析器</p></blockquote></li><li><blockquote><p>return mav;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>没有指明KEY，默认传递数据的KEY的名称为类名的首字母小写</p></li><li><blockquote><p>@GetMapping(“/server03”)</p></blockquote></li><li><blockquote><p>public ModelAndView test03() {</p></blockquote></li><li><blockquote><p>ModelAndView mav = new ModelAndView();</p></blockquote></li><li><blockquote><p>mav.addObject(“integer”, 100);</p></blockquote></li><li><blockquote><p>mav.addObject(200);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>mav.addObject(“string”, “字符串”);</p></blockquote></li><li><blockquote><p>mav.addObject(“悟空”);</p></blockquote></li><li><blockquote><p>//        规则：客户端获取没有加key的数据，默认key正常是数据对应的类型的首字母小写 Integer—integer  String—string</p></blockquote></li><li><blockquote><p>//      两个key一样的,只认最后一个</p></blockquote></li><li><blockquote><p>//        double是关键字，不能${double},只能${requestScope[“double”] }</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>double a = 123.123;</p></blockquote></li><li><blockquote><p>mav.addObject(a);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>User user = new User();</p></blockquote></li><li><blockquote><p>user.setMydate(new Date());</p></blockquote></li><li><blockquote><p>mav.addObject(user);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>mav.setViewName(“jsp/result03”);    //请求转发，通过视图解析器</p></blockquote></li><li><blockquote><p>return mav;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li><li><p>返回类型String传递数据</p><ul><li><p>Map</p></li><li><blockquote><p>@GetMapping(“/server04”)</p></blockquote></li><li><blockquote><p>public String test01(Map&lt;String,Object&gt; map) {</p></blockquote></li><li><blockquote><p>map.put(“title”, “Map在形参中定义，可以传递数据”);</p></blockquote></li><li><blockquote><p>map.put(“hs”, “123”);</p></blockquote></li><li><blockquote><p>map.put(“class”, “12222”);</p></blockquote></li><li><blockquote><p>map.put(“number”, 1111);</p></blockquote></li><li><blockquote><p>return “jsp/result04”;  //通过请求转发视图解析器</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>ModelMap</p></li><li><blockquote><p>@GetMapping(“/server05”)</p></blockquote></li><li><blockquote><p>public String test02(ModelMap modelMap) {</p></blockquote></li><li><blockquote><p>modelMap.addAttribute(“title”, “ModelMap进行传递数据”);</p></blockquote></li><li><blockquote><p>modelMap.addAttribute(“hs”, “123”);</p></blockquote></li><li><blockquote><p>modelMap.addAttribute(“class”, “12222”);</p></blockquote></li><li><blockquote><p>modelMap.addAttribute(“number”, 1111);</p></blockquote></li><li><blockquote><p>return “jsp/result04”;  //通过请求转发视图解析器</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>Model</p></li><li><blockquote><p>@GetMapping(“/server06”)</p></blockquote></li><li><blockquote><p>public String test03(Model model) {</p></blockquote></li><li><blockquote><p>model.addAttribute(“title”, “Model接口进行传递数据”);</p></blockquote></li><li><blockquote><p>model.addAttribute(“hs”, “123”);</p></blockquote></li><li><blockquote><p>model.addAttribute(“class”, “12222”);</p></blockquote></li><li><blockquote><p>model.addAttribute(“number”, 1111);</p></blockquote></li><li><blockquote><p>return “jsp/result04”;  //通过请求转发视图解析器</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li><li><p>@ResponseBody返回JSON数据格式</p><ul><li><p>返回JSON格式数据</p><ul><li><p>Map</p></li><li><blockquote><p>@GetMapping(“/json03”)</p></blockquote></li><li><blockquote><p>@ResponseBody   //把java数据转换为JSON的字符串 存在BUG(IE浏览器不好使，解决办法在springmvc.xml配置)</p></blockquote></li><li><blockquote><p>public Map&lt;String, Object&gt; test03() {</p></blockquote></li><li><blockquote><p>Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</p></blockquote></li><li><blockquote><p>map.put(“name”, “马老板”);</p></blockquote></li><li><blockquote><p>map.put(“sex”, “男”);</p></blockquote></li><li><blockquote><p>return map;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>List<map></map></p></li><li><blockquote><p>@GetMapping(“/json04”)</p></blockquote></li><li><blockquote><p>public @ResponseBody List&lt;Map&lt;String, Object&gt;&gt; test04() {</p></blockquote></li><li><blockquote><p>List&lt;Map&lt;String,Object&gt;&gt; tempList = new ArrayList&lt;Map&lt;String,Object&gt;&gt;();</p></blockquote></li><li><blockquote><p>Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();</p></blockquote></li><li><blockquote><p>map.put(“name”, “马老板”);</p></blockquote></li><li><blockquote><p>map.put(“sex”, “男”);</p></blockquote></li><li><blockquote><p>tempList.add(map);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>map = new HashMap&lt;String, Object&gt;();</p></blockquote></li><li><blockquote><p>map.put(“name”, “悟空”);</p></blockquote></li><li><blockquote><p>map.put(“sex”, “男”);</p></blockquote></li><li><blockquote><p>tempList.add(map);</p></blockquote></li><li><blockquote><p>return tempList;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li><li><p>IE浏览器的下载问题</p></li><li><blockquote><!--解决@ResponseBody在IE浏览器的BUG问题--></blockquote></li><li><blockquote><bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean></blockquote></li><li><blockquote><property name="prettyPrint" value="true"></property></blockquote></li><li><blockquote><property name="supportedMediaTypes"></property></blockquote></li><li><blockquote><list></list></blockquote></li><li><blockquote><value>text/html;charset=UTF-8</value></blockquote></li><li><blockquote><value>text/plan;charset=UTF-8</value></blockquote></li><li><blockquote><value>application/json;charset=UTF-8</value></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>返回日期格式的问题</p><ul><li><p>@JsonFormat</p></li><li><blockquote><p>需要在user的date属性下加注解</p></blockquote></li><li><blockquote><p>//    相放哪里就放哪里，pattern:格式，timezone:时区，这是设置东八区</p></blockquote></li><li><blockquote><p>//    @JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”)</p></blockquote></li><li><blockquote><p>Date mydate;</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//    @JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”,timezone = “GMT+8”)</p></blockquote></li><li><blockquote><p>//        @JsonFormat(pattern = “yyyy-MM-dd”,timezone = “GMT+8”)</p></blockquote></li><li><blockquote><p>public Date getMydate() {</p></blockquote></li><li><blockquote><p>return mydate;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>使用SpringMvc配置</p></li><li><blockquote><!--解决Jackson转换的日期问题，一劳永逸的办法，全局设置，但是和持久化类中的注解比，谁近更选择谁--></blockquote></li><li><blockquote><p><property name="objectMapper">  <!--property：xxx属性--></property></p></blockquote></li><li><blockquote><p><bean class="com.fasterxml.jackson.databind.ObjectMapper">  <!--bean：xx实例化了--></bean></p></blockquote></li><li><blockquote><property name="dateFormat"></property></blockquote></li><li><blockquote><bean class="java.text.SimpleDateFormat"></bean></blockquote></li><li><blockquote><!--yyyy-MM-dd HH:mm:ss只能这么写，如果不显示小时，就需要在持久化类中注解设置--></blockquote></li><li><blockquote><p><constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss">  <!--constructor-arg：xx构造函数--></constructor-arg></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li></ul></li></ul></li><li><p>前台如何接收</p></li><li><blockquote><h2>${title}</h2></blockquote></li><li><blockquote><h2>${requestScope.hs} –指明范围了的</h2></blockquote></li><li><blockquote><h2>${requestScope[“class”]}</h2></blockquote></li><li><blockquote><h2>${number} —默认情况下是从pageContext-&gt;request-&gt;session-&gt;application下开始寻找</h2></blockquote></li><li><blockquote><h2>${requestScope.integer }</h2></blockquote></li><li><blockquote><h2>${requestScope.string }</h2></blockquote></li><li><blockquote><h2>${requestScope[“double”] }—–因为double是关键字，所以不能.double</h2></blockquote></li><li><blockquote><h2>${requestScope.user.mydate }</h2></blockquote></li><li><blockquote><h2>${requestScope[“user”][“mydate”] }</h2></blockquote></li></ul><h3 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h3><ul><li><p>上传</p></li><li><blockquote><p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p></blockquote></li><li><blockquote><html></html></blockquote></li><li><blockquote><head></head></blockquote></li><li><blockquote><title>Title</title></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><body></body></blockquote></li><li><blockquote><h2>单文件上传</h2></blockquote></li><li><blockquote><form action="upload01" method="post" enctype="multipart/form-data" id="uploadForm"></form></blockquote></li><li><blockquote><p>标题：<input type="text" name="title"></p></blockquote></li><li><blockquote><p>文件：<input type="file" name="myfile" id="myfile"><br></p></blockquote></li><li><blockquote><button>文件上传</button></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><script type="text/javascript" src="resource/jquery.js"></script></blockquote></li><li><blockquote><script type="text/javascript"></blockquote></li><li><blockquote><p>$(function () {</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>//元素选择器</p></blockquote></li><li><blockquote><p>$(“button”).click(function () {</p></blockquote></li><li><blockquote><p>//1.获取上传文件的对象，是数组，获取的第一个</p></blockquote></li><li><blockquote><p>var myfile = $(“#myfile”).prop(“files”)[0];</p></blockquote></li><li><blockquote><p>//2.判断文件是否有</p></blockquote></li><li><blockquote><p>if (myfile) {</p></blockquote></li><li><blockquote><p>//3.获取文件名称</p></blockquote></li><li><blockquote><p>var fileName = myfile.name;</p></blockquote></li><li><blockquote><p>//4.获取文件的后缀名称</p></blockquote></li><li><blockquote><p>var ext = fileName.substring(fileName.lastIndexOf(“.”) + 1);</p></blockquote></li><li><blockquote><p>//5.设置允许上传的文件后缀名称</p></blockquote></li><li><blockquote><p>var allowFileTypes = [“jpg”, “png”, “gif”, “jpeg”, “dmp”, “rar”];</p></blockquote></li><li><blockquote><p>//6.设置一个标识，用来做判断</p></blockquote></li><li><blockquote><p>var flag = false;</p></blockquote></li><li><blockquote><p>//循环判断上传格式是否正确</p></blockquote></li><li><blockquote><p>for (var i = 0; i &lt; allowFileTypes.length; i++) {</p></blockquote></li><li><blockquote><p>if (ext == allowFileTypes[i]) {</p></blockquote></li><li><blockquote><p>flag = true;</p></blockquote></li><li><blockquote><p>break;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>if (!flag) {</p></blockquote></li><li><blockquote><p>alert(“您上传的文件格式不正确，允许的格式为：” + allowFileTypes.join(“  |  “));</p></blockquote></li><li><blockquote><p>return false;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>//7.判断文件的大小</p></blockquote></li><li><blockquote><p>if (myfile.size &gt; 20 <em> 1024 </em> 1024) {</p></blockquote></li><li><blockquote><p>alert(“您上传的文件过大，请重新选择”)</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>return false;</p></blockquote></li><li><blockquote><p>//8.表单提交</p></blockquote></li><li><blockquote><p>${“#uploadForm”}.submit();</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>else {</p></blockquote></li><li><blockquote><p>alert(“请选择您要上传的文件”);</p></blockquote></li><li><blockquote><p>return false;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>})</p></blockquote></li><li><blockquote><p>})</p></blockquote></li><li><blockquote><p></script><p></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote><ul><li><p>要求</p><ul><li>form表单传递数据</li><li>请求必须为POST请求</li><li>使用二进制流的方式传递数据 enctype=”multipart/form-data”</li><li>文件域 <input type="file" name="myfile"></li></ul></li><li><p>工具</p><ul><li><p>Servlet3.0</p></li><li><p>Commons-FileUpload</p></li><li><blockquote><p>@PostMapping(“/upload01”)</p></blockquote></li><li><blockquote><p>public ModelAndView test01(String title, MultipartFile myfile, HttpServletRequest request) throws IOException {</p></blockquote></li><li><blockquote><p>ModelAndView mav = new ModelAndView();</p></blockquote></li><li><blockquote><p>//        System.out.println(title);</p></blockquote></li><li><blockquote><p>//1.获取上传文件的名称</p></blockquote></li><li><blockquote><p>String fileName = myfile.getOriginalFilename();</p></blockquote></li><li><blockquote><p>mav.addObject(“fileName”, fileName);</p></blockquote></li><li><blockquote><p>//2.判断文件名称是否有值,isEmpty是这个字符串的length=0为true</p></blockquote></li><li><blockquote><p>if (!fileName.isEmpty()) {</p></blockquote></li><li><blockquote><p>//3.获取服务器的绝对路径</p></blockquote></li><li><blockquote><p>String path = request.getServletContext().getRealPath(“/upload”);</p></blockquote></li><li><blockquote><p>//4.建立联系</p></blockquote></li><li><blockquote><p>File folder = new File(path);</p></blockquote></li><li><blockquote><p>//5.判断该文件是否存在，不存在则创建文件夹</p></blockquote></li><li><blockquote><p>if (!folder.exists()) {</p></blockquote></li><li><blockquote><p>folder.mkdirs();    //创建文件夹</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>//6,获取上传文件的后缀名称</p></blockquote></li><li><blockquote><p>String ext = FilenameUtils.getExtension(fileName);</p></blockquote></li><li><blockquote><p>//7.创建新的文件名称</p></blockquote></li><li><blockquote><p>//String newFileName = UUID.randomUUID().toString() + “.” + ext;</p></blockquote></li><li><blockquote><p>//或者用时间戳创建名称</p></blockquote></li><li><blockquote><p>String newFileName = new Date().getTime() + “_” + new Random().nextInt(100000) + “.” + ext;</p></blockquote></li><li><blockquote><p>mav.addObject(“newFileName”, newFileName);</p></blockquote></li><li><blockquote><p>//            System.out.println(newFileName);</p></blockquote></li><li><blockquote><p>//8.文件上传，File.separator为斜线</p></blockquote></li><li><blockquote><p>myfile.transferTo(new File(path + File.separator + newFileName));</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>mav.addObject(“hs”, “和尚”);</p></blockquote></li><li><blockquote><p>mav.setViewName(“jsp/result”);</p></blockquote></li><li><blockquote><p>/*System.out.println(“测试是否可以获取正常的数据:”+title);</p></blockquote></li><li><blockquote><p>System.out.println(“=====”);</p></blockquote></li><li><blockquote><p>System.out.println(“文件的MIME类型 :”+myfile.getContentType());</p></blockquote></li><li><blockquote><p>System.out.println(“文件NAME属性对应的值 :”+myfile.getName());</p></blockquote></li><li><blockquote><p>System.out.println(“上传文件的名称 :”+myfile.getOriginalFilename());</p></blockquote></li><li><blockquote><p>System.out.println(“上传文件的大小 :”+myfile.getSize());*/</p></blockquote></li><li><blockquote><p>return mav;</p></blockquote></li><li><blockquote><p>}</p></blockquote><ul><li>commons-fileupload-1.3.1.jar</li></ul></li></ul></li></ul></li><li><p>下载</p></li><li><blockquote><p>@GetMapping(“/download”)</p></blockquote></li><li><blockquote><p>public ResponseEntity&lt;byte[]&gt; test02(String newFileName, String fileName, HttpServletRequest request) throws IOException {</p></blockquote></li><li><blockquote><p>//获取服务端的绝对路径</p></blockquote></li><li><blockquote><p>String path = request.getServletContext().getRealPath(“/upload/“);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>HttpHeaders headers = new HttpHeaders();</p></blockquote></li><li><blockquote><p>//设置相应的内容为流</p></blockquote></li><li><blockquote><p>headers.setContentType(MediaType.TEXT_EVENT_STREAM);</p></blockquote></li><li><blockquote><p>//设置下载的名称–和中文乱码的问题</p></blockquote></li><li><blockquote><p>headers.setContentDispositionFormData(“attachment”,</p></blockquote></li><li><blockquote><p>new String(fileName.getBytes(“UTF-8”), “ISO8859-1”)</p></blockquote></li><li><blockquote><p>);</p></blockquote></li><li><blockquote><p>//找到文件</p></blockquote></li><li><blockquote><p>File file = new File(path + File.separator + newFileName);</p></blockquote></li><li><blockquote><p>return new ResponseEntity&lt;byte[]&gt;(FileUtils.readFileToByteArray(file),/<em>将文件转换为byte数组</em>/</p></blockquote></li><li><blockquote><p>headers,</p></blockquote></li><li><blockquote><p>HttpStatus.CREATED);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>需要的jar包</p><ul><li>commons-io-2.4.jar</li></ul></li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li><p>注解方式</p><ul><li>局部处理@ExceptionHandler</li><li>全局处理@ControllerAdvice+@ExceptionHandler</li></ul></li><li><p>XML方式</p></li><li><blockquote><!--6.统一的简单异常处理，监听所有的页面异常--></blockquote></li><li><blockquote><bean id="simpleMappingExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"></bean></blockquote></li><li><blockquote><!--出现异常，默认跳转的页面--></blockquote></li><li><blockquote><property name="defaultErrorView" value="jsp/error"></property></blockquote></li><li><blockquote><!--类似于这个mav.addObject("ex", ex);--></blockquote></li><li><blockquote><property name="exceptionAttribute" value="ex"></property></blockquote></li><li><blockquote><!--异常映射，若出现下列异常，就跳转相应的页面，不跳默认的--></blockquote></li><li><blockquote><property name="exceptionMappings"></property></blockquote></li><li><blockquote><props></props></blockquote></li><li><blockquote><prop key="ArithmeticException">jsp/error</prop></blockquote></li><li><blockquote><prop key="ArrayIndexOutOfBoundsException">jsp/error</prop></blockquote></li><li><blockquote><prop key="RuntimeException">jsp/error</prop></blockquote></li><li><blockquote><prop key="Exception">jsp/error</prop></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li><li><blockquote><p></p></blockquote></li></ul><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><ul><li>拦截器有且只能拦截Controller</li></ul><h2 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><ul><li>Spring是IoC(DI)和AOP的容器框架</li></ul><h3 id="IoC-控制反转：白话：让别人为我们服务，帮我new对象"><a href="#IoC-控制反转：白话：让别人为我们服务，帮我new对象" class="headerlink" title="IoC #控制反转：白话：让别人为我们服务，帮我new对象"></a>IoC #控制反转：白话：让别人为我们服务，帮我new对象</h3><ul><li>管理Bean的声明周期<ul><li>范围Scope<ul><li>默认情况下是单例模式single</li><li>多例模式prototype</li><li>request</li><li>session</li></ul></li></ul></li><li>实现方式有两种<ul><li><bean id="user" class="com.hs.model.User"></bean></li><li>注解方式<ul><li>@Component</li><li>@Controller</li><li>@Service</li><li>@Repository</li></ul></li></ul></li></ul><h3 id="DI-注入方式-白话：注入就是实例化，赋值"><a href="#DI-注入方式-白话：注入就是实例化，赋值" class="headerlink" title="DI(注入方式) #白话：注入就是实例化，赋值"></a>DI(注入方式) #白话：注入就是实例化，赋值</h3><ul><li><p>Setter方式–推荐</p><ul><li>XML方式<ul><li>com.hs.model.User类中的属性必须要提供set方法</li><li>形式如下<ul><li>&lt;property name=”属性名” value=”值”</li><li>ref引用对象</li><li>标准写法</li><li>缩写</li><li>p方式(p方式的引用)</li></ul></li><li>各个类型如何注入<ul><li>普通属性的值 value</li><li>集合 list/set/array</li><li>map/props</li><li>自定义类型<ul><li>内部使用<bean></bean></li><li>外部实例化，内部使用ref进行引用</li><li>外部实例化，使用p:xxx-ref引用</li></ul></li><li>接口注入实现类(接口回调)<ul><li>外部定义接口实现类实例化，内部使用<ref bean="">进行引用</ref></li><li>外部定义接口实现类实例化，使用p:xxx-ref引用</li></ul></li><li>util:list | set | map | properties—-不常用<ul><li>内部定义，内部引用</li><li>外部定义，p引用</li></ul></li></ul></li></ul></li><li>注解方式<ul><li>@Autowired–推荐<ul><li>@Qualifier(“bookDaoImpl”)，指明具体的id</li></ul></li><li>@Resource</li><li>概要: 区别<ul><li>@Autowired先按类型再按照名称查找</li><li>@Resource先按名称再按照类型查找</li></ul></li></ul></li></ul></li><li><p>构造函数注入方式</p><ul><li>XML方式<ul><li>标准写法</li><li>缩写</li><li>各个类型如何注入<ul><li>普通属性的值 value</li><li>集合 list/set/array</li><li>map/props</li><li>自定义类型<ul><li>内部使用<bean></bean></li><li>外部实例化，内部使用ref进行引用</li></ul></li><li>接口注入实现类(接口回调)<ul><li>外部定义接口实现类实例化，内部使用<ref bean="">进行引用</ref></li></ul></li></ul></li></ul></li><li>注解方式<ul><li>@Autowired–推荐</li><li>@Resource</li></ul></li></ul></li><li><p>@Value注解注入值</p></li><li><blockquote><p>@Value(“我是其他属性”)</p></blockquote></li><li><blockquote><p>private String anotherValue;</p></blockquote></li><li><blockquote><p>或者写在set方法上</p></blockquote><ul><li>注入普通字符串</li><li>注入操作系统属性</li><li>注入表达式运算结果</li><li>注入其他bean的属性。 </li><li>注入文件内容。 </li><li>注入网址信息。 </li><li>注入属性文件。</li></ul></li></ul><h3 id="AOP-白话：在不改变原来代码的基础上，增加新的功能，AOP的底层的实现就是使用的是Java的动态代理"><a href="#AOP-白话：在不改变原来代码的基础上，增加新的功能，AOP的底层的实现就是使用的是Java的动态代理" class="headerlink" title="AOP #白话：在不改变原来代码的基础上，增加新的功能，AOP的底层的实现就是使用的是Java的动态代理"></a>AOP #白话：在不改变原来代码的基础上，增加新的功能，AOP的底层的实现就是使用的是Java的动态代理</h3><ul><li><p>概念</p><ul><li>Aspect Oriented Programming with Spring 面向切面（方面）编程<ul><li>面向切面编程是面向对象编程的一个补充而已</li><li>白话：我的理解—-&gt;在不改变原来的代码的基础上增强（增加）新的功能</li></ul></li></ul></li><li><p>静态代理</p></li><li><p>动态代理</p></li><li><p>CGLIB动态代理</p></li><li><blockquote><p>proxy-target-class=”true”</p></blockquote></li><li><p>切面</p><ul><li>@Aspect</li><li><a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a></li></ul></li><li><p>连接点</p><ul><li>表达式 execution(<em> com.hs..service.</em>Service.*(**)</li></ul></li><li><p>切点</p><ul><li>@PointCut</li><li>&lt;aop:point-cut</li></ul></li><li><p>通知</p><ul><li>前置通知<ul><li>不管程序是否正确都会执行</li></ul></li><li>后置通知<ul><li>不管程序是否正确都会执行</li></ul></li><li>返回通知<ul><li>只有程序是正确的时候才会执行，并且可以获取运行后的数据</li></ul></li><li>异常通知<ul><li>只有程序是错误的时候才会执行</li></ul></li><li>环绕通知——-不推荐！！！</li></ul></li><li><p>代理对象</p></li></ul><h3 id="JdbcTemplate工具类"><a href="#JdbcTemplate工具类" class="headerlink" title="JdbcTemplate工具类"></a>JdbcTemplate工具类</h3><ul><li><p>配置数据源</p></li><li><blockquote><bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"></bean></blockquote></li><li><blockquote><property name="driverClassName" value="${jdbc.mysql.driver}"></property></blockquote></li><li><blockquote><property name="url" value="${jdbc.mysql.url}"></property></blockquote></li><li><blockquote><property name="username" value="${jdbc.mysql.username}"></property></blockquote></li><li><blockquote><property name="password" value="${jdbc.mysql.password}"></property></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>配置工具类</p></li><li><blockquote><bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"></bean></blockquote></li><li><blockquote><!--setter注入方式--></blockquote></li><li><blockquote><property name="dataSource" ref="druidDataSource"></property></blockquote></li><li><blockquote><!--构造函数赋值--></blockquote></li><li><blockquote><!--<constructor-arg name="dataSource" ref="druidDataSource"/>--></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>SQL语句</p><ul><li><p>查询</p><ul><li><p>返回Map数据</p></li><li><blockquote><p>@Test</p></blockquote></li><li><blockquote><p>public void test01() {</p></blockquote></li><li><blockquote><p>/<em>String sql = “select </em> from oa_user where user_id = 3”;</p></blockquote></li><li><blockquote><p>Map&lt;String, Object&gt; map = this.jdbcTemplate.queryForMap(sql);*/</p></blockquote></li><li><blockquote><p>String sql = “select * from oa_user where user_id = ?”;</p></blockquote></li><li><blockquote><p>Map&lt;String, Object&gt; map = jdbcTemplate.queryForMap(sql, 2);</p></blockquote></li><li><blockquote><p>System.out.println(map);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>返回List<map>数据</map></p></li><li><blockquote><p>@Test</p></blockquote></li><li><blockquote><p>public void test02() {</p></blockquote></li><li><blockquote><p>String sql = “select * from oa_user”;</p></blockquote></li><li><blockquote><p>System.out.println(jdbcTemplate.queryForList(sql));</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>返回一个值</p></li><li><blockquote><p>@Test</p></blockquote></li><li><blockquote><p>public void test03() {</p></blockquote></li><li><blockquote><p>String sql = “select count(*) from oa_user”;</p></blockquote></li><li><blockquote><p>System.out.println(jdbcTemplate.queryForObject(sql, Integer.class));</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>返回一个对象</p></li><li><blockquote><p>@Test</p></blockquote></li><li><blockquote><p>public void test04() {</p></blockquote></li><li><blockquote><p>String sql = “select * from oa_user where user_id = ?”;</p></blockquote></li><li><blockquote><p>User user = jdbcTemplate.queryForObject(sql, /<em>匿名内部类</em>/new RowMapper<user>() {</user></p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>@Override</p></blockquote></li><li><blockquote><p>public User mapRow(ResultSet rs, int rowNum) throws SQLException {</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>User user = new User();</p></blockquote></li><li><blockquote><p>user.setUser_id(rs.getInt(“user_id”));</p></blockquote></li><li><blockquote><p>user.setUser_name(rs.getString(“User_name”));</p></blockquote></li><li><blockquote><p>user.setSex(rs.getString(“sex”));</p></blockquote></li><li><blockquote><p>user.setMoney(rs.getBigDecimal(“money”));</p></blockquote></li><li><blockquote><p>user.setBirthday((Date) rs.getObject(“birthday”));</p></blockquote></li><li><blockquote><p>return user;</p></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><blockquote><p>}, 2);</p></blockquote></li><li><blockquote><p>System.out.println(user);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>}</p></blockquote></li><li><p>返回一个List&lt;对象&gt;</p></li><li><blockquote><p>@Test</p></blockquote></li><li><blockquote><p>public void test06() {</p></blockquote></li><li><blockquote><p>String sql = “select * from oa_user where user_name like concat(‘%’,?,’%’)”;</p></blockquote></li><li><blockquote><p>List<user> userList = jdbcTemplate.query(sql,/<em>处理一条一条的数据，，，<user>可以不用写</user></em>/new BeanPropertyRowMapper<user>(User.class), “沙僧”);</user></user></p></blockquote></li><li><blockquote><p>System.out.println(userList);</p></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li><li><p>增删改</p></li><li><blockquote><p>@Test</p></blockquote></li><li><blockquote><p>public void test07() {</p></blockquote></li><li><blockquote><p>String sql1 = “insert into oa_user(user_name,sex,money,birthday) values(?,?,?,?)”;</p></blockquote></li><li><blockquote><p>String sql2 = “update oa_user set user_name=?,sex=? where user_id = ?”;</p></blockquote></li><li><blockquote><p>String sql3 = “delete from oa_user where user_id = ?”;</p></blockquote></li><li><blockquote><p>int num1 = jdbcTemplate.update(sql1, “唐僧”, “男”, 220.00, “2018-8-9”);</p></blockquote></li><li><blockquote><p>int num2 = jdbcTemplate.update(sql2, “和尚”, “男”, 16);</p></blockquote></li><li><blockquote><p>int num3 = jdbcTemplate.update(sql3, 17);</p></blockquote></li><li><blockquote><p>System.out.println(num1+”–”+num2+”—“+num3);</p></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>}</p></blockquote></li></ul></li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li><p>事务</p><ul><li>概念<ul><li>一个工作单元由多个动作组成，只有动作全部正确的时候才能执行成功，如果有一个动作错了，其他的动作都是无效的（回滚）</li></ul></li><li>关键属性（ACID）<ul><li>原子性(atomicity):事务是一一个原子操作,由一系列动作组成，事务的原子性确保动作要么全部完成要么完全不起作用</li><li>一致性(consistency):一旦所有事务动作完成，事务就被提交，数据和资源就处于一种满足业务规则的一-致性状态中.</li><li>隔离性(isolation):可能有许多事务会同时处理相同的数据，因此每个事物都应该与其他事务隔离开来，防止数据损坏</li><li>持久性(durability): 一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，通常情况下，事务的结果被写到持久化存储器中</li></ul></li></ul></li><li><p>事务管理</p><ul><li>事务管理就是管理事务，用来确保数据的完整性和一致性.</li></ul></li><li><p>事务管理器</p><ul><li>就是对事务管理的实现，数据的完整性和一致性（数据库—&gt;数据源）</li></ul></li><li><p>传播性</p><ul><li>当你事务方法被另一个事务方法调用的时候，需要检查其事务的传播性</li></ul></li><li><p>调用过程</p><ul><li><p>XML版—推荐 #XML版本完成事务，需要跟AOP配合使用</p><ul><li><p>配置事务管理器</p></li><li><blockquote><bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"></bean></blockquote></li><li><blockquote><property name="dataSource" ref="druidDataSource"></property></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>告知哪些方法是需要被事务管理器进行管理的</p></li><li><blockquote><p>&lt;!–6.告知哪些方法是需要被事务管理器进行管理的，</p></blockquote></li><li><blockquote><p>等价于注解版，在方法上面写@Transactional</p></blockquote></li><li><blockquote><p>–&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:advice transaction-manager=”transactionManager” id=”serviceAdvice”&gt;</p></blockquote></li><li><blockquote><p><a href="tx:attributes" target="_blank" rel="noopener">tx:attributes</a></p></blockquote></li><li><blockquote><!--哪些方法，也可以设置属性，对应注解版的属性--></blockquote></li><li><blockquote><p>&lt;tx:method name=”get*” read-only=”true”/&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:method name=”load*” read-only=”true”/&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:method name=”list*” read-only=”true”/&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:method name=”find*” read-only=”true”/&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:method name=”query*” read-only=”true”/&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:method name=”sel*” read-only=”true”/&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:method name=”check*” read-only=”true”/&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:method name=”valid*” read-only=”true”/&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:method name=”login*” read-only=”true”/&gt;</p></blockquote></li><li><blockquote><!--这是方法都是查询的方法,设置为只读--></blockquote></li><li><blockquote></blockquote></li><li><blockquote><p>&lt;tx:method name=”*” propagation=”REQUIRED”/&gt;</p></blockquote></li><li><blockquote><p>&lt;/tx:attributes&gt;</p></blockquote></li><li><blockquote><p>&lt;/tx:advice&gt;</p></blockquote></li><li><p>配置AOP和tx:advice配合使用，告知我哪个层次下的方法会被事务管理器进行管理</p></li><li><blockquote><p>&lt;aop:config proxy-target-class=”true”&gt;</p></blockquote></li><li><blockquote><p>&lt;aop:pointcut id=”servicePointCut” expression=”execution(<em> com.hs..service.</em>Service.*(..))”/&gt;</p></blockquote></li><li><blockquote><p>&lt;aop:advisor advice-ref=”serviceAdvice” pointcut-ref=”servicePointCut”/&gt;</p></blockquote></li><li><blockquote><p>&lt;/aop:config&gt;</p></blockquote></li><li><p>启动事务注解</p></li><li><blockquote><p>&lt;tx:annotation-driven transaction-manager=”transactionManager” proxy-target-class=”true”/&gt;</p></blockquote></li></ul></li><li><p>注解版</p><ul><li><p>配置事务管理器</p></li><li><blockquote><bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"></bean></blockquote></li><li><blockquote><property name="dataSource" ref="druidDataSource"></property></blockquote></li><li><blockquote><p></p></blockquote></li><li><p>启动事务注解</p></li><li><blockquote><p>&lt;!–6.启动事务注解：告知该方法是事务方法(一个错，其他全部错)，而不是普通方法</p></blockquote></li><li><blockquote><p>transaction-manager=”transactionManager”可以省略</p></blockquote></li><li><blockquote><p>–&gt;</p></blockquote></li><li><blockquote><p>&lt;tx:annotation-driven transaction-manager=”transactionManager” proxy-target-class=”true”/&gt;</p></blockquote></li><li><p>在方法或者类的前面@Transactional，告之是事务方法</p></li><li><p>@Transactional的属性</p><ul><li>@Transactional(readOnly = true) //只读，一般只做查询操作使用</li><li>@Transactional(noRollbackForClassName = “RuntimeException”) //遇见这个异常，数据就不会回滚</li><li>传播性的行为<ul><li>默认：@Transactional(propagation = Propagation.REQUIRED)</li><li>@Transactional(propagation = Propagation.REQUIRES_NEW)</li></ul></li></ul></li></ul></li></ul></li></ul><p><em>XMind: ZEN - Trial Version</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyBatis,Spring,SpringMvc,单元测试框架，日志框架Log4J&lt;/p&gt;
    
    </summary>
    
      <category term="SSM学习总结" scheme="https://heshang.ink/categories/SSM%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="MyBatis" scheme="https://heshang.ink/tags/MyBatis/"/>
    
      <category term="框架" scheme="https://heshang.ink/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMvc" scheme="https://heshang.ink/tags/SpringMvc/"/>
    
      <category term="Spring" scheme="https://heshang.ink/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记（十五）Spring事务XML版-推荐</title>
    <link href="https://heshang.ink/2018/09/03/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89Spring%E4%BA%8B%E5%8A%A1XML%E7%89%88-%E6%8E%A8%E8%8D%90/"/>
    <id>https://heshang.ink/2018/09/03/Spring学习笔记（十五）Spring事务XML版-推荐/</id>
    <published>2018-09-03T12:30:06.000Z</published>
    <updated>2018-09-03T15:04:18.675Z</updated>
    
    <content type="html"><![CDATA[<p>在XML版中完成注解@Transactional的功能</p><a id="more"></a><p>源码获取<a href="https://github.com/heshangcode/Learn" target="_blank" rel="noopener">github</a></p><p>[TOC]</p><h3 id="1-项目结构，数据库表跟注解版一样"><a href="#1-项目结构，数据库表跟注解版一样" class="headerlink" title="1.项目结构，数据库表跟注解版一样"></a>1.项目结构，数据库表跟注解版一样</h3><h3 id="2-XML配置"><a href="#2-XML配置" class="headerlink" title="2.XML配置"></a>2.XML配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--5.配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"druidDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--6.告知哪些方法是需要被事务管理器进行管理的，</span></span><br><span class="line"><span class="comment">等价于注解版，在方法上面写@Transactional</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">id</span>=<span class="string">"serviceAdvice"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--哪些方法，也可以设置属性，对应注解版的属性--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"load*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"list*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"sel*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"check*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"valid*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"login*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这是方法都是查询的方法,设置为只读--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--7.配置AOP和tx:advice配合使用，告知我哪个层次下的方法会被事务管理器进行管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"servicePointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.hs..service.*Service.*(..))"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"serviceAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--8.启动事务注解：告知该方法是事务方法(一个错，其他全部错)，而不是普通方法</span></span><br><span class="line"><span class="comment"> transaction-manager="transactionManager"可以省略</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>意思就是：我监控的是com.hs..service.*Service：service层下以Service结尾的类下的：这些方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"load"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"sel"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"check"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"valid"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这是方法都是查询的方法,设置为只读--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-其他代码跟注解版一样，只是去掉-Transactional"><a href="#3-其他代码跟注解版一样，只是去掉-Transactional" class="headerlink" title="3.其他代码跟注解版一样，只是去掉@Transactional"></a>3.其他代码跟注解版一样，只是去掉@Transactional</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在XML版中完成注解@Transactional的功能&lt;/p&gt;
    
    </summary>
    
      <category term="Spring学习总结" scheme="https://heshang.ink/categories/Spring%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="SSM" scheme="https://heshang.ink/tags/SSM/"/>
    
      <category term="框架" scheme="https://heshang.ink/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://heshang.ink/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记（十四）Spring事务</title>
    <link href="https://heshang.ink/2018/09/03/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89Spring%E4%BA%8B%E5%8A%A1/"/>
    <id>https://heshang.ink/2018/09/03/Spring学习笔记（十四）Spring事务/</id>
    <published>2018-09-03T08:09:50.000Z</published>
    <updated>2019-05-26T13:56:01.961Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 事务、事务管理、事务管理器、事务的传播性、@Transactional</p><a id="more"></a><p>源码获取<a href="https://github.com/heshangcode/Learn" target="_blank" rel="noopener">github</a></p><p>[TOC]</p><h3 id="1-实例引入"><a href="#1-实例引入" class="headerlink" title="1.实例引入"></a>1.实例引入</h3><p>和尚经理跟某个书店沟通业务，王经理有一个需求需要买书的操作(暂时只能让买一本书，使用会员卡)</p><p>需求：买一本书===&gt;需要的步骤</p><p>和尚经理思考：</p><ul><li>查询书的价格</li><li>判断余额是否充足（获取余额的信息）</li><li>会员中的余额 — 书价格</li><li>判断库存是否充足（获取书库存数量）</li><li>库存书的数量 — 1</li></ul><h3 id="2-数据库表"><a href="#2-数据库表" class="headerlink" title="2.数据库表"></a>2.数据库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Table structure for tx_book</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `tx_book`;</span><br><span class="line">CREATE TABLE `tx_book` (</span><br><span class="line">  `isbn` varchar(255) NOT NULL,</span><br><span class="line">  `book_name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `price` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`isbn`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Records of tx_book</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">INSERT INTO `tx_book` VALUES (&apos;1001&apos;, &apos;西游记&apos;, &apos;50&apos;);</span><br><span class="line">INSERT INTO `tx_book` VALUES (&apos;1002&apos;, &apos;水浒&apos;, &apos;60&apos;);</span><br><span class="line">INSERT INTO `tx_book` VALUES (&apos;1003&apos;, &apos;三国&apos;, &apos;70&apos;);</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Table structure for tx_book_stock</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `tx_book_stock`;</span><br><span class="line">CREATE TABLE `tx_book_stock` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `isbn` varchar(255) DEFAULT NULL,</span><br><span class="line">  `stock` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Records of tx_book_stock</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">INSERT INTO `tx_book_stock` VALUES (&apos;1&apos;, &apos;1001&apos;, &apos;10&apos;);</span><br><span class="line">INSERT INTO `tx_book_stock` VALUES (&apos;2&apos;, &apos;1002&apos;, &apos;10&apos;);</span><br><span class="line">INSERT INTO `tx_book_stock` VALUES (&apos;3&apos;, &apos;1003&apos;, &apos;10&apos;);</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Table structure for tx_user</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `tx_user`;</span><br><span class="line">CREATE TABLE `tx_user` (</span><br><span class="line">  `user_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `account` varchar(255) DEFAULT NULL,</span><br><span class="line">  `balance` int(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`user_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Records of tx_user</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">INSERT INTO `tx_user` VALUES (&apos;1&apos;, &apos;wukong&apos;, &apos;100&apos;);</span><br><span class="line">INSERT INTO `tx_user` VALUES (&apos;2&apos;, &apos;bajie&apos;, &apos;200&apos;);</span><br><span class="line">INSERT INTO `tx_user` VALUES (&apos;3&apos;, &apos;tangseng&apos;, &apos;100&apos;);</span><br></pre></td></tr></table></figure><h3 id="3-项目结构"><a href="#3-项目结构" class="headerlink" title="3.项目结构"></a>3.项目结构</h3><h3 id="4-dao层"><a href="#4-dao层" class="headerlink" title="4.dao层"></a>4.dao层</h3><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过书的isbn查看这本书的价格</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> isbn</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getBookPriceByIsbn</span><span class="params">(String isbn)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 减去用户里的钱</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> price</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">updateUserBalance</span><span class="params">(String account, <span class="keyword">int</span> price)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 减少书的数量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> isbn</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">updateBookStock</span><span class="params">(String isbn)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询用户的余额</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getUserBalanceByAccount</span><span class="params">(String account)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询书的库存</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> isbn</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getBookStockByIsbn</span><span class="params">(String isbn)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">//&lt;bean id =bookDaoImpl &gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBookPriceByIsbn</span><span class="params">(String isbn)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">"select price from tx_book where isbn=?"</span>;</span><br><span class="line">      <span class="keyword">int</span> price = jdbcTemplate.queryForObject(sql, Integer.class, isbn);</span><br><span class="line">      <span class="keyword">return</span> price;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserBalance</span><span class="params">(String account, <span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">"update tx_user set balance = balance-? where account = ?"</span>;</span><br><span class="line">      jdbcTemplate.update(sql, price, account);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBookStock</span><span class="params">(String isbn)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">"update tx_book_stock set stock = stock-1 where isbn = ?"</span>;</span><br><span class="line">      jdbcTemplate.update(sql, isbn);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserBalanceByAccount</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">"select balance from tx_user where account=?"</span>;</span><br><span class="line">      <span class="keyword">int</span> balance = jdbcTemplate.queryForObject(sql, Integer.class, account);</span><br><span class="line">      <span class="keyword">return</span> balance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBookStockByIsbn</span><span class="params">(String isbn)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">"select stock from tx_book_stock where isbn=?"</span>;</span><br><span class="line">      <span class="keyword">int</span> stock = jdbcTemplate.queryForObject(sql, Integer.class, isbn);</span><br><span class="line">      <span class="keyword">return</span> stock;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Service层"><a href="#5-Service层" class="headerlink" title="5.Service层"></a>5.Service层</h3><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OneBookService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">buyOneBook</span><span class="params">(String account, String isbn)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>    <span class="comment">//&lt;bean id = "oneBookServiceImpl" class="xxx"&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneBookServiceImpl</span> <span class="keyword">implements</span> <span class="title">OneBookService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//建立联系</span></span><br><span class="line">   <span class="meta">@Autowired</span>  <span class="comment">//直接在属性上注解setter方式，也可以在setter方法上注解</span></span><br><span class="line">   <span class="comment">//指明具体的id</span></span><br><span class="line">   <span class="meta">@Qualifier</span>(<span class="string">"bookDaoImpl"</span>)</span><br><span class="line">   <span class="comment">//&lt;property name = "BookDao" ref="bookDaoImpl"&gt;</span></span><br><span class="line">   <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyOneBook</span><span class="params">(String account, String isbn)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//1.查询书的价格</span></span><br><span class="line">      <span class="keyword">int</span> price = bookDao.getBookPriceByIsbn(isbn);</span><br><span class="line">      <span class="comment">//2.判断会员余额是否充足</span></span><br><span class="line">      <span class="keyword">int</span> balance = bookDao.getUserBalanceByAccount(account);</span><br><span class="line">      <span class="keyword">if</span> (balance &lt; price) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"账号余额不足，请充值"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//3.会员中的余额 - 书价格</span></span><br><span class="line">      bookDao.updateUserBalance(account, price);</span><br><span class="line">      <span class="comment">//4.判断库存数量是否充足</span></span><br><span class="line">      <span class="keyword">int</span> stock = bookDao.getBookStockByIsbn(isbn);</span><br><span class="line">      <span class="keyword">if</span> (stock == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"书的库存数量不足"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//5.库存书的数量 - 1</span></span><br><span class="line">      bookDao.updateBookStock(isbn);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.service.OneBookService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneBookServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ApplicationContext ac;</span><br><span class="line">   <span class="keyword">private</span> OneBookService oneBookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">      oneBookService = ac.getBean(<span class="string">"oneBookServiceImpl"</span>, OneBookService.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBuyOneBookTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      oneBookService.buyOneBook(<span class="string">"wukong"</span>, <span class="string">"1001"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果把数据库里1001的库存改为0，然后再执行测试，就会发现wukong的钱扣了，但是控制台报错，书的库存数量不足，这样就引入了事务的概念！！</p><h3 id="7-什么是事务？"><a href="#7-什么是事务？" class="headerlink" title="7.什么是事务？"></a>7.什么是事务？</h3><ol><li><p>一个工作单元由多个动作组成，只有动作全部正确的时候才能执行成功，如果有一个动作错了，其他的动作都是无效的（回滚）(事务就是一系列的动作，它们被当做一 个单独的工作单元.这些动作要么全部完成，要么全部不起作用)</p></li><li><p>事务的四个关键属性(ACID)</p><ul><li>原子性(atomicity):事务是一一个原子操作,由一系列动作组成，事务的原子性确保动作要么全部完成要么完全不起作用</li><li>一致性(consistency):一旦所有事务动作完成，事务就被提交，数据和资源就处于一种满足业务规则的一-致性状态中.</li><li>隔离性(isolation):可能有许多事务会同时处理相同的数据，因此每个事物都应该与其他事务隔离开来，防止数据损坏。</li><li>持久性(durability): 一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，通常情况下，事务的结果被写到持久化存储器中</li></ul></li></ol><h3 id="8-事务管理"><a href="#8-事务管理" class="headerlink" title="8.事务管理"></a>8.事务管理</h3><p>事务管理就是管理事务，用来确保数据的完整性和一致性.</p><h3 id="9-事务管理器"><a href="#9-事务管理器" class="headerlink" title="9.事务管理器"></a>9.事务管理器</h3><p>就是对事务管理的实现，数据的完整性和一致性（数据库—&gt;数据源），MyBatis使用的是第一种<img src="https://i.loli.net/2019/05/26/5cea9a8fcc6bc16947.jpg" alt=""></p><h3 id="10-在XML配置事务，启动事务注解"><a href="#10-在XML配置事务，启动事务注解" class="headerlink" title="10.在XML配置事务，启动事务注解"></a>10.在XML配置事务，启动事务注解</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--5.配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"druidDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--6.启动事务注解：告知该方法是事务方法(一个错，其他全部错)，而不是普通方法</span></span><br><span class="line"><span class="comment"> transaction-manager="transactionManager"可以省略</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--操作数据库了的xml版本,没注释的是注解版本--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean id="bookDaoImpl" class="com.hs.dao.BookDaoImpl"&gt;</span></span><br><span class="line"><span class="comment">   &lt;property name="jdbcTemplate" ref="jdbcTemplate"/&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>在方法前面加入注解@Transactional，或者类前面加这个注解，告之这个类的方法都是事务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点石成金，标识这个方法是事务方法</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br></pre></td></tr></table></figure><p>再buyOneBook方法前面加入这个注解，再继续测试，就会发现，报书库存不足，但是wukong的钱没有扣。</p><h3 id="11-Transactional的属性"><a href="#11-Transactional的属性" class="headerlink" title="11.@Transactional的属性"></a>11.@Transactional的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Transactional</span></span><br><span class="line">   <span class="comment">//@Transactional(readOnly = true) //只读，一般只做查询操作使用</span></span><br><span class="line">   <span class="comment">//@Transactional(noRollbackForClassName = "RuntimeException") //遇见这个异常，数据就不会回滚</span></span><br><span class="line"><span class="comment">// @Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="comment">// @Transactional(propagation = Propagation.REQUIRED)</span></span><br></pre></td></tr></table></figure><h3 id="12-事务的传播性"><a href="#12-事务的传播性" class="headerlink" title="12.事务的传播性"></a>12.事务的传播性</h3><p>在上面的条件下，新增加如果买多本书这个功能</p><p>事务的传播性：当你事务方法被另一个事务方法调用的时候，需要检查其事务的传播性</p><ul><li><p>可能延续调用方法的事务</p></li><li><p>也可能开启新的事务</p><p><img src="https://i.loli.net/2019/05/26/5cea9ac6bedc247043.jpg" alt=""></p></li></ul><p>买多本书的接口：</p><p>MoreBookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MoreBookService</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 买多本书</span></span><br><span class="line"><span class="comment">    * String... 是可变长度参数列表，可以存多个</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> isbns</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">buyMoreBook</span><span class="params">(String account, String... isbns)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MoreBookServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreBookServiceImpl</span> <span class="keyword">implements</span> <span class="title">MoreBookService</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> OneBookService oneBookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Transactional</span>  <span class="comment">//包含在这里面的都是事务方法,事务的传播性</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyMoreBook</span><span class="params">(String account, String... isbns)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (isbns != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (String isbn : isbns) &#123;</span><br><span class="line">            oneBookService.buyOneBook(account,isbn);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>buyMoreBook这个事务方法，调用了buyOneBook这个事务方法，然后检查buyOneBook这个事务方法的传播性，在这个方法上面写@Transactional，默认为延续调用方法的事务，下面的注解在被调用的事务方法上写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Transactional(propagation = Propagation.REQUIRES_NEW)//本方法延续调用方法的事务</span></span><br><span class="line"><span class="comment">// @Transactional(propagation = Propagation.REQUIRED)//本方法开启一个新的事务</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/26/5cea9ac343bfc50229.jpg" alt=""></p><p><img src="https://i.loli.net/2019/05/26/5cea9ac4dc8ca90285.jpg" alt=""></p><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.service.MoreBookService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreBookServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ApplicationContext ac;</span><br><span class="line">   <span class="keyword">private</span> MoreBookService moreBookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">      moreBookService = ac.getBean(<span class="string">"moreBookServiceImpl"</span>, MoreBookService.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBuyMoreBookMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      moreBookService.buyMoreBook(<span class="string">"wukong"</span>,<span class="string">"1003"</span>,<span class="string">"1001"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 事务、事务管理、事务管理器、事务的传播性、@Transactional&lt;/p&gt;
    
    </summary>
    
      <category term="Spring学习总结" scheme="https://heshang.ink/categories/Spring%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="SSM" scheme="https://heshang.ink/tags/SSM/"/>
    
      <category term="框架" scheme="https://heshang.ink/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://heshang.ink/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记（十三）JdbcTemplate工具类的使用</title>
    <link href="https://heshang.ink/2018/09/03/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89JdbcTemplate%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://heshang.ink/2018/09/03/Spring学习笔记（十三）JdbcTemplate工具类的使用/</id>
    <published>2018-09-03T07:40:10.000Z</published>
    <updated>2019-05-26T13:53:59.396Z</updated>
    
    <content type="html"><![CDATA[<p>JdbcTemplate就是Spring框架给我们封装好的简单对数据库操作的工具类，返回Map数据，返回List_Map数据，返回一个值，返回一个对象，返回一个List&lt;对象&gt;，添加修改删除</p><a id="more"></a><p>源码获取<a href="https://github.com/heshangcode/Learn" target="_blank" rel="noopener">github</a></p><p>[TOC]</p><h3 id="1-介绍JdbcTemplate工具类"><a href="#1-介绍JdbcTemplate工具类" class="headerlink" title="1.介绍JdbcTemplate工具类"></a>1.介绍JdbcTemplate工具类</h3><p>Spring是一个IoC和AOP的容器框架，并且它是一站式开源框架<img src="https://i.loli.net/2019/05/26/5cea9a72e982e46778.jpg" alt=""></p><p>ORM是我们学过的MyBatis，JdbcTemplate就是Spring框架给我们封装好的简单对数据库操作的工具类，需要这个spring-jdbc.jar</p><h3 id="2-sql文件"><a href="#2-sql文件" class="headerlink" title="2.sql文件"></a>2.sql文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Table structure for oa_user</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `oa_user`;</span><br><span class="line">CREATE TABLE `oa_user` (</span><br><span class="line">  `user_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `sex` varchar(255) DEFAULT NULL,</span><br><span class="line">  `money` decimal(7,2) DEFAULT NULL,</span><br><span class="line">  `birthday` date DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`user_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Records of oa_user</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;1&apos;, &apos;悟空&apos;, &apos;男&apos;, &apos;888.00&apos;, null);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;2&apos;, &apos;八戒&apos;, &apos;男&apos;, &apos;999.00&apos;, null);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;3&apos;, &apos;天蓬元帅&apos;, &apos;女&apos;, &apos;1000.00&apos;, null);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;4&apos;, &apos;悟能&apos;, &apos;男&apos;, &apos;666.00&apos;, null);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;5&apos;, &apos;法悟法&apos;, &apos;女&apos;, &apos;544.00&apos;, null);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;6&apos;, &apos;悟&apos;, &apos;女&apos;, &apos;562.00&apos;, null);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;7&apos;, &apos;悟&apos;, &apos;女&apos;, &apos;562.00&apos;, null);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;14&apos;, &apos;嫦娥&apos;, &apos;女&apos;, &apos;1213.00&apos;, null);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;15&apos;, &apos;月兔&apos;, &apos;女&apos;, &apos;2113.00&apos;, null);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;16&apos;, &apos;和尚&apos;, &apos;男&apos;, &apos;455.00&apos;, &apos;2018-08-05&apos;);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;18&apos;, &apos;沙僧&apos;, &apos;男&apos;, &apos;455.00&apos;, &apos;2018-08-05&apos;);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;19&apos;, &apos;唐僧&apos;, &apos;男&apos;, &apos;220.00&apos;, &apos;2018-08-09&apos;);</span><br><span class="line">INSERT INTO `oa_user` VALUES (&apos;20&apos;, &apos;唐僧&apos;, &apos;男&apos;, &apos;220.00&apos;, &apos;2018-08-09&apos;);</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Table structure for skill</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `skill`;</span><br><span class="line">CREATE TABLE `skill` (</span><br><span class="line">  `skill_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `skill_name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `num` int(11) DEFAULT NULL,</span><br><span class="line">  `fk_teacher_id` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`skill_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Records of skill</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">INSERT INTO `skill` VALUES (&apos;2&apos;, &apos;JS&apos;, &apos;75&apos;, null);</span><br><span class="line">INSERT INTO `skill` VALUES (&apos;7&apos;, &apos;CSS&apos;, &apos;66&apos;, null);</span><br><span class="line">INSERT INTO `skill` VALUES (&apos;8&apos;, &apos;java&apos;, &apos;66&apos;, null);</span><br><span class="line">INSERT INTO `skill` VALUES (&apos;9&apos;, &apos;vue&apos;, &apos;56&apos;, &apos;9999&apos;);</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Table structure for sys_role</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `sys_role`;</span><br><span class="line">CREATE TABLE `sys_role` (</span><br><span class="line">  `role_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `role_name` varchar(32) DEFAULT NULL,</span><br><span class="line">  `role_key` varchar(32) DEFAULT NULL,</span><br><span class="line">  `status` int(1) DEFAULT &apos;1&apos; COMMENT &apos;1可用 -1禁用&apos;,</span><br><span class="line">  PRIMARY KEY (`role_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Records of sys_role</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">INSERT INTO `sys_role` VALUES (&apos;-100&apos;, &apos;超级管理员&apos;, &apos;ADMIN&apos;, &apos;1&apos;);</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Table structure for sys_user</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `sys_user`;</span><br><span class="line">CREATE TABLE `sys_user` (</span><br><span class="line">  `user_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `account` varchar(32) NOT NULL,</span><br><span class="line">  `password` varchar(128) NOT NULL,</span><br><span class="line">  `user_name` varchar(32) DEFAULT &apos;&apos;,</span><br><span class="line">  `status` int(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;1可用 -1删除  2禁用&apos;,</span><br><span class="line">  `login_time` datetime DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `ip` varchar(128) DEFAULT NULL,</span><br><span class="line">  `fk_role_id` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`user_id`),</span><br><span class="line">  KEY `fk_role_id` (`fk_role_id`),</span><br><span class="line">  CONSTRAINT `sys_user_ibfk_1` FOREIGN KEY (`fk_role_id`) REFERENCES `sys_role` (`role_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">-- Records of sys_user</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">INSERT INTO `sys_user` VALUES (&apos;-999&apos;, &apos;super&apos;, &apos;super&apos;, &apos;唐僧&apos;, &apos;1&apos;, &apos;2018-07-28 18:47:39&apos;, null, &apos;-100&apos;);</span><br><span class="line">INSERT INTO `sys_user` VALUES (&apos;-888&apos;, &apos;admin&apos;, &apos;admin&apos;, &apos;悟空&apos;, &apos;1&apos;, &apos;2018-07-03 18:48:21&apos;, null, &apos;-100&apos;);</span><br></pre></td></tr></table></figure><h3 id="3-实例化该工具类"><a href="#3-实例化该工具类" class="headerlink" title="3.实例化该工具类"></a>3.实例化该工具类</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> 赋值/&gt;</span></span><br><span class="line">    ------</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-配置数据源"><a href="#4-配置数据源" class="headerlink" title="4.配置数据源"></a>4.配置数据源</h3><p>数据源就是连接数据，而以后工作当中我们推荐使用“连接池”，</p><h4 id="什么是连接池？"><a href="#什么是连接池？" class="headerlink" title="什么是连接池？"></a>什么是连接池？</h4><p>我的理解为预先建立好一堆Connection，使用时候从池中获取，不适应不是销毁而是把连接再次放回到池中</p><h4 id="连接池的工作原理？"><a href="#连接池的工作原理？" class="headerlink" title="连接池的工作原理？"></a>连接池的工作原理？</h4><p>Java代码如何实现–&gt;Map/List 存Connection</p><h4 id="开源的连接池有哪些？"><a href="#开源的连接池有哪些？" class="headerlink" title="开源的连接池有哪些？"></a>开源的连接池有哪些？</h4><p>C3p0、dbcp、德鲁伊druid(阿里巴巴的)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- destroy-method="close"销毁的方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--4.配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"druidDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/cy42_mss"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--5.配置工具类JdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--setter注入方式--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"druidDataSource"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--构造函数赋值--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;constructor-arg name="dataSource" ref="druidDataSource"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-User-java"><a href="#5-User-java" class="headerlink" title="5.User.java"></a>5.User.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer user_id;</span><br><span class="line">   <span class="keyword">private</span> String user_name;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line">   <span class="comment">//钱用BigDecimal</span></span><br><span class="line">   <span class="keyword">private</span> BigDecimal money;</span><br><span class="line">   <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> money;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(BigDecimal money)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.money = money;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> birthday;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getUser_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user_id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_id</span><span class="params">(Integer user_id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.user_id = user_id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUser_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user_name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_name</span><span class="params">(String user_name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.user_name = user_name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> sex;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">            <span class="string">"user_id="</span> + user_id +</span><br><span class="line">            <span class="string">", user_name='"</span> + user_name + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", money="</span> + money +</span><br><span class="line">            <span class="string">", birthday="</span> + birthday +</span><br><span class="line">            <span class="string">'&#125;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-查询操作-预处理"><a href="#6-查询操作-预处理" class="headerlink" title="6.查询操作(预处理)"></a>6.查询操作(预处理)</h3><h4 id="1-返回Map数据"><a href="#1-返回Map数据" class="headerlink" title="1.返回Map数据"></a>1.返回Map数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.model.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ApplicationContext ac;</span><br><span class="line">   <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">      jdbcTemplate = ac.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 返回Map数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">/*String sql = "select * from oa_user where user_id = 3";</span></span><br><span class="line"><span class="comment">      Map&lt;String, Object&gt; map = this.jdbcTemplate.queryForMap(sql);*/</span></span><br><span class="line">      String sql = <span class="string">"select * from oa_user where user_id = ?"</span>;</span><br><span class="line">      Map&lt;String, Object&gt; map = jdbcTemplate.queryForMap(sql, <span class="number">2</span>);</span><br><span class="line">      System.out.println(map);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-返回List-Map数据"><a href="#2-返回List-Map数据" class="headerlink" title="2.返回List_Map数据"></a>2.返回List_Map数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回List_Map数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   String sql = <span class="string">"select * from oa_user"</span>;</span><br><span class="line">   System.out.println(jdbcTemplate.queryForList(sql));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-返回一个值"><a href="#3-返回一个值" class="headerlink" title="3.返回一个值"></a>3.返回一个值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   String sql = <span class="string">"select count(*) from oa_user"</span>;</span><br><span class="line">   System.out.println(jdbcTemplate.queryForObject(sql, Integer.class));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-返回一个对象"><a href="#4-返回一个对象" class="headerlink" title="4.返回一个对象"></a>4.返回一个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   String sql = <span class="string">"select * from oa_user where user_id = ?"</span>;</span><br><span class="line">   User user = jdbcTemplate.queryForObject(sql, <span class="comment">/*匿名内部类*/</span><span class="keyword">new</span> RowMapper&lt;User&gt;() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">         User user = <span class="keyword">new</span> User();</span><br><span class="line">         user.setUser_id(rs.getInt(<span class="string">"user_id"</span>));</span><br><span class="line">         user.setUser_name(rs.getString(<span class="string">"User_name"</span>));</span><br><span class="line">         user.setSex(rs.getString(<span class="string">"sex"</span>));</span><br><span class="line">         user.setMoney(rs.getBigDecimal(<span class="string">"money"</span>));</span><br><span class="line">         user.setBirthday((Date) rs.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">         <span class="keyword">return</span> user;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;, <span class="number">2</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-返回一个List-lt-对象-gt"><a href="#5-返回一个List-lt-对象-gt" class="headerlink" title="5.返回一个List&lt;对象&gt;"></a>5.返回一个List&lt;对象&gt;</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个List&lt;对象&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   String sql = <span class="string">"select * from oa_user where user_name like concat('%',?,'%')"</span>;</span><br><span class="line">   List&lt;User&gt; userList = jdbcTemplate.query(sql,<span class="comment">/*处理一条一条的数据*/</span><span class="keyword">new</span> UserRowMapper(), <span class="string">"沙僧"</span>);</span><br><span class="line">   System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把匿名内部类提出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对于外面那个类来说，这是一个内部类，外面那个类对于这个类来说，是外部类</span></span><br><span class="line"><span class="comment"> * 百度什么是内部类和特种？</span></span><br><span class="line"><span class="comment"> * private使这个类只能被这个类使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">      user.setUser_id(rs.getInt(<span class="string">"user_id"</span>));</span><br><span class="line">      user.setUser_name(rs.getString(<span class="string">"User_name"</span>));</span><br><span class="line">      user.setSex(rs.getString(<span class="string">"sex"</span>));</span><br><span class="line">      user.setMoney(rs.getBigDecimal(<span class="string">"money"</span>));</span><br><span class="line">      user.setBirthday((Date) rs.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-返回一个List-lt-对象-gt-——自动映射，类属性和查询的字段名字一样"><a href="#6-返回一个List-lt-对象-gt-——自动映射，类属性和查询的字段名字一样" class="headerlink" title="6.返回一个List&lt;对象&gt;——自动映射，类属性和查询的字段名字一样"></a>6.返回一个List&lt;对象&gt;——自动映射，类属性和查询的字段名字一样</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个List&lt;对象&gt;——自动映射，类属性和查询的字段名字一样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   String sql = <span class="string">"select * from oa_user where user_name like concat('%',?,'%')"</span>;</span><br><span class="line">   List&lt;User&gt; userList = jdbcTemplate.query(sql,<span class="comment">/*处理一条一条的数据，，，&lt;User&gt;可以不用写*/</span><span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class), <span class="string">"沙僧"</span>);</span><br><span class="line">   System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-添加修改删除"><a href="#7-添加修改删除" class="headerlink" title="7.添加修改删除"></a>7.添加修改删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加修改删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   String sql1 = <span class="string">"insert into oa_user(user_name,sex,money,birthday) values(?,?,?,?)"</span>;</span><br><span class="line">   String sql2 = <span class="string">"update oa_user set user_name=?,sex=? where user_id = ?"</span>;</span><br><span class="line">   String sql3 = <span class="string">"delete from oa_user where user_id = ?"</span>;</span><br><span class="line">   <span class="keyword">int</span> num1 = jdbcTemplate.update(sql1, <span class="string">"唐僧"</span>, <span class="string">"男"</span>, <span class="number">220.00</span>, <span class="string">"2018-8-9"</span>);</span><br><span class="line">   <span class="keyword">int</span> num2 = jdbcTemplate.update(sql2, <span class="string">"和尚"</span>, <span class="string">"男"</span>, <span class="number">16</span>);</span><br><span class="line">   <span class="keyword">int</span> num3 = jdbcTemplate.update(sql3, <span class="number">17</span>);</span><br><span class="line">   System.out.println(num1+<span class="string">"--"</span>+num2+<span class="string">"---"</span>+num3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JdbcTemplate就是Spring框架给我们封装好的简单对数据库操作的工具类，返回Map数据，返回List_Map数据，返回一个值，返回一个对象，返回一个List&amp;lt;对象&amp;gt;，添加修改删除&lt;/p&gt;
    
    </summary>
    
      <category term="Spring学习总结" scheme="https://heshang.ink/categories/Spring%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="SSM" scheme="https://heshang.ink/tags/SSM/"/>
    
      <category term="框架" scheme="https://heshang.ink/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://heshang.ink/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记（十二）AOP的XML方式cglib代理-重点掌握</title>
    <link href="https://heshang.ink/2018/09/03/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89AOP%E7%9A%84XML%E6%96%B9%E5%BC%8Fcglib%E4%BB%A3%E7%90%86-%E9%87%8D%E7%82%B9%E6%8E%8C%E6%8F%A1/"/>
    <id>https://heshang.ink/2018/09/03/Spring学习笔记（十二）AOP的XML方式cglib代理-重点掌握/</id>
    <published>2018-09-03T07:24:09.000Z</published>
    <updated>2019-05-26T13:53:21.948Z</updated>
    
    <content type="html"><![CDATA[<p>切点，切面，如何定义切点，前置、后置、放回、异常、环绕通知的XML版</p><a id="more"></a><p>源码获取<a href="https://github.com/heshangcode/Learn" target="_blank" rel="noopener">github</a></p><p>[TOC]</p><h3 id="1-项目结构（jar包跟上个一样）"><a href="#1-项目结构（jar包跟上个一样）" class="headerlink" title="1.项目结构（jar包跟上个一样）"></a>1.项目结构（jar包跟上个一样）</h3><p><img src="https://i.loli.net/2019/05/26/5cea9a4fa9a9284685.jpg" alt=""></p><h3 id="2-核心业务代码"><a href="#2-核心业务代码" class="headerlink" title="2.核心业务代码"></a>2.核心业务代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对外提供的核心业务，完成了加法/减法/乘法运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArithmeticService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 核心代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArithmeticService</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//核心代码</span></span><br><span class="line">      <span class="keyword">int</span> result = x + y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = x - y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = x * y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = x / y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-切面"><a href="#3-切面" class="headerlink" title="3.切面"></a>3.切面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="comment">//@Aspect //标记这是切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"测试出order属性的作用"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1.前置通知</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取get</span></span><br><span class="line">      System.out.println(<span class="string">"==前置通知=="</span>);</span><br><span class="line">      System.out.println(Arrays.asList(jp.getArgs()));</span><br><span class="line">      System.out.println(jp.getSignature().getName());</span><br><span class="line">      System.out.println(jp.getTarget().getClass().getName());</span><br><span class="line">      System.out.println(<span class="string">"==前置通知=="</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.后置通知</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"==后置增强=="</span>);</span><br><span class="line">      System.out.println(Arrays.asList(jp.getArgs()));</span><br><span class="line">      System.out.println(jp.getSignature().getName());</span><br><span class="line">      System.out.println(jp.getTarget().getClass().getName());</span><br><span class="line">      System.out.println(<span class="string">"==后置增强=="</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//3.返回通知</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">(JoinPoint jp, <span class="keyword">int</span> hs)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"==返回通知=="</span>);</span><br><span class="line">      System.out.println(<span class="string">"程序正常运行，正确的运行结果为==&gt;"</span> + hs);</span><br><span class="line">      System.out.println(<span class="string">"==返回通知=="</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//4.异常通知</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">(JoinPoint jp, ArithmeticException hs)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"==异常通知=="</span>);</span><br><span class="line">      System.out.println(<span class="string">"程序运行错误==&gt;"</span> + hs);</span><br><span class="line">      System.out.println(<span class="string">"==异常通知=="</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-XML里切点，切面"><a href="#4-XML里切点，切面" class="headerlink" title="4.XML里切点，切面"></a>4.XML里切点，切面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--1.启动Spring注解--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--2.扫描--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hs"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Spring提供了多种AOP的实现方式，但是我们只用第三方的AOP标准--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--3.启动AOP注解：false是使用默认的java代理，true是使用CGLIB代理--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--4.AOP的XML配置方式,false是使用默认的java代理，true是使用CGLIB代理--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--实例化那个类，在切面引用的时候好用--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.hs.service.aspect.Logger"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger111"</span> <span class="attr">class</span>=<span class="string">"com.hs.service.aspect.Logger"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--定义切点，可以把切点放在外面作为公共的，注意pointcut aspect的顺序，对应注解版的@PointCut(value = "execution(* com.hs..service.*Service.*(..))")--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"servicePointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.hs..service.*Service.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--定义切面，对应注解版的@Aspect,order,定义切面的执行顺序，不写默认为从上到下执行--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger111"</span> <span class="attr">order</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--定义切点，对应注解版的@PointCut(value = "execution(* com.hs..service.*Service.*(..))")--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;aop:pointcut id="servicePointCut" expression="execution(* com.hs..service.*Service.*(..))"/&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"test01"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePointCut"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--定义切面，对应注解版的@Aspect--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span> <span class="attr">order</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--定义切点，对应注解版的@PointCut(value = "execution(* com.hs..service.*Service.*(..))")--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;aop:pointcut id="servicePointCut" expression="execution(* com.hs..service.*Service.*(..))"/&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"test05"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePointCut"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先得实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.hs.service.aspect.Logger"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>切点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"servicePointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.hs..service.*Service.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>切面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger111"</span> <span class="attr">order</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--定义切点，对应注解版的@PointCut(value = "execution(* com.hs..service.*Service.*(..))")--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;aop:pointcut id="servicePointCut" expression="execution(* com.hs..service.*Service.*(..))"/&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"test01"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceTest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ArithmeticService arithmeticService;</span><br><span class="line">   <span class="keyword">private</span> ApplicationContext ac;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">      <span class="keyword">this</span>.arithmeticService = <span class="keyword">this</span>.ac.getBean(<span class="string">"arithmeticServiceImpl"</span>, ArithmeticService.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="keyword">this</span>.arithmeticService.div(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">      System.out.println(<span class="string">"运行的结果："</span>+ result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;切点，切面，如何定义切点，前置、后置、放回、异常、环绕通知的XML版&lt;/p&gt;
    
    </summary>
    
      <category term="Spring学习总结" scheme="https://heshang.ink/categories/Spring%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="SSM" scheme="https://heshang.ink/tags/SSM/"/>
    
      <category term="框架" scheme="https://heshang.ink/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://heshang.ink/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记（十一）AOP的注解方式cglib代理</title>
    <link href="https://heshang.ink/2018/09/03/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89AOP%E7%9A%84%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8Fcglib%E4%BB%A3%E7%90%86/"/>
    <id>https://heshang.ink/2018/09/03/Spring学习笔记（十一）AOP的注解方式cglib代理/</id>
    <published>2018-09-03T06:32:16.000Z</published>
    <updated>2019-05-26T13:56:50.228Z</updated>
    
    <content type="html"><![CDATA[<p>JDK动态代理与CGLib动态代理均是实现Spring AOP的基础，切点，切面，如何定义切点，前置、后置、放回、异常、环绕通知</p><a id="more"></a><p>源码获取<a href="https://github.com/heshangcode/Learn" target="_blank" rel="noopener">github</a></p><p>[TOC]</p><h3 id="1-切点、切面"><a href="#1-切点、切面" class="headerlink" title="1.切点、切面"></a>1.切点、切面</h3><p><img src="https://i.loli.net/2019/05/26/5cea9b12c0d0879436.jpg" alt=""></p><ol><li>红色的地方就是切面，增加额外的功能</li><li>连接点+增加功能的位置 = 切点</li></ol><h3 id="2-项目结构"><a href="#2-项目结构" class="headerlink" title="2.项目结构"></a>2.项目结构</h3><p><img src="https://i.loli.net/2019/05/26/5cea9b116b7d491093.jpg" alt=""></p><h3 id="3-jar包"><a href="#3-jar包" class="headerlink" title="3.jar包"></a>3.jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-expression --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-tx --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--新增的jar--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/aopalliance/aopalliance --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-核心配置文件beans-xml"><a href="#4-核心配置文件beans-xml" class="headerlink" title="4.核心配置文件beans.xml"></a>4.核心配置文件beans.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--1.启动Spring注解--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--2.扫描--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hs"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Spring提供了多种AOP的实现方式，但是我们只用第三方的AOP标准方式--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--3.启动AOP注解，false是使用默认的java代理，true是使用CGLIB代理--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-核心代码"><a href="#5-核心代码" class="headerlink" title="5.核心代码"></a>5.核心代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对外提供的核心业务，完成了加法/减法/乘法运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArithmeticService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 核心代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArithmeticService</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//核心代码</span></span><br><span class="line">      <span class="keyword">int</span> result = x + y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = x - y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = x * y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = x / y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-定义切面"><a href="#6-定义切面" class="headerlink" title="6.定义切面"></a>6.定义切面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标记这是切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在你运行方法之前执行，并且监控的是接口的执行Add方法，value可以省略</span></span><br><span class="line">   <span class="meta">@Before</span>(value = <span class="string">"execution(int com.hs.service.ArithmeticService.add(int ,int))"</span>)</span><br><span class="line">   <span class="comment">//这句话的意思，</span></span><br><span class="line">   <span class="comment">//执行返回类型为int，com.hs.service.ArithmeticService接口下的add方法，传递的两个参数类型为int，int</span></span><br><span class="line">   <span class="comment">//简单理解为，接口里写的方法，只是少了变量值   int add(int x, int y);</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"@Before在程序之前运行"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceTest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ArithmeticService arithmeticService;</span><br><span class="line">   <span class="keyword">private</span> ApplicationContext ac;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">      <span class="keyword">this</span>.arithmeticService = <span class="keyword">this</span>.ac.getBean(<span class="string">"arithmeticServiceImpl"</span>, ArithmeticService.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="keyword">this</span>.arithmeticService.add(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">      System.out.println(<span class="string">"运行的结果："</span>+ result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><p>@Before在程序之前运行<br>运行的结果：3</p><h3 id="7-如何定义注解切点说明"><a href="#7-如何定义注解切点说明" class="headerlink" title="7.如何定义注解切点说明"></a>7.如何定义注解切点说明</h3><h4 id="1-使用逻辑运算符"><a href="#1-使用逻辑运算符" class="headerlink" title="1.使用逻辑运算符"></a>1.使用逻辑运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(value = <span class="string">"execution(int com.hs.service.ArithmeticService.add(int ,int)) or execution(int com.hs.service.ArithmeticService.sub(int ,int))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"我可以使用逻辑运算符  &amp;&amp;(and) ||(or)"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-使用通配符——推荐"><a href="#2-使用通配符——推荐" class="headerlink" title="2.使用通配符——推荐"></a>2.使用通配符——推荐</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较推荐</span></span><br><span class="line"><span class="comment"> * 在execution表达式中可以使用通配符，但是请注意任意的表达式是 ..</span></span><br><span class="line"><span class="comment"> * 第一个*位置：代表返回任意的数据类型</span></span><br><span class="line"><span class="comment"> * ..表示任意的意思，而不是我们之前学习的**</span></span><br><span class="line"><span class="comment"> * 第二个* 监控的以Service结尾的类(接口)</span></span><br><span class="line"><span class="comment"> * 第三个* 监控接口或者类下的所有的方法</span></span><br><span class="line"><span class="comment"> * ..标识任意个参数类型或者参数的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Before</span>(value = <span class="string">"execution(* com.hs..*Service.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"我可以使用通配符"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-如何定义切点"><a href="#3-如何定义切点" class="headerlink" title="3.如何定义切点"></a>3.如何定义切点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如何定义切点(可以随意组合)</span></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution(int com.hs.service.ArithmeticService.add(int ,int))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPointCut</span><span class="params">()</span> </span>&#123; &#125;   <span class="comment">//切点的名称是“addPointCut()”</span></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution(int com.hs.service.ArithmeticService.sub(int ,int))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subPointCut</span><span class="params">()</span> </span>&#123; &#125;   <span class="comment">//切点的名称是“subPointCut()”</span></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution(int com.hs.service.ArithmeticService.mul(int ,int))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulPointCut</span><span class="params">()</span> </span>&#123; &#125;   <span class="comment">//切点的名称是“mulPointCut()”</span></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"addPointCut() || mulPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAndMulPointCut</span><span class="params">()</span> </span>&#123; &#125;<span class="comment">//切点的名称是“addAndMulPointCut()”</span></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution(* com.hs..service.*Service.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allMethodPointCut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Before   叫前置通知，也叫前置增强</span></span><br><span class="line"><span class="meta">@Before</span>(value = <span class="string">"addAndMulPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"如何定义切点"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-前置通知：不管程序是否正确都会执行"><a href="#8-前置通知：不管程序是否正确都会执行" class="headerlink" title="8.前置通知：不管程序是否正确都会执行"></a>8.前置通知：不管程序是否正确都会执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.前置通知(增强)特点：不管程序是否正确都会执行</span></span><br><span class="line"><span class="meta">@Before</span>(value = <span class="string">"allMethodPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"==前置通知=="</span>);</span><br><span class="line"><span class="comment">//获取get</span></span><br><span class="line">System.out.println(Arrays.asList(jp.getArgs()));</span><br><span class="line">System.out.println(jp.getSignature().getName());</span><br><span class="line">System.out.println(jp.getTarget().getClass().getName());</span><br><span class="line">System.out.println(<span class="string">"==前置通知=="</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-后置通知：不管程序是否正确都会执行"><a href="#9-后置通知：不管程序是否正确都会执行" class="headerlink" title="9.后置通知：不管程序是否正确都会执行"></a>9.后置通知：不管程序是否正确都会执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.后置通知(增强)特点：不管程序是否正确都会执行</span></span><br><span class="line"><span class="meta">@After</span>(value = <span class="string">"allMethodPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//获取get</span></span><br><span class="line">   System.out.println(<span class="string">"==后置增强=="</span>);</span><br><span class="line">   System.out.println(Arrays.asList(jp.getArgs()));</span><br><span class="line">   System.out.println(jp.getSignature().getName());</span><br><span class="line">   System.out.println(jp.getTarget().getClass().getName());</span><br><span class="line">   System.out.println(<span class="string">"==后置增强=="</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-返回通知-只有程序是正确的时候才会执行，并且可以获取运行后的数据"><a href="#10-返回通知-只有程序是正确的时候才会执行，并且可以获取运行后的数据" class="headerlink" title="10.返回通知:只有程序是正确的时候才会执行，并且可以获取运行后的数据"></a>10.返回通知:只有程序是正确的时候才会执行，并且可以获取运行后的数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.返回通知(增强):只有程序是正确的时候才会执行，并且可以获取运行后的数据</span></span><br><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"allMethodPointCut()"</span>,returning = <span class="string">"hs"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">(JoinPoint jp,<span class="keyword">int</span> hs)</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"==返回通知=="</span>);</span><br><span class="line">   System.out.println(<span class="string">"程序正常运行，正确的运行结果为==&gt;"</span>+hs);</span><br><span class="line">   System.out.println(<span class="string">"==返回通知=="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-异常通知：只有程序是错误的时候才会执行"><a href="#11-异常通知：只有程序是错误的时候才会执行" class="headerlink" title="11.异常通知：只有程序是错误的时候才会执行"></a>11.异常通知：只有程序是错误的时候才会执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.异常通知(增强)：只有程序是错误的时候才会执行，</span></span><br><span class="line"><span class="meta">@AfterThrowing</span>(value = <span class="string">"allMethodPointCut()"</span>,throwing = <span class="string">"hs"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">(JoinPoint jp,ArithmeticException hs)</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"==异常通知=="</span>);</span><br><span class="line">   System.out.println(<span class="string">"程序运行错误==&gt;"</span>+hs);</span><br><span class="line">   System.out.println(<span class="string">"==异常通知=="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-环绕通知"><a href="#12-环绕通知" class="headerlink" title="12.环绕通知"></a>12.环绕通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.环绕通知</span></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"allMethodPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">test09</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"写某个功能，前置通知"</span>);</span><br><span class="line">   Object result = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      result = pjp.proceed(); <span class="comment">//执行程序返回运行的结果</span></span><br><span class="line">      System.out.println(<span class="string">"写某个功能，返回通知"</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">      throwable.printStackTrace();</span><br><span class="line">      System.out.println(<span class="string">"写某个功能，异常通知"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(<span class="string">"写某个功能，后置通知"</span>);</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceTest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ArithmeticService arithmeticService;</span><br><span class="line">   <span class="keyword">private</span> ApplicationContext ac;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">      <span class="keyword">this</span>.arithmeticService = <span class="keyword">this</span>.ac.getBean(<span class="string">"arithmeticServiceImpl"</span>, ArithmeticService.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="keyword">this</span>.arithmeticService.add(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">      System.out.println(<span class="string">"运行的结果："</span>+ result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JDK动态代理与CGLib动态代理均是实现Spring AOP的基础，切点，切面，如何定义切点，前置、后置、放回、异常、环绕通知&lt;/p&gt;
    
    </summary>
    
      <category term="Spring学习总结" scheme="https://heshang.ink/categories/Spring%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="SSM" scheme="https://heshang.ink/tags/SSM/"/>
    
      <category term="框架" scheme="https://heshang.ink/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://heshang.ink/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记（十）AOP静态代理和动态代理说明</title>
    <link href="https://heshang.ink/2018/09/03/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89AOP%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%AF%B4%E6%98%8E/"/>
    <id>https://heshang.ink/2018/09/03/Spring学习笔记（十）AOP静态代理和动态代理说明/</id>
    <published>2018-09-03T05:55:34.000Z</published>
    <updated>2019-05-26T13:52:56.524Z</updated>
    
    <content type="html"><![CDATA[<p>实例分析，AOP的静态代理和动态代理</p><a id="more"></a><p>源码获取<a href="https://github.com/heshangcode/Learn" target="_blank" rel="noopener">github</a></p><p>[TOC]</p><h3 id="1-什么是AOP？"><a href="#1-什么是AOP？" class="headerlink" title="1.什么是AOP？"></a>1.什么是AOP？</h3><p>Aspect Oriented Programming with Spring 面向切面（方面）编程</p><ul><li>面向切面编程是面向对象编程的一个补充而已</li><li>白话：我的理解—-&gt;在不改变原来的代码的基础上增强（增加）新的功能</li></ul><h3 id="2-代码结构"><a href="#2-代码结构" class="headerlink" title="2.代码结构"></a>2.代码结构</h3><p><img src="https://i.loli.net/2019/05/26/5cea9a372fbf210108.jpg" alt=""></p><h3 id="3-情景描述引发静态代理"><a href="#3-情景描述引发静态代理" class="headerlink" title="3.情景描述引发静态代理"></a>3.情景描述引发静态代理</h3><p>如果现在让你完成一个2个数的四则运算</p><ul><li><p>核心业务完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对外提供的核心业务，完成了加法/减法/乘法/除法运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArithmeticService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 核心代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArithmeticService</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//核心代码</span></span><br><span class="line">      <span class="keyword">int</span> result = x + y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = x - y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = x * y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = x / y;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完成了，和尚—&gt;技术经理—&gt;定义接口，悟空程序员—&gt;接口实现类</p></li><li><p>交工客户龙王，龙王需要显示传递数据的信息功能—&gt;和尚—&gt;悟空完成客户需求，但是万一如果又不要这个功能呢，现在引出静态代理，在核心代码的基础上增加新的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增加的功能,采用静态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceLogImpl</span> <span class="keyword">implements</span> <span class="title">ArithmeticService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//声明一个核心代码类的变量，为了后面方便调用核心代码的功能</span></span><br><span class="line">   <span class="keyword">private</span> ArithmeticServiceImpl asc = <span class="keyword">new</span> ArithmeticServiceImpl();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//后增加的某个功能</span></span><br><span class="line">      System.out.println(<span class="string">"加法传递的参数===&gt;x="</span>+x+<span class="string">",y="</span>+y);</span><br><span class="line"><span class="comment">//    然后调用核心代码的功能</span></span><br><span class="line">      <span class="keyword">return</span> asc.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"减法传递的参数===&gt;x="</span>+x+<span class="string">",y="</span>+y);</span><br><span class="line">      <span class="keyword">return</span> asc.sub(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"乘法传递的参数===&gt;x="</span>+x+<span class="string">",y="</span>+y);</span><br><span class="line">      <span class="keyword">return</span> asc.mul(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"除法传递的参数===&gt;x="</span>+x+<span class="string">",y="</span>+y);</span><br><span class="line">      <span class="keyword">return</span> asc.mul(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.proxy.ArithmeticServiceProxy;</span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticService;</span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ArithmeticService arithmeticService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span> <span class="comment">//在每个单元测试运行之前都要进行这个方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.arithmeticService = <span class="keyword">new</span> ArithmeticServiceLogImpl();<span class="comment">//new ArithmeticServiceImpl();    //想用哪个功能就实例化哪个类</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="keyword">this</span>.arithmeticService.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">      System.out.println(result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-动态代理"><a href="#4-动态代理" class="headerlink" title="4.动态代理"></a>4.动态代理</h3><p>接口和核心代码不变，</p><p>代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义一个接口变量</span></span><br><span class="line">   <span class="keyword">private</span> ArithmeticService arithmeticService;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArithmeticServiceProxy</span><span class="params">(ArithmeticService arithmeticService)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.arithmeticService = arithmeticService;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      <span class="comment">//写了某个功能，不管程序有没有错误都执行</span></span><br><span class="line">      System.out.println(<span class="string">"在运行方法["</span> + method.getName() + <span class="string">"]之前执行，传递的参数为"</span> + Arrays.asList(args));</span><br><span class="line">      Object result = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         result = method.invoke(<span class="keyword">this</span>.arithmeticService, args);</span><br><span class="line">         <span class="comment">//写了某个功能，只有程序没有错误才执行</span></span><br><span class="line">         System.out.println(<span class="string">"运行方法成功，结果为："</span>+result);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">         <span class="comment">//写了某个功能，程序有错误的时候才执行</span></span><br><span class="line">         System.out.println(<span class="string">"执行的方法错误"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//写了某个功能，不管程序有没有错误都执行</span></span><br><span class="line">      System.out.println(<span class="string">"在运行方法之后执行"</span>);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hs.proxy.ArithmeticServiceProxy;</span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticService;</span><br><span class="line"><span class="keyword">import</span> com.hs.service.ArithmeticServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ArithmeticService arithmeticService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span> <span class="comment">//再每个单元测试运行之前都要进行这个方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.arithmeticService = <span class="keyword">new</span> ArithmeticServiceImpl();    <span class="comment">//想用哪个功能就实例化哪个</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 动态代理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//实例化代理类</span></span><br><span class="line">      ArithmeticServiceProxy asp = <span class="keyword">new</span> ArithmeticServiceProxy(<span class="keyword">this</span>.arithmeticService);</span><br><span class="line"><span class="comment">//      固定写法</span></span><br><span class="line">      ArithmeticService as = (ArithmeticService) Proxy.newProxyInstance(ArithmeticServiceImpl.class.getClassLoader(), ArithmeticServiceImpl.class.getInterfaces(), asp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> result = as.div(<span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">      System.out.println(result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实例分析，AOP的静态代理和动态代理&lt;/p&gt;
    
    </summary>
    
      <category term="Spring学习总结" scheme="https://heshang.ink/categories/Spring%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="SSM" scheme="https://heshang.ink/tags/SSM/"/>
    
      <category term="框架" scheme="https://heshang.ink/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://heshang.ink/tags/Spring/"/>
    
  </entry>
  
</feed>
