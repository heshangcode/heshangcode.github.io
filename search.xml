<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MyBatis学习笔记（一）mybatis介绍、环境搭建]]></title>
    <url>%2F2018%2F08%2F04%2FMyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89mybatis%E4%BB%8B%E7%BB%8D%E3%80%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文主要讲什么是框架、如何学习框架、mybatis介绍、如何用idea搭建mybatis的环境(非maven) 1.什么是框架？你可以理解为就是别人写好的工具类，为我们提供一种解决方案，最后为了提高开发效率 2.为什么学习框架？个人：对你底层开发无任何帮助意义，但是如果看源码，可以学到如何设计的 公司：效益，提高了开发效率 3.怎么去学习框架？需要遵循框架规则： 找到jar包 class文件（java文件） 入口：核心配置文件 通过官方给定的帮助文档，使用其提供API接口 测试 在这段时间里，我将学习ssm框架：MyBatis + SpringMvc + Spring 把它在我学jsp，servlet那段时间学的mvc模式，和我将要学的ssm框架，做一个小小的改动： 4.MyBatis框架是一个什么框架？MyBatis是一个持久层框架 什么是持久化： 狭义：把数据永久性的保存到数据库或者存储器都是持久化 广义：针对于数据库所有的操作，都是持久化操作 Create：增加 Read：读取查询 Update：更新 Delete：删除 MyBatis是一个ORM框架： Object：对象 java对象 Relationship：关系（关系型数据库） Mapping：映射 5.什么是MyBatis？MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。 MyBatis避免了几乎所有的JDBC代码(1.加载驱动2.获取连接3.执行语句对象4.处理结果集5.关闭资源)和手动设置参数以及获取结果集(ResultSet). 就是之前学习的时候，自己封装的数据Dao，需要自己处理数据转换成自己想要的对象 MyBatis可以对配置和原生Map使用简单的XML或注解，将接口和Java的POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。 6.idea搭建MyBatis环境（非maven）1).所需要的jar包: mybatis-3.4.6.jar mybatis的包 mysql-connector-java-5.1.45-bin.jar 数据库访问 log4j-1.2.17.jar 日志框架包(在控制台显示sql语句信息等) junit-4.12.jar 单元测试框架 hamcrest-core-1.3.jar junit-4.12所依赖的包 都可以在maven仓库中搜索下载 2).创建一个javase project3).在项目目录下创建一个lib放jar包，然后导入jar包：教程4).idea中项目结构如下： lib放jar包 com.hs.dao放接口，和接口实现类(MyBatis又分为传统模式(需要写接口和接口实现类)和接口代理模式(只需要写接口)) com.hs.model放持久化类(实体Bean、数据库表对应的对象)、XML映射文件(含SQL语句) com.hs.test放测试类 com.hs.util放封装好的工具类 jdbc.properties放连接数据库的信息，在mybatis-config.xml中加载 log4j.properties这是日志框架配置 mybatis-config.xml核心配置文件 5).代码内容1.创建数据库(含后几篇文章的数据表)cy42_mss.sql 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283DROP TABLE IF EXISTS `oa_user`;CREATE TABLE `oa_user` ( `user_id` int(11) NOT NULL AUTO_INCREMENT, `user_name` varchar(255) DEFAULT NULL, `sex` varchar(255) DEFAULT NULL, `money` decimal(7,2) DEFAULT NULL, `birthday` date DEFAULT NULL, PRIMARY KEY (`user_id`)) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4;-- ------------------------------ Records of oa_user-- ----------------------------INSERT INTO `oa_user` VALUES (&apos;1&apos;, &apos;悟空&apos;, &apos;男&apos;, &apos;888.00&apos;, null);INSERT INTO `oa_user` VALUES (&apos;2&apos;, &apos;八戒&apos;, &apos;男&apos;, &apos;999.00&apos;, null);INSERT INTO `oa_user` VALUES (&apos;3&apos;, &apos;天蓬元帅&apos;, &apos;女&apos;, &apos;1000.00&apos;, null);INSERT INTO `oa_user` VALUES (&apos;4&apos;, &apos;悟能&apos;, &apos;男&apos;, &apos;666.00&apos;, null);INSERT INTO `oa_user` VALUES (&apos;5&apos;, &apos;法悟法&apos;, &apos;女&apos;, &apos;544.00&apos;, null);INSERT INTO `oa_user` VALUES (&apos;6&apos;, &apos;悟&apos;, &apos;女&apos;, &apos;562.00&apos;, null);INSERT INTO `oa_user` VALUES (&apos;7&apos;, &apos;悟&apos;, &apos;女&apos;, &apos;562.00&apos;, null);INSERT INTO `oa_user` VALUES (&apos;14&apos;, &apos;嫦娥&apos;, &apos;女&apos;, &apos;1213.00&apos;, null);INSERT INTO `oa_user` VALUES (&apos;15&apos;, &apos;月兔&apos;, &apos;女&apos;, &apos;2113.00&apos;, null);-- ------------------------------ Table structure for skill-- ----------------------------DROP TABLE IF EXISTS `skill`;CREATE TABLE `skill` ( `skill_id` int(11) NOT NULL AUTO_INCREMENT, `skill_name` varchar(255) DEFAULT NULL, `num` int(11) DEFAULT NULL, `fk_teacher_id` int(11) DEFAULT NULL, PRIMARY KEY (`skill_id`)) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4;-- ------------------------------ Records of skill-- ----------------------------INSERT INTO `skill` VALUES (&apos;2&apos;, &apos;JS&apos;, &apos;75&apos;, null);INSERT INTO `skill` VALUES (&apos;7&apos;, &apos;CSS&apos;, &apos;66&apos;, null);INSERT INTO `skill` VALUES (&apos;8&apos;, &apos;java&apos;, &apos;66&apos;, null);INSERT INTO `skill` VALUES (&apos;9&apos;, &apos;vue&apos;, &apos;56&apos;, &apos;9999&apos;);-- ------------------------------ Table structure for sys_role-- ----------------------------DROP TABLE IF EXISTS `sys_role`;CREATE TABLE `sys_role` ( `role_id` int(11) NOT NULL AUTO_INCREMENT, `role_name` varchar(32) DEFAULT NULL, `role_key` varchar(32) DEFAULT NULL, `status` int(1) DEFAULT &apos;1&apos; COMMENT &apos;1可用 -1禁用&apos;, PRIMARY KEY (`role_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;-- ------------------------------ Records of sys_role-- ----------------------------INSERT INTO `sys_role` VALUES (&apos;-100&apos;, &apos;超级管理员&apos;, &apos;ADMIN&apos;, &apos;1&apos;);-- ------------------------------ Table structure for sys_user-- ----------------------------DROP TABLE IF EXISTS `sys_user`;CREATE TABLE `sys_user` ( `user_id` int(11) NOT NULL AUTO_INCREMENT, `account` varchar(32) NOT NULL, `password` varchar(128) NOT NULL, `user_name` varchar(32) DEFAULT &apos;&apos;, `status` int(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;1可用 -1删除 2禁用&apos;, `login_time` datetime DEFAULT CURRENT_TIMESTAMP, `ip` varchar(128) DEFAULT NULL, `fk_role_id` int(11) DEFAULT NULL, PRIMARY KEY (`user_id`), KEY `fk_role_id` (`fk_role_id`), CONSTRAINT `sys_user_ibfk_1` FOREIGN KEY (`fk_role_id`) REFERENCES `sys_role` (`role_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;-- ------------------------------ Records of sys_user-- ----------------------------INSERT INTO `sys_user` VALUES (&apos;-999&apos;, &apos;super&apos;, &apos;super&apos;, &apos;唐僧&apos;, &apos;1&apos;, &apos;2018-07-28 18:47:39&apos;, null, &apos;-100&apos;);INSERT INTO `sys_user` VALUES (&apos;-888&apos;, &apos;admin&apos;, &apos;admin&apos;, &apos;悟空&apos;, &apos;1&apos;, &apos;2018-07-03 18:48:21&apos;, null, &apos;-100&apos;); 2.数据库属性文件jdbc.properties 1234jdbc.mysql.driver=com.mysql.jdbc.Driverjdbc.mysql.url=jdbc:mysql://localhost:3306/cy42_mssjdbc.mysql.username=rootjdbc.mysql.password=root 3.核心配置文件mybatis-config.xml 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;!--加载属性文件 --&gt; &lt;properties resource="jdbc.properties"/&gt; &lt;!--自定义设置类型的别名，也就是resultMap里的type，避免包名已修改，在映射文件里修改多处地方--&gt; &lt;typeAliases&gt; &lt;!-- 方式一、com.hs.model.Skill这个类设置了别名hs，之后要用这个的话，直接写hs --&gt; &lt;!--&lt;typeAlias type="com.hs.model.Skill" alias="hs"/&gt; --&gt; &lt;!-- 方式二、com.hs.model这个包下的类，要用的时候直接写类名，比如用com.hs.model.Skill，直接写Skill --&gt; &lt;package name="com.hs.model"/&gt; &lt;/typeAliases&gt; &lt;!--配置数据库的环境--&gt; &lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;!--事务管理器:保证数据的完整性和一致性 关键信息 --&gt; &lt;!--框架：默认情况下CUD操作需要 手动提交事务 （如同在Navicat中表中输入了数据，没有点那个小√，就是没有提交事务， 但是输入insert语句，就自动提交事务了） --&gt; &lt;transactionManager type="JDBC" /&gt; &lt;!--使用的是连接池：百度java如何实行连接池的原理？ --&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="$&#123;jdbc.mysql.driver&#125;" /&gt; &lt;!--获取值，$&#123;属性文件里的变量名&#125;，也可以直接写值--&gt; &lt;property name="url" value="$&#123;jdbc.mysql.url&#125;" /&gt; &lt;!--获取值，$&#123;属性文件里的变量名&#125;，也可以直接写值--&gt; &lt;property name="username" value="$&#123;jdbc.mysql.username&#125;" /&gt; &lt;!--获取值，$&#123;属性文件里的变量名&#125;，也可以直接写值--&gt; &lt;property name="password" value="$&#123;jdbc.mysql.password&#125;" /&gt; &lt;!--获取值，$&#123;属性文件里的变量名&#125;，也可以直接写值--&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!--加载映射文件 ，也就是含sql语句的文件--&gt; &lt;mappers&gt; &lt;!--告知映射文件方式1，一个一个的配置--&gt; &lt;mapper resource="com/hs/model/SkillMapper.xml"/&gt; &lt;!-- 告知映射文件方式2，自动扫描包内的Mapper接口与配置文件 --&gt; &lt;!--&lt;package name="com.hs.model"/&gt;--&gt; &lt;/mappers&gt;&lt;/configuration&gt; 4.dao层SkillDao.java 1具体代码见第二篇 SkillDaoImpl.java 1具体代码见第二篇 5.model层Skill.java(持久化类含对象的属性，get、set方法、toSting方法) 1具体代码见第二篇 SkillMapper.xml(映射文件) 1具体代码见第二篇 6.test层MyBatisTest.java(写测试方法) 12 7.util层(封装好的工具类、可以直接调用)MyBatisUtils.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.hs.util;/** * 知识点： * final修饰类：不能被继承 * 修饰方法：不能被重写 * 修饰变量：常量不可用变，但如果是对象，对象里的值可以变 * */import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;public class MyBatisUtils &#123; private MyBatisUtils() &#123; &#125; //不允许实例化 private static final String PATH = "mybatis-config.xml"; private static InputStream inputStream; private static SqlSessionFactory sqlSessionFactory; static &#123; //1.静态代码块，只是加载一次 try &#123; //输入流 读文件 //1.读取核心配置文件 inputStream = Resources.getResourceAsStream(PATH); //2.创建SqlSession工厂(SqlSessionFactory)相当于Connection sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; catch (IOException e) &#123; e.printStackTrace(); throw new RuntimeException("加载核心配置文件失败"); &#125; &#125; /** * 获取sqlsession * @return */ public static SqlSession getSqlsession() &#123; //3.获取SqlSession 相当于执行SQL语句对象PreparedStament预处理对象 //***** SqlSession完成所有的持久化操作CRUD return sqlSessionFactory.openSession(); &#125; /** * 关闭资源 * @param sqlSession */ public static void closeSqlSession(SqlSession sqlSession) &#123; if (sqlSession != null) &#123; sqlSession.close(); &#125; &#125;&#125; 8.日志框架配置log4j.properties 123456789# 日志配置文件Global logging configurationlog4j.rootLogger=ERROR, stdout# MyBatis logging configuration...# 如果要显示SQL语句，那么这个位置需要配置为命名空间log4j.logger.命名空间log4j.logger.com.hs.model.Skill=TRACE# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea导入/移除jar包方式（三种）]]></title>
    <url>%2F2018%2F08%2F04%2Fidea%E5%AF%BC%E5%85%A5-%E7%A7%BB%E9%99%A4jar%E5%8C%85%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%89%E7%A7%8D%EF%BC%89%2F</url>
    <content type="text"><![CDATA[eclipse导入jar只需要简单的右键addxxx就可以，本篇关于idea导入jar的3种方式，用GIF展示 1.添加jar包 方法一：添加lib目录下的所有jar包 方法二：右键jar，选择addxxx 方法三：在方法一的基础上，点击lib下面的相应的jar包 2.删除jar包]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea的jar添加和删除</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql忘记账号密码]]></title>
    <url>%2F2018%2F07%2F24%2Fmysql%E5%BF%98%E8%AE%B0%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[如果突然忘记了mysql的账号密码，或者拿着别人的电脑忘记了mysql的账号密码该咋办？？？ 打开mysql.exe和mysqld.exe所在的文件夹,复制路径地址; 打开cmd命令提示符，进入上一步mysql.exe所在的文件夹; 输入命令 mysqld –skip-grant-tables 回车，此时就跳过了mysql的用户验证。注意输入此命令之后命令行就无法操作了，此时可以再打开一个新的命令行。 注意：在输入此命令之前先在任务管理器中结束mysqld.exe进程，确保mysql服务器端已结束运行; 同样也在步骤2之后，然后直接输入mysql，不需要带任何登录参数直接回车就可以登陆上数据库; 输入show databases; 可以看到所有数据库说明成功登陆; 其中mysql库就是保存用户名的地方。输入 use mysql; 选择mysql数据库; 输入show tables;查看所有表，会发现有个user表，这里存放的就是用户名，密码，权限等等账户信息; 输入select user,host,password from user; 来查看账户信息; 更改root密码，输入update user set password=password(‘root’) where user=’root’ and host=’localhost’; 再次查看账户信息，select user,host,password from user; 可以看到密码已被修改。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea初体验和设置]]></title>
    <url>%2F2018%2F07%2F22%2Fidea%E5%88%9D%E4%BD%93%E9%AA%8C%E5%92%8C%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[换了电脑，idea也能跑起来了，软件也需要设置很多地方 设置有很多啊，比如字体，UTF-8，jdk，maven，git，javawebB站视频教程]]></content>
      <categories>
        <category>编程软件</category>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hero+Github搭建个人博客（加优化设置）]]></title>
    <url>%2F2018%2F07%2F21%2FHero-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BC%98%E5%8C%96%E8%AE%BE%E7%BD%AE%EF%BC%89%2F</url>
    <content type="text"><![CDATA[哈哈哈哈，自己的博客终于搭好了！！还是写个博客记录一下自己如何搭建的吧 首先来首音乐压压惊吧 &emsp;&emsp;其实自己很久之前就想搭个博客，自己写点东西，但是可能就认为搭个博客很难，自己也懒，就没有搭建，结果今天周六，想给自己休息休息，然后找了教程，用Github+hero搭建了这个博客，一个小时就可以完成的，其实并没有那么难，傻瓜式操作，搭建完之后，发现一些优缺点： 重点是免费的，只需要你注册一个GitHub账号，自己一台电脑，然后就ojbk的事。 自带免费的域名，如果自己有其他需求，也可以购买其他的域名。 但是由于Github是国外的，搭建的博客服务器是在Github上，所有没有VPN访问，是很慢的 搭建的教程B站视频教程&emsp;&emsp;&emsp;&emsp;知乎文字教程&emsp;&emsp;&emsp;&emsp;简书文字教程 搭建成功后主题优化教程B站视频教程&emsp;&emsp;&emsp;&emsp;next主题官方文档&emsp;&emsp;&emsp;&emsp;CSDN个性化设置 写博客markdown语法CSDNmarkdown文字教程&emsp;&emsp;&emsp;&emsp;简书作者教程&emsp;&emsp;&emsp;&emsp;简书官方教程 发现一个比较详细的各种设置的博客博客链接 为了解决博客部署在GitHub，访问博客速度慢的问题，把博客同时部署在coding上简书教程 自己总结的一些点新建一个博客文章hexo n 文章名字tags: - 标签名 ##注意 -后面有空格，还有些markdown语句后也要有空格，修改主题文件时，:后面也有空格categories: ​ - 分类名字 ​ - 子分类名字 头像设置旋转找到本地博客目录下themes\next\source\css\common\components\sidebar\sidebar-author.styl加入：1234567891011121314.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; opacity: hexo-config('avatar.opacity') is a 'unit' ? hexo-config('avatar.opacity') : 1; border-radius: 50%; transition: 2s all;&#125;.site-author-image：hover &#123; transform: rotate(360deg);&#125; 侧栏的音乐设置在网易云音乐找到歌，然后点击生成外链播放器，复制代码到blog\themes\next\layout_macro的sidebar.swig文件，添加刚刚复制的外链代码 代码高亮在markdown中的三个点后加代码语言 页面右上角Github图标设置在这里找到想要的设置 http://tholman.com/github-corners/ 复制代码到themes\next\layout文件_layout.swig 修改文章内链接样式文件themes\next\source\css_common\components\post\post.styl下12345678.post-body p a &#123; color: #0593d3; border-bottom: none; &amp;:hover &#123; color: blue; text-decoration: underline; &#125;&#125; next6.0以上文字字数和阅读时间统计见GitHub：https://github.com/theme-next/hexo-symbols-count-time 动态背景设置在主题文件中 搜素canvas 四个主题 next6.0以上版本，动画背景无效果，见Github：1.https://github.com/theme-next/theme-next-canvas-nest2.https://github.com/theme-next/theme-next-three在主题样式里有注释说明 每次本地写完博客，上传的代码hexo claenhexo ghexo d在博客的根目录下进行 大概就写这些吧，只希望自己博客搭建起来，自己要勤快的写东西！！！！！！]]></content>
      <categories>
        <category>hero</category>
      </categories>
      <tags>
        <tag>hero</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
